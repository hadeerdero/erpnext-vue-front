{"ast":null,"code":"import axios from 'axios';\nlet locale = localStorage.getItem(\"locale\") || 'en';\n// const userRole = localStorage.getItem('role');\n\n// axios.defaults.baseURL = 'http://45.79.209.137'\n// axios.defaults.baseURL = 'http://160.153.175.147'\n\naxios.defaults.baseUR = 'http://127.0.0.1:8000';\nconst axiosBusiness = axios.create({\n  // baseURL:  \"http://45.79.209.137\",\n  // baseURL:  \"http://160.153.175.147\",\n  baseURL: \"http://127.0.0.1:8000\",\n  headers: {\n    'Content-Type': 'application/json',\n    'lang': locale\n    // 'X-User-Role': userRole,\n    // \"userRole\": 'admin'\n  }\n  // body: JSON.stringify({ role: userRole })\n});\n// Add a request interceptor\naxiosBusiness.interceptors.request.use(async config => {\n  // Get the token from the store\n  let accessToken = localStorage.getItem('token');\n  if (accessToken) {\n    config.headers[\"Authorization\"] = `Bearer ${accessToken}`;\n  }\n  if (config.method === 'post' || config.method === 'put') {\n    if (config.data instanceof FormData) {\n      // config.data.append('role', userRole);\n    } else {\n      config.data = {\n        ...config.data\n        // role: userRole\n      };\n    }\n  } else if (config.method === 'get' || config.method === 'delete') {\n    config.params = {\n      ...config.params\n      // role: userRole\n    };\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n// axiosBusiness.defaults.baseURL = 'http://160.153.175.147'\n// Add a response interceptor\naxiosBusiness.interceptors.response.use(response => {\n  return response;\n}, async error => {\n  // Throw an error to cancel the request\n  if (error.response && error.response.status === 500) {\n    throw new Error('Internal Server Error');\n  }\n  // Check if the error is due to an expired token\n  if (error.response.status === 401 && error.config && !error.config.__isRetryRequest) {\n    // Set the __isRetryRequest flag to prevent an infinite loop\n    error.config.__isRetryRequest = true;\n    // Refresh the token\n    // await refreshingToken();\n    // Update the Authorization header with the new token\n    let accessToken = localStorage.getItem('token');\n    error.config.headers[\"Authorization\"] = `Bearer ${accessToken}`;\n    // Retry the original request with the new token\n    return axiosBusiness(error.config);\n  }\n  return Promise.reject(error);\n});\nexport { axiosBusiness };","map":{"version":3,"names":["axios","locale","localStorage","getItem","defaults","baseUR","axiosBusiness","create","baseURL","headers","interceptors","request","use","config","accessToken","method","data","FormData","params","error","Promise","reject","response","status","Error","__isRetryRequest"],"sources":["C:/Users/ALEX/Desktop/hadeerwork/blood_bank_system/erpnext-vue-front/src/plugins/axios/axiosBusiness.js"],"sourcesContent":["\r\nimport axios from 'axios';\r\nlet locale = localStorage.getItem(\"locale\") || 'en';\r\n// const userRole = localStorage.getItem('role');\r\n\r\n// axios.defaults.baseURL = 'http://45.79.209.137'\r\n// axios.defaults.baseURL = 'http://160.153.175.147'\r\n\r\naxios.defaults.baseUR ='http://127.0.0.1:8000'\r\n\r\nconst axiosBusiness = axios.create({\r\n  // baseURL:  \"http://45.79.209.137\",\r\n  // baseURL:  \"http://160.153.175.147\",\r\n  baseURL:  \"http://127.0.0.1:8000\",\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    'lang': locale,\r\n    // 'X-User-Role': userRole,\r\n    // \"userRole\": 'admin'\r\n  },\r\n  // body: JSON.stringify({ role: userRole })\r\n\r\n});\r\n// Add a request interceptor\r\naxiosBusiness.interceptors.request.use(\r\n  async (config) => {\r\n  // Get the token from the store\r\n  let accessToken = localStorage.getItem('token')\r\n  if(accessToken){\r\n    config.headers[\"Authorization\"] = `Bearer ${accessToken}`;\r\n  }\r\n  if (config.method === 'post' || config.method === 'put') {\r\n    if (config.data instanceof FormData) {\r\n      // config.data.append('role', userRole);\r\n    } else {\r\n      config.data = {\r\n        ...config.data,\r\n        // role: userRole\r\n      };\r\n    }\r\n  } else if (config.method === 'get' || config.method === 'delete') {\r\n    config.params = {\r\n      ...config.params,\r\n      // role: userRole\r\n    };\r\n  }\r\n  return config;\r\n},\r\n(error) => {\r\n  return Promise.reject(error);\r\n}\r\n);\r\n// axiosBusiness.defaults.baseURL = 'http://160.153.175.147'\r\n// Add a response interceptor\r\naxiosBusiness.interceptors.response.use(\r\n  (response) => {\r\n     \r\n    return response;\r\n  },\r\n  async (error) => {\r\n    // Throw an error to cancel the request\r\n    if (error.response && error.response.status === 500) {\r\n        throw new Error('Internal Server Error');\r\n    } \r\n    // Check if the error is due to an expired token\r\n    if (error.response.status === 401 && error.config && !error.config.__isRetryRequest) {\r\n      // Set the __isRetryRequest flag to prevent an infinite loop\r\n      error.config.__isRetryRequest = true;\r\n      // Refresh the token\r\n      // await refreshingToken();\r\n      // Update the Authorization header with the new token\r\n      let accessToken = localStorage.getItem('token')\r\n      error.config.headers[\"Authorization\"] = `Bearer ${accessToken}`;\r\n      // Retry the original request with the new token\r\n      return axiosBusiness(error.config);\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport {axiosBusiness};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,IAAIC,MAAM,GAAGC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC,IAAI,IAAI;AACnD;;AAEA;AACA;;AAEAH,KAAK,CAACI,QAAQ,CAACC,MAAM,GAAE,uBAAuB;AAE9C,MAAMC,aAAa,GAAGN,KAAK,CAACO,MAAM,CAAC;EACjC;EACA;EACAC,OAAO,EAAG,uBAAuB;EACjCC,OAAO,EAAE;IACP,cAAc,EAAE,kBAAkB;IAClC,MAAM,EAAER;IACR;IACA;EACF;EACA;AAEF,CAAC,CAAC;AACF;AACAK,aAAa,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACpC,MAAOC,MAAM,IAAK;EAClB;EACA,IAAIC,WAAW,GAAGZ,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC/C,IAAGW,WAAW,EAAC;IACbD,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUK,WAAW,EAAE;EAC3D;EACA,IAAID,MAAM,CAACE,MAAM,KAAK,MAAM,IAAIF,MAAM,CAACE,MAAM,KAAK,KAAK,EAAE;IACvD,IAAIF,MAAM,CAACG,IAAI,YAAYC,QAAQ,EAAE;MACnC;IAAA,CACD,MAAM;MACLJ,MAAM,CAACG,IAAI,GAAG;QACZ,GAAGH,MAAM,CAACG;QACV;MACF,CAAC;IACH;EACF,CAAC,MAAM,IAAIH,MAAM,CAACE,MAAM,KAAK,KAAK,IAAIF,MAAM,CAACE,MAAM,KAAK,QAAQ,EAAE;IAChEF,MAAM,CAACK,MAAM,GAAG;MACd,GAAGL,MAAM,CAACK;MACV;IACF,CAAC;EACH;EACA,OAAOL,MAAM;AACf,CAAC,EACAM,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACA,CAAC;AACD;AACA;AACAb,aAAa,CAACI,YAAY,CAACY,QAAQ,CAACV,GAAG,CACpCU,QAAQ,IAAK;EAEZ,OAAOA,QAAQ;AACjB,CAAC,EACD,MAAOH,KAAK,IAAK;EACf;EACA,IAAIA,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;IACjD,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;EAC5C;EACA;EACA,IAAIL,KAAK,CAACG,QAAQ,CAACC,MAAM,KAAK,GAAG,IAAIJ,KAAK,CAACN,MAAM,IAAI,CAACM,KAAK,CAACN,MAAM,CAACY,gBAAgB,EAAE;IACnF;IACAN,KAAK,CAACN,MAAM,CAACY,gBAAgB,GAAG,IAAI;IACpC;IACA;IACA;IACA,IAAIX,WAAW,GAAGZ,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC/CgB,KAAK,CAACN,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUK,WAAW,EAAE;IAC/D;IACA,OAAOR,aAAa,CAACa,KAAK,CAACN,MAAM,CAAC;EACpC;EACA,OAAOO,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,SAAQb,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}