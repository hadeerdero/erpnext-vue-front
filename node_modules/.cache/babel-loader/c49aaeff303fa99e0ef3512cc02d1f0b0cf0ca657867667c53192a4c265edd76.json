{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.some.js\";\n// import { createRouter, createWebHistory } from \"vue-router\";\n// import HomeView from \"@/views/HomeView.vue\";\n// import RegisterView from \"@/views/auth/RegisterView.vue\";\n// import LoginView from \"@/views/auth/LoginView.vue\"; // Import your login component\n// import store from \"@/store\"; // Import your Vuex store\n// import DonationView from \"@/views/DonationView.vue\"\n\n// const routes = [\n//   {\n//     path: \"/\",\n//     name: \"home\",\n//     component: HomeView,\n//     meta: {\n//       requiresAuth: false \n//     }\n//   },\n//   {\n//     path: \"/about\",\n//     name: \"about\",\n//     component: () => import(\"../views/AboutView.vue\"),\n//     meta: {\n//       requiresAuth: false \n//     }\n//   },\n//   // {\n//   //   path: \"/sign-up\",\n//   //   name: \"register\",\n//   //   component: RegisterView,\n//   //   meta: {\n//   //     requiresAuth: false, \n//   //     requiresGuest: true \n//   //   }\n//   // },\n//   {\n//     path: \"/donation-request\",\n//     name: \"donation-request\",\n//     component: DonationView,\n//     meta: {\n//       meta: { requiresAuth: true, roles: ['donor'] }\n\n//     }\n//   },\n//   {\n//     path: \"/sign-up\",\n//     name: \"register\",\n//     component: RegisterView,\n//     meta: {\n//       requiresAuth: false, \n//       requiresGuest: true \n//     }\n//   },\n//   {\n//     path: \"/login\",\n//     name: \"login\",\n//     component: LoginView,\n//     meta: {\n//       requiresAuth: false, \n//       requiresGuest: true \n//     }\n//   },\n\n//   // Add a catch-all route for 404 pages\n//   {\n//     path: \"/:pathMatch(.*)*\",\n//     name: \"not-found\",\n//     component: () => import(\"@/views/NotFoundView.vue\"),\n//     meta: {\n//       requiresAuth: false\n//     }\n//   }\n// ];\n\n// const router = createRouter({\n//   history: createWebHistory(process.env.BASE_URL),\n//   routes,\n// });\n\n// router.beforeEach((to, from, next) => {\n//   if (to.matched.some(record => record.meta.requiresAuth)) {\n//       if (!store.getters['auth/isAuthenticated']) {\n//           next({\n//               path: '/login',\n//               query: { redirect: to.fullPath }\n//           });\n//       } else {\n//           if (to.meta.roles) {\n//               const userRole = store.getters['auth/userRole'];\n//               if (to.meta.roles.includes(userRole)) {\n//                   next();\n//               } else {\n//                   next({ path: '/unauthorized' }); \n//               }\n//           } else {\n//               next();\n//           }\n//       }\n//   } else {\n//       next();\n//   }\n// });\n// export default router;\n\nimport { createRouter, createWebHistory } from \"vue-router\";\nimport HomeView from \"@/views/HomeView.vue\";\nimport RegisterView from \"@/views/auth/RegisterView.vue\";\nimport LoginView from \"@/views/auth/LoginView.vue\";\nimport store from \"@/store\";\nimport DonationView from \"@/views/DonationView.vue\";\n// import DonationRequestsManagementView from \"@/views/stock/DonationRequestsManagementView\"\n\nconst routes = [{\n  path: '/dashboard',\n  name: 'Dashboard',\n  component: () => import('@/views/DashboardView.vue'),\n  meta: {\n    requiresAuth: true\n  }\n}, {\n  path: \"/\",\n  name: \"home\",\n  component: HomeView,\n  meta: {\n    requiresAuth: false\n  }\n}, {\n  path: \"/about\",\n  name: \"about\",\n  component: () => import(\"../views/AboutView.vue\"),\n  meta: {\n    requiresAuth: false\n  }\n}, {\n  path: \"/donation-request\",\n  name: \"donation-request\",\n  component: DonationView,\n  meta: {\n    requiresAuth: true,\n    roles: ['donor'] // Fixed duplicate meta property\n  }\n}, {\n  path: \"/bloodbank-requests\",\n  name: \"bloodbank-requests\",\n  component: () => import(\"@/views/stock/DonationRequestsManagementView\"),\n  meta: {\n    requiresAuth: true,\n    roles: ['bloodBank']\n  }\n}, {\n  path: \"/sign-up\",\n  name: \"register\",\n  component: RegisterView,\n  meta: {\n    requiresAuth: false,\n    requiresGuest: true\n  }\n}, {\n  path: \"/login\",\n  name: \"login\",\n  component: LoginView,\n  meta: {\n    requiresAuth: false,\n    requiresGuest: true\n  }\n},\n// Add a catch-all route for 404 pages\n{\n  path: \"/:pathMatch(.*)*\",\n  name: \"not-found\",\n  component: () => import(\"@/views/NotFoundView.vue\"),\n  meta: {\n    requiresAuth: false\n  }\n}];\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL),\n  routes\n});\n\n// router.beforeEach((to, from, next) => {\n//   console.log('Current role:', store.getters['auth/userRole']);\n//   // Check if route requires guest access (like login/register)\n//   if (to.matched.some(record => record.meta.requiresGuest)) {\n//     if (store.getters['auth/isAuthenticated']) {\n//       // If logged in, redirect to home\n//       next({ path: '/' });\n//       return;\n//     }\n//   }\n\n//   // Check if route requires authentication\n//   // if (to.matched.some(record => record.meta.requiresAuth)) {\n//   //   if (!store.getters['auth/isAuthenticated']) {\n//   //     // Not authenticated, redirect to login with return url\n//   //     next({\n//   //       path: '/login',\n//   //       query: { redirect: to.fullPath }\n//   //     });\n//   //     return;\n//   //   }\n\n//   //   // Check if route has role requirements\n//   //   if (to.meta.roles) {\n//   //     const userRole = store.getters['auth/userRole'];\n//   //     if (!to.meta.roles.includes(userRole)) {\n//   //       // User doesn't have required role\n//   //       next({ path: '/unauthorized' });\n//   //       return;\n//   //     }\n//   //   }\n//   // }\n\n//   router.beforeEach((to, from, next) => {\n//   const isAuthenticated = store.getters['auth/isAuthenticated'];\n\n//   if (to.matched.some(record => record.meta.requiresAuth)) {\n//     if (!isAuthenticated) {\n//       next('/login');\n//     } else {\n//       next();\n//     }\n//   } else if (isAuthenticated && to.path === '/login') {\n//     next('/app/home'); // Redirect to dashboard if logged in\n//   } else {\n//     next();\n//   }\n// });\n\n//   // Proceed to route\n//   next();\n// });\n\nrouter.beforeEach(async (to, from, next) => {\n  const isAuthenticated = store.getters['auth/isAuthenticated'];\n  const requiresAuth = to.matched.some(record => record.meta.requiresAuth);\n  const requiresGuest = to.matched.some(record => record.meta.requiresGuest);\n\n  // Handle guest routes (login, register, etc.)\n  if (requiresGuest) {\n    if (isAuthenticated) {\n      // If user is authenticated, redirect to home page\n      next(store.getters['auth/homePage'] || '/app/home');\n    } else {\n      // Allow access to guest routes\n      next();\n    }\n    return;\n  }\n\n  // Handle protected routes\n  if (requiresAuth) {\n    if (!isAuthenticated) {\n      // Not authenticated - redirect to login with return URL\n      next({\n        path: '/login',\n        query: {\n          redirect: to.fullPath\n        }\n      });\n      return;\n    }\n\n    // Optional: Verify token with server if needed\n    try {\n      const isValid = await store.dispatch('auth/verifyToken');\n      if (!isValid) {\n        throw new Error('Invalid session');\n      }\n      next();\n    } catch (error) {\n      // Token verification failed - force logout and redirect to login\n      await store.dispatch('auth/logout');\n      next({\n        path: '/login',\n        query: {\n          redirect: to.fullPath\n        }\n      });\n    }\n    return;\n  }\n\n  // Handle case when authenticated user tries to access login page\n  if (isAuthenticated && to.path === '/login') {\n    next(store.getters['auth/homePage'] || '/app/home');\n    return;\n  }\n\n  // For all other cases, proceed normally\n  next();\n});\nexport default router;","map":{"version":3,"names":["createRouter","createWebHistory","HomeView","RegisterView","LoginView","store","DonationView","routes","path","name","component","meta","requiresAuth","roles","requiresGuest","router","history","process","env","BASE_URL","beforeEach","to","from","next","isAuthenticated","getters","matched","some","record","query","redirect","fullPath","isValid","dispatch","Error","error"],"sources":["D:/hadeerwork/erpnext-vue-front/src/router/index.js"],"sourcesContent":["// import { createRouter, createWebHistory } from \"vue-router\";\r\n// import HomeView from \"@/views/HomeView.vue\";\r\n// import RegisterView from \"@/views/auth/RegisterView.vue\";\r\n// import LoginView from \"@/views/auth/LoginView.vue\"; // Import your login component\r\n// import store from \"@/store\"; // Import your Vuex store\r\n// import DonationView from \"@/views/DonationView.vue\"\r\n\r\n// const routes = [\r\n//   {\r\n//     path: \"/\",\r\n//     name: \"home\",\r\n//     component: HomeView,\r\n//     meta: {\r\n//       requiresAuth: false \r\n//     }\r\n//   },\r\n//   {\r\n//     path: \"/about\",\r\n//     name: \"about\",\r\n//     component: () => import(\"../views/AboutView.vue\"),\r\n//     meta: {\r\n//       requiresAuth: false \r\n//     }\r\n//   },\r\n//   // {\r\n//   //   path: \"/sign-up\",\r\n//   //   name: \"register\",\r\n//   //   component: RegisterView,\r\n//   //   meta: {\r\n//   //     requiresAuth: false, \r\n//   //     requiresGuest: true \r\n//   //   }\r\n//   // },\r\n//   {\r\n//     path: \"/donation-request\",\r\n//     name: \"donation-request\",\r\n//     component: DonationView,\r\n//     meta: {\r\n//       meta: { requiresAuth: true, roles: ['donor'] }\r\n      \r\n//     }\r\n//   },\r\n//   {\r\n//     path: \"/sign-up\",\r\n//     name: \"register\",\r\n//     component: RegisterView,\r\n//     meta: {\r\n//       requiresAuth: false, \r\n//       requiresGuest: true \r\n//     }\r\n//   },\r\n//   {\r\n//     path: \"/login\",\r\n//     name: \"login\",\r\n//     component: LoginView,\r\n//     meta: {\r\n//       requiresAuth: false, \r\n//       requiresGuest: true \r\n//     }\r\n//   },\r\n \r\n//   // Add a catch-all route for 404 pages\r\n//   {\r\n//     path: \"/:pathMatch(.*)*\",\r\n//     name: \"not-found\",\r\n//     component: () => import(\"@/views/NotFoundView.vue\"),\r\n//     meta: {\r\n//       requiresAuth: false\r\n//     }\r\n//   }\r\n// ];\r\n\r\n// const router = createRouter({\r\n//   history: createWebHistory(process.env.BASE_URL),\r\n//   routes,\r\n// });\r\n\r\n// router.beforeEach((to, from, next) => {\r\n//   if (to.matched.some(record => record.meta.requiresAuth)) {\r\n//       if (!store.getters['auth/isAuthenticated']) {\r\n//           next({\r\n//               path: '/login',\r\n//               query: { redirect: to.fullPath }\r\n//           });\r\n//       } else {\r\n//           if (to.meta.roles) {\r\n//               const userRole = store.getters['auth/userRole'];\r\n//               if (to.meta.roles.includes(userRole)) {\r\n//                   next();\r\n//               } else {\r\n//                   next({ path: '/unauthorized' }); \r\n//               }\r\n//           } else {\r\n//               next();\r\n//           }\r\n//       }\r\n//   } else {\r\n//       next();\r\n//   }\r\n// });\r\n// export default router;\r\n\r\n\r\nimport { createRouter, createWebHistory } from \"vue-router\";\r\nimport HomeView from \"@/views/HomeView.vue\";\r\nimport RegisterView from \"@/views/auth/RegisterView.vue\";\r\nimport LoginView from \"@/views/auth/LoginView.vue\";\r\nimport store from \"@/store\";\r\nimport DonationView from \"@/views/DonationView.vue\";\r\n// import DonationRequestsManagementView from \"@/views/stock/DonationRequestsManagementView\"\r\n\r\nconst routes = [\r\n {\r\n  path: '/dashboard',\r\n  name: 'Dashboard',\r\n  component: () => import('@/views/DashboardView.vue'),\r\n  meta: { requiresAuth: true }\r\n},\r\n  {\r\n    path: \"/\",\r\n    name: \"home\",\r\n    component: HomeView,\r\n    meta: {\r\n      requiresAuth: false \r\n    }\r\n  },\r\n  {\r\n    path: \"/about\",\r\n    name: \"about\",\r\n    component: () => import(\"../views/AboutView.vue\"),\r\n    meta: {\r\n      requiresAuth: false \r\n    }\r\n  },\r\n  {\r\n    path: \"/donation-request\",\r\n    name: \"donation-request\",\r\n    component: DonationView,\r\n    meta: {\r\n      requiresAuth: true,\r\n      roles: ['donor'] // Fixed duplicate meta property\r\n    }\r\n  },\r\n  {\r\n    path: \"/bloodbank-requests\",\r\n    name: \"bloodbank-requests\",\r\n    component: () => import(\"@/views/stock/DonationRequestsManagementView\"),\r\n    meta: {\r\n      requiresAuth: true,\r\n      roles: ['bloodBank']\r\n    }\r\n  },\r\n  {\r\n    path: \"/sign-up\",\r\n    name: \"register\",\r\n    component: RegisterView,\r\n    meta: {\r\n      requiresAuth: false,\r\n      requiresGuest: true \r\n    }\r\n  },\r\n  {\r\n    path: \"/login\",\r\n    name: \"login\",\r\n    component: LoginView,\r\n    meta: {\r\n      requiresAuth: false,\r\n      requiresGuest: true \r\n    }\r\n  },\r\n \r\n  // Add a catch-all route for 404 pages\r\n  {\r\n    path: \"/:pathMatch(.*)*\",\r\n    name: \"not-found\",\r\n    component: () => import(\"@/views/NotFoundView.vue\"),\r\n    meta: {\r\n      requiresAuth: false\r\n    }\r\n  }\r\n];\r\n\r\nconst router = createRouter({\r\n  history: createWebHistory(process.env.BASE_URL),\r\n  routes,\r\n});\r\n\r\n// router.beforeEach((to, from, next) => {\r\n//   console.log('Current role:', store.getters['auth/userRole']);\r\n//   // Check if route requires guest access (like login/register)\r\n//   if (to.matched.some(record => record.meta.requiresGuest)) {\r\n//     if (store.getters['auth/isAuthenticated']) {\r\n//       // If logged in, redirect to home\r\n//       next({ path: '/' });\r\n//       return;\r\n//     }\r\n//   }\r\n\r\n//   // Check if route requires authentication\r\n//   // if (to.matched.some(record => record.meta.requiresAuth)) {\r\n//   //   if (!store.getters['auth/isAuthenticated']) {\r\n//   //     // Not authenticated, redirect to login with return url\r\n//   //     next({\r\n//   //       path: '/login',\r\n//   //       query: { redirect: to.fullPath }\r\n//   //     });\r\n//   //     return;\r\n//   //   }\r\n\r\n//   //   // Check if route has role requirements\r\n//   //   if (to.meta.roles) {\r\n//   //     const userRole = store.getters['auth/userRole'];\r\n//   //     if (!to.meta.roles.includes(userRole)) {\r\n//   //       // User doesn't have required role\r\n//   //       next({ path: '/unauthorized' });\r\n//   //       return;\r\n//   //     }\r\n//   //   }\r\n//   // }\r\n\r\n//   router.beforeEach((to, from, next) => {\r\n//   const isAuthenticated = store.getters['auth/isAuthenticated'];\r\n  \r\n//   if (to.matched.some(record => record.meta.requiresAuth)) {\r\n//     if (!isAuthenticated) {\r\n//       next('/login');\r\n//     } else {\r\n//       next();\r\n//     }\r\n//   } else if (isAuthenticated && to.path === '/login') {\r\n//     next('/app/home'); // Redirect to dashboard if logged in\r\n//   } else {\r\n//     next();\r\n//   }\r\n// });\r\n\r\n//   // Proceed to route\r\n//   next();\r\n// });\r\n\r\n\r\nrouter.beforeEach(async (to, from, next) => {\r\n  const isAuthenticated = store.getters['auth/isAuthenticated'];\r\n  const requiresAuth = to.matched.some(record => record.meta.requiresAuth);\r\n  const requiresGuest = to.matched.some(record => record.meta.requiresGuest);\r\n\r\n  // Handle guest routes (login, register, etc.)\r\n  if (requiresGuest) {\r\n    if (isAuthenticated) {\r\n      // If user is authenticated, redirect to home page\r\n      next(store.getters['auth/homePage'] || '/app/home');\r\n    } else {\r\n      // Allow access to guest routes\r\n      next();\r\n    }\r\n    return;\r\n  }\r\n\r\n  // Handle protected routes\r\n  if (requiresAuth) {\r\n    if (!isAuthenticated) {\r\n      // Not authenticated - redirect to login with return URL\r\n      next({\r\n        path: '/login',\r\n        query: { redirect: to.fullPath }\r\n      });\r\n      return;\r\n    }\r\n\r\n    // Optional: Verify token with server if needed\r\n    try {\r\n      const isValid = await store.dispatch('auth/verifyToken');\r\n      if (!isValid) {\r\n        throw new Error('Invalid session');\r\n      }\r\n      next();\r\n    } catch (error) {\r\n      // Token verification failed - force logout and redirect to login\r\n      await store.dispatch('auth/logout');\r\n      next({\r\n        path: '/login',\r\n        query: { redirect: to.fullPath }\r\n      });\r\n    }\r\n    return;\r\n  }\r\n\r\n  // Handle case when authenticated user tries to access login page\r\n  if (isAuthenticated && to.path === '/login') {\r\n    next(store.getters['auth/homePage'] || '/app/home');\r\n    return;\r\n  }\r\n\r\n  // For all other cases, proceed normally\r\n  next();\r\n});\r\n\r\n\r\nexport default router;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASA,YAAY,EAAEC,gBAAgB,QAAQ,YAAY;AAC3D,OAAOC,QAAQ,MAAM,sBAAsB;AAC3C,OAAOC,YAAY,MAAM,+BAA+B;AACxD,OAAOC,SAAS,MAAM,4BAA4B;AAClD,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAOC,YAAY,MAAM,0BAA0B;AACnD;;AAEA,MAAMC,MAAM,GAAG,CACd;EACCC,IAAI,EAAE,YAAY;EAClBC,IAAI,EAAE,WAAW;EACjBC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,2BAA2B,CAAC;EACpDC,IAAI,EAAE;IAAEC,YAAY,EAAE;EAAK;AAC7B,CAAC,EACC;EACEJ,IAAI,EAAE,GAAG;EACTC,IAAI,EAAE,MAAM;EACZC,SAAS,EAAER,QAAQ;EACnBS,IAAI,EAAE;IACJC,YAAY,EAAE;EAChB;AACF,CAAC,EACD;EACEJ,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,OAAO;EACbC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,wBAAwB,CAAC;EACjDC,IAAI,EAAE;IACJC,YAAY,EAAE;EAChB;AACF,CAAC,EACD;EACEJ,IAAI,EAAE,mBAAmB;EACzBC,IAAI,EAAE,kBAAkB;EACxBC,SAAS,EAAEJ,YAAY;EACvBK,IAAI,EAAE;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}