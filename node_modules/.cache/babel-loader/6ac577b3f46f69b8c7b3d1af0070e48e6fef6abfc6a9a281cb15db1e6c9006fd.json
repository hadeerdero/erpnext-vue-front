{"ast":null,"code":"import { axiosAuth } from \"@/plugins/axios/axiosAuth\";\nconst state = {\n  token: localStorage.getItem(\"token\") || null,\n  user: JSON.parse(localStorage.getItem(\"user\")) || null,\n  status: \"\",\n  // Can be 'loading', 'success', 'error'\n  sid: localStorage.getItem(\"sid\") || null,\n  // Store session ID\n  home_page: localStorage.getItem(\"home_page\") || \"/app/home\"\n};\nconst getters = {\n  isAuthenticated: state => !!state.sid,\n  // Now checking sid instead of token\n  authStatus: state => state.status,\n  currentUser: state => state.user,\n  homePage: state => state.home_page,\n  hasRole: state => role => state.user && state.user.role === role\n};\nconst mutations = {\n  AUTH_REQUEST(state) {\n    state.status = \"loading\";\n  },\n  AUTH_SUCCESS(state, {\n    sid,\n    user,\n    home_page\n  }) {\n    state.status = \"success\";\n    state.sid = sid;\n    state.user = {\n      email: user,\n      full_name: state.full_name\n    };\n    state.home_page = home_page;\n\n    // Persist in localStorage\n    localStorage.setItem(\"sid\", sid);\n    localStorage.setItem(\"user\", JSON.stringify(state.user));\n    localStorage.setItem(\"home_page\", home_page);\n  },\n  LOGOUT(state) {\n    state.sid = null;\n    state.user = null;\n    state.home_page = \"/app/home\";\n    localStorage.removeItem(\"sid\");\n    localStorage.removeItem(\"user\");\n    localStorage.removeItem(\"home_page\");\n  },\n  AUTH_ERROR(state) {\n    state.status = \"error\";\n    state.sid = null;\n    state.user = null;\n  },\n  SET_FULL_NAME(state, full_name) {\n    state.full_name = full_name;\n    if (state.user) {\n      state.user.full_name = full_name;\n      localStorage.setItem(\"user\", JSON.stringify(state.user));\n    }\n  }\n};\nconst actions = {\n  async login({\n    commit\n  }, credentials) {\n    commit(\"AUTH_REQUEST\");\n    try {\n      const response = await axiosAuth.post(\"/api/method/my_app.custom_login\", {\n        usr: credentials.email,\n        pwd: credentials.password\n      });\n\n      // Extract data from response\n      const {\n        message\n      } = response.data;\n      const {\n        sid,\n        user,\n        full_name,\n        home_page\n      } = message;\n\n      // Store session data\n      commit(\"AUTH_SUCCESS\", {\n        sid,\n        user,\n        home_page\n      });\n      commit(\"SET_FULL_NAME\", full_name);\n\n      // Set CSRF token for subsequent requests\n      axiosAuth.defaults.headers.common[\"X-Frappe-Sid\"] = sid;\n      return response.data;\n    } catch (error) {\n      commit(\"AUTH_ERROR\");\n      localStorage.removeItem(\"sid\");\n      localStorage.removeItem(\"user\");\n      delete axiosAuth.defaults.headers.common[\"X-Frappe-Sid\"];\n      throw error;\n    }\n  },\n  async logout({\n    commit\n  }) {\n    try {\n      await axiosAuth.post(\"/api/method/frappe.auth.logout\");\n    } finally {\n      commit(\"LOGOUT\");\n      localStorage.removeItem(\"sid\");\n      localStorage.removeItem(\"user\");\n      delete axiosAuth.defaults.headers.common[\"X-Frappe-Sid\"];\n    }\n  },\n  checkAuth({\n    commit\n  }) {\n    const sid = localStorage.getItem(\"sid\");\n    if (sid) {\n      const user = JSON.parse(localStorage.getItem(\"user\"));\n      axiosAuth.defaults.headers.common[\"X-Frappe-Sid\"] = sid;\n      commit(\"AUTH_SUCCESS\", {\n        sid,\n        user: user.email,\n        home_page: localStorage.getItem(\"home_page\")\n      });\n      commit(\"SET_FULL_NAME\", user.full_name);\n    }\n  },\n  // Optional: Refresh session\n  async refreshSession({\n    state,\n    commit\n  }) {\n    if (!state.sid) return;\n    try {\n      const response = await axiosAuth.get(\"/api/method/frappe.auth.get_logged_user\");\n      commit(\"SET_FULL_NAME\", response.data.message.full_name);\n    } catch (error) {\n      commit(\"LOGOUT\");\n    }\n  }\n};\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  mutations,\n  actions\n};\n\n// import { axiosAuth } from \"@/plugins/axios/axiosAuth\";\n\n// const state = {\n//   token: localStorage.getItem(\"token\") || null,\n//   user: JSON.parse(localStorage.getItem(\"user\")) || null,\n//   status: \"\", // 'loading', 'success', 'error'\n//   sid: localStorage.getItem(\"sid\") || null,\n//   home_page: localStorage.getItem(\"home_page\") || \"/desk\",\n//   full_name: localStorage.getItem(\"full_name\") || null,\n// };\n\n// const getters = {\n//   isAuthenticated: (state) => !!state.sid,\n//   authStatus: (state) => state.status,\n//   currentUser: (state) => state.user,\n//   homePage: (state) => state.home_page,\n//   fullName: (state) => state.full_name,\n//   hasRole: (state) => (role) =>\n//     state.user && state.user.roles && state.user.roles.includes(role),\n// };\n\n// const mutations = {\n//   AUTH_REQUEST(state) {\n//     state.status = \"loading\";\n//   },\n//   AUTH_SUCCESS(state, { sid, user, home_page, full_name }) {\n//     state.status = \"success\";\n//     state.sid = sid;\n//     state.user = {\n//       email: user,\n//       full_name: full_name,\n//       roles: state.user?.roles || [],\n//     };\n//     state.home_page = home_page;\n//     state.full_name = full_name;\n\n//     // Persist in localStorage\n//     localStorage.setItem(\"sid\", sid);\n//     localStorage.setItem(\"user\", JSON.stringify(state.user));\n//     localStorage.setItem(\"home_page\", home_page);\n//     localStorage.setItem(\"full_name\", full_name);\n//   },\n//   AUTH_ERROR(state) {\n//     state.status = \"error\";\n//     state.sid = null;\n//     state.user = null;\n//     state.full_name = null;\n//     localStorage.removeItem(\"sid\");\n//     localStorage.removeItem(\"user\");\n//     localStorage.removeItem(\"home_page\");\n//     localStorage.removeItem(\"full_name\");\n//   },\n//   LOGOUT(state) {\n//     state.sid = null;\n//     state.user = null;\n//     state.home_page = \"/desk\";\n//     state.full_name = null;\n//     localStorage.removeItem(\"sid\");\n//     localStorage.removeItem(\"user\");\n//     localStorage.removeItem(\"home_page\");\n//     localStorage.removeItem(\"full_name\");\n//   },\n//   SET_USER_ROLES(state, roles) {\n//     if (state.user) {\n//       state.user.roles = roles;\n//       localStorage.setItem(\"user\", JSON.stringify(state.user));\n//     }\n//   },\n// };\n\n// const actions = {\n//   async login({ commit }, credentials) {\n//     commit(\"AUTH_REQUEST\");\n\n//     try {\n//       const response = await axiosAuth.post(\"/api/method/my_app.custom_login\", {\n//         usr: credentials.email,\n//         pwd: credentials.password,\n//       });\n\n//       const { message } = response.data;\n//       const { sid, user, full_name, home_page } = message;\n\n//       // Set critical cookies for Frappe desk\n//       document.cookie = `sid=${sid}; path=/; ${\n//         process.env.NODE_ENV === \"production\"\n//           ? \"domain=.yourdomain.com; Secure; SameSite=Lax\"\n//           : \"\"\n//       }`;\n//       document.cookie = `user_id=${user}; path=/; ${\n//         process.env.NODE_ENV === \"production\"\n//           ? \"domain=.yourdomain.com; Secure; SameSite=Lax\"\n//           : \"\"\n//       }`;\n//       document.cookie = `full_name=${encodeURIComponent(full_name)}; path=/; ${\n//         process.env.NODE_ENV === \"production\"\n//           ? \"domain=.yourdomain.com; Secure; SameSite=Lax\"\n//           : \"\"\n//       }`;\n\n//       // Configure axios for future requests\n//       axiosAuth.defaults.headers.common[\"X-Frappe-Sid\"] = sid;\n\n//       commit(\"AUTH_SUCCESS\", { sid, user, home_page, full_name });\n\n//       // Fetch user roles if needed\n//       await this.dispatch(\"fetchUserRoles\");\n\n//       return response.data;\n//     } catch (error) {\n//       commit(\"AUTH_ERROR\");\n//       delete axiosAuth.defaults.headers.common[\"X-Frappe-Sid\"];\n//       throw error;\n//     }\n//   },\n\n//   async fetchUserRoles({ commit }) {\n//     try {\n//       const response = await axiosAuth.get(\n//         \"/api/method/frappe.auth.get_logged_user\"\n//       );\n//       const roles = response.data.message.roles.map((r) => r.role);\n//       commit(\"SET_USER_ROLES\", roles);\n//     } catch (error) {\n//       console.error(\"Failed to fetch user roles:\", error);\n//     }\n//   },\n\n//   async logout({ commit }) {\n//     try {\n//       await axiosAuth.post(\"/api/method/frappe.auth.logout\");\n//     } finally {\n//       commit(\"LOGOUT\");\n//       delete axiosAuth.defaults.headers.common[\"X-Frappe-Sid\"];\n\n//       // Clear Frappe cookies\n//       document.cookie = \"sid=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT\";\n//       document.cookie =\n//         \"user_id=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT\";\n//       document.cookie =\n//         \"full_name=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT\";\n//     }\n//   },\n\n//   checkAuth({ commit }) {\n//     const sid = localStorage.getItem(\"sid\");\n//     if (sid) {\n//       const user = JSON.parse(localStorage.getItem(\"user\"));\n//       const full_name = localStorage.getItem(\"full_name\");\n//       const home_page = localStorage.getItem(\"home_page\") || \"/desk\";\n\n//       axiosAuth.defaults.headers.common[\"X-Frappe-Sid\"] = sid;\n\n//       commit(\"AUTH_SUCCESS\", {\n//         sid,\n//         user: user?.email || \"\",\n//         home_page,\n//         full_name,\n//       });\n\n//       // Verify session is still valid\n//       this.dispatch(\"verifySession\");\n//     }\n//   },\n\n//   async verifySession({ commit, state }) {\n//     if (!state.sid) return;\n\n//     try {\n//       await axiosAuth.get(\"/api/method/frappe.auth.get_logged_user\");\n//     } catch (error) {\n//       commit(\"LOGOUT\");\n//     }\n//   },\n// };\n\n// export default {\n//   namespaced: true,\n//   state,\n//   getters,\n//   mutations,\n//   actions,\n// };","map":{"version":3,"names":["axiosAuth","state","token","localStorage","getItem","user","JSON","parse","status","sid","home_page","getters","isAuthenticated","authStatus","currentUser","homePage","hasRole","role","mutations","AUTH_REQUEST","AUTH_SUCCESS","email","full_name","setItem","stringify","LOGOUT","removeItem","AUTH_ERROR","SET_FULL_NAME","actions","login","commit","credentials","response","post","usr","pwd","password","message","data","defaults","headers","common","error","logout","checkAuth","refreshSession","get","namespaced"],"sources":["D:/hadeerwork/erpnext-vue-front/src/store/modules/auth/auth.js"],"sourcesContent":["import { axiosAuth } from \"@/plugins/axios/axiosAuth\";\r\n\r\nconst state = {\r\n  token: localStorage.getItem(\"token\") || null,\r\n  user: JSON.parse(localStorage.getItem(\"user\")) || null,\r\n  status: \"\", // Can be 'loading', 'success', 'error'\r\n  sid: localStorage.getItem(\"sid\") || null, // Store session ID\r\n  home_page: localStorage.getItem(\"home_page\") || \"/app/home\",\r\n};\r\n\r\nconst getters = {\r\n  isAuthenticated: (state) => !!state.sid, // Now checking sid instead of token\r\n  authStatus: (state) => state.status,\r\n  currentUser: (state) => state.user,\r\n  homePage: (state) => state.home_page,\r\n  hasRole: (state) => (role) => state.user && state.user.role === role,\r\n};\r\n\r\nconst mutations = {\r\n  AUTH_REQUEST(state) {\r\n    state.status = \"loading\";\r\n  },\r\n  AUTH_SUCCESS(state, { sid, user, home_page }) {\r\n    state.status = \"success\";\r\n    state.sid = sid;\r\n    state.user = {\r\n      email: user,\r\n      full_name: state.full_name,\r\n    };\r\n    state.home_page = home_page;\r\n\r\n    // Persist in localStorage\r\n    localStorage.setItem(\"sid\", sid);\r\n    localStorage.setItem(\"user\", JSON.stringify(state.user));\r\n    localStorage.setItem(\"home_page\", home_page);\r\n  },\r\n  LOGOUT(state) {\r\n    state.sid = null;\r\n    state.user = null;\r\n    state.home_page = \"/app/home\";\r\n    localStorage.removeItem(\"sid\");\r\n    localStorage.removeItem(\"user\");\r\n    localStorage.removeItem(\"home_page\");\r\n  },\r\n  AUTH_ERROR(state) {\r\n    state.status = \"error\";\r\n    state.sid = null;\r\n    state.user = null;\r\n  },\r\n  SET_FULL_NAME(state, full_name) {\r\n    state.full_name = full_name;\r\n    if (state.user) {\r\n      state.user.full_name = full_name;\r\n      localStorage.setItem(\"user\", JSON.stringify(state.user));\r\n    }\r\n  },\r\n};\r\n\r\nconst actions = {\r\n  async login({ commit }, credentials) {\r\n    commit(\"AUTH_REQUEST\");\r\n\r\n    try {\r\n      const response = await axiosAuth.post(\"/api/method/my_app.custom_login\", {\r\n        usr: credentials.email,\r\n        pwd: credentials.password,\r\n      });\r\n\r\n      // Extract data from response\r\n      const { message } = response.data;\r\n      const { sid, user, full_name, home_page } = message;\r\n\r\n      // Store session data\r\n      commit(\"AUTH_SUCCESS\", { sid, user, home_page });\r\n      commit(\"SET_FULL_NAME\", full_name);\r\n\r\n      // Set CSRF token for subsequent requests\r\n      axiosAuth.defaults.headers.common[\"X-Frappe-Sid\"] = sid;\r\n\r\n      return response.data;\r\n    } catch (error) {\r\n      commit(\"AUTH_ERROR\");\r\n      localStorage.removeItem(\"sid\");\r\n      localStorage.removeItem(\"user\");\r\n      delete axiosAuth.defaults.headers.common[\"X-Frappe-Sid\"];\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async logout({ commit }) {\r\n    try {\r\n      await axiosAuth.post(\"/api/method/frappe.auth.logout\");\r\n    } finally {\r\n      commit(\"LOGOUT\");\r\n      localStorage.removeItem(\"sid\");\r\n      localStorage.removeItem(\"user\");\r\n      delete axiosAuth.defaults.headers.common[\"X-Frappe-Sid\"];\r\n    }\r\n  },\r\n\r\n  checkAuth({ commit }) {\r\n    const sid = localStorage.getItem(\"sid\");\r\n    if (sid) {\r\n      const user = JSON.parse(localStorage.getItem(\"user\"));\r\n      axiosAuth.defaults.headers.common[\"X-Frappe-Sid\"] = sid;\r\n      commit(\"AUTH_SUCCESS\", {\r\n        sid,\r\n        user: user.email,\r\n        home_page: localStorage.getItem(\"home_page\"),\r\n      });\r\n      commit(\"SET_FULL_NAME\", user.full_name);\r\n    }\r\n  },\r\n\r\n  // Optional: Refresh session\r\n  async refreshSession({ state, commit }) {\r\n    if (!state.sid) return;\r\n\r\n    try {\r\n      const response = await axiosAuth.get(\r\n        \"/api/method/frappe.auth.get_logged_user\"\r\n      );\r\n      commit(\"SET_FULL_NAME\", response.data.message.full_name);\r\n    } catch (error) {\r\n      commit(\"LOGOUT\");\r\n    }\r\n  },\r\n};\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state,\r\n  getters,\r\n  mutations,\r\n  actions,\r\n};\r\n\r\n// import { axiosAuth } from \"@/plugins/axios/axiosAuth\";\r\n\r\n// const state = {\r\n//   token: localStorage.getItem(\"token\") || null,\r\n//   user: JSON.parse(localStorage.getItem(\"user\")) || null,\r\n//   status: \"\", // 'loading', 'success', 'error'\r\n//   sid: localStorage.getItem(\"sid\") || null,\r\n//   home_page: localStorage.getItem(\"home_page\") || \"/desk\",\r\n//   full_name: localStorage.getItem(\"full_name\") || null,\r\n// };\r\n\r\n// const getters = {\r\n//   isAuthenticated: (state) => !!state.sid,\r\n//   authStatus: (state) => state.status,\r\n//   currentUser: (state) => state.user,\r\n//   homePage: (state) => state.home_page,\r\n//   fullName: (state) => state.full_name,\r\n//   hasRole: (state) => (role) =>\r\n//     state.user && state.user.roles && state.user.roles.includes(role),\r\n// };\r\n\r\n// const mutations = {\r\n//   AUTH_REQUEST(state) {\r\n//     state.status = \"loading\";\r\n//   },\r\n//   AUTH_SUCCESS(state, { sid, user, home_page, full_name }) {\r\n//     state.status = \"success\";\r\n//     state.sid = sid;\r\n//     state.user = {\r\n//       email: user,\r\n//       full_name: full_name,\r\n//       roles: state.user?.roles || [],\r\n//     };\r\n//     state.home_page = home_page;\r\n//     state.full_name = full_name;\r\n\r\n//     // Persist in localStorage\r\n//     localStorage.setItem(\"sid\", sid);\r\n//     localStorage.setItem(\"user\", JSON.stringify(state.user));\r\n//     localStorage.setItem(\"home_page\", home_page);\r\n//     localStorage.setItem(\"full_name\", full_name);\r\n//   },\r\n//   AUTH_ERROR(state) {\r\n//     state.status = \"error\";\r\n//     state.sid = null;\r\n//     state.user = null;\r\n//     state.full_name = null;\r\n//     localStorage.removeItem(\"sid\");\r\n//     localStorage.removeItem(\"user\");\r\n//     localStorage.removeItem(\"home_page\");\r\n//     localStorage.removeItem(\"full_name\");\r\n//   },\r\n//   LOGOUT(state) {\r\n//     state.sid = null;\r\n//     state.user = null;\r\n//     state.home_page = \"/desk\";\r\n//     state.full_name = null;\r\n//     localStorage.removeItem(\"sid\");\r\n//     localStorage.removeItem(\"user\");\r\n//     localStorage.removeItem(\"home_page\");\r\n//     localStorage.removeItem(\"full_name\");\r\n//   },\r\n//   SET_USER_ROLES(state, roles) {\r\n//     if (state.user) {\r\n//       state.user.roles = roles;\r\n//       localStorage.setItem(\"user\", JSON.stringify(state.user));\r\n//     }\r\n//   },\r\n// };\r\n\r\n// const actions = {\r\n//   async login({ commit }, credentials) {\r\n//     commit(\"AUTH_REQUEST\");\r\n\r\n//     try {\r\n//       const response = await axiosAuth.post(\"/api/method/my_app.custom_login\", {\r\n//         usr: credentials.email,\r\n//         pwd: credentials.password,\r\n//       });\r\n\r\n//       const { message } = response.data;\r\n//       const { sid, user, full_name, home_page } = message;\r\n\r\n//       // Set critical cookies for Frappe desk\r\n//       document.cookie = `sid=${sid}; path=/; ${\r\n//         process.env.NODE_ENV === \"production\"\r\n//           ? \"domain=.yourdomain.com; Secure; SameSite=Lax\"\r\n//           : \"\"\r\n//       }`;\r\n//       document.cookie = `user_id=${user}; path=/; ${\r\n//         process.env.NODE_ENV === \"production\"\r\n//           ? \"domain=.yourdomain.com; Secure; SameSite=Lax\"\r\n//           : \"\"\r\n//       }`;\r\n//       document.cookie = `full_name=${encodeURIComponent(full_name)}; path=/; ${\r\n//         process.env.NODE_ENV === \"production\"\r\n//           ? \"domain=.yourdomain.com; Secure; SameSite=Lax\"\r\n//           : \"\"\r\n//       }`;\r\n\r\n//       // Configure axios for future requests\r\n//       axiosAuth.defaults.headers.common[\"X-Frappe-Sid\"] = sid;\r\n\r\n//       commit(\"AUTH_SUCCESS\", { sid, user, home_page, full_name });\r\n\r\n//       // Fetch user roles if needed\r\n//       await this.dispatch(\"fetchUserRoles\");\r\n\r\n//       return response.data;\r\n//     } catch (error) {\r\n//       commit(\"AUTH_ERROR\");\r\n//       delete axiosAuth.defaults.headers.common[\"X-Frappe-Sid\"];\r\n//       throw error;\r\n//     }\r\n//   },\r\n\r\n//   async fetchUserRoles({ commit }) {\r\n//     try {\r\n//       const response = await axiosAuth.get(\r\n//         \"/api/method/frappe.auth.get_logged_user\"\r\n//       );\r\n//       const roles = response.data.message.roles.map((r) => r.role);\r\n//       commit(\"SET_USER_ROLES\", roles);\r\n//     } catch (error) {\r\n//       console.error(\"Failed to fetch user roles:\", error);\r\n//     }\r\n//   },\r\n\r\n//   async logout({ commit }) {\r\n//     try {\r\n//       await axiosAuth.post(\"/api/method/frappe.auth.logout\");\r\n//     } finally {\r\n//       commit(\"LOGOUT\");\r\n//       delete axiosAuth.defaults.headers.common[\"X-Frappe-Sid\"];\r\n\r\n//       // Clear Frappe cookies\r\n//       document.cookie = \"sid=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT\";\r\n//       document.cookie =\r\n//         \"user_id=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT\";\r\n//       document.cookie =\r\n//         \"full_name=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT\";\r\n//     }\r\n//   },\r\n\r\n//   checkAuth({ commit }) {\r\n//     const sid = localStorage.getItem(\"sid\");\r\n//     if (sid) {\r\n//       const user = JSON.parse(localStorage.getItem(\"user\"));\r\n//       const full_name = localStorage.getItem(\"full_name\");\r\n//       const home_page = localStorage.getItem(\"home_page\") || \"/desk\";\r\n\r\n//       axiosAuth.defaults.headers.common[\"X-Frappe-Sid\"] = sid;\r\n\r\n//       commit(\"AUTH_SUCCESS\", {\r\n//         sid,\r\n//         user: user?.email || \"\",\r\n//         home_page,\r\n//         full_name,\r\n//       });\r\n\r\n//       // Verify session is still valid\r\n//       this.dispatch(\"verifySession\");\r\n//     }\r\n//   },\r\n\r\n//   async verifySession({ commit, state }) {\r\n//     if (!state.sid) return;\r\n\r\n//     try {\r\n//       await axiosAuth.get(\"/api/method/frappe.auth.get_logged_user\");\r\n//     } catch (error) {\r\n//       commit(\"LOGOUT\");\r\n//     }\r\n//   },\r\n// };\r\n\r\n// export default {\r\n//   namespaced: true,\r\n//   state,\r\n//   getters,\r\n//   mutations,\r\n//   actions,\r\n// };\r\n"],"mappings":"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CAAC9B,KAAK,CAACQ,GAAG,EAAE;IAEhB,IAAI;MACF,MAAMwB,QAAQ,GAAG,MAAMjC,SAAS,CAAC+C,GAAG,CAClC,yCACF,CAAC;MACDhB,MAAM,CAAC,eAAe,EAAEE,QAAQ,CAACM,IAAI,CAACD,OAAO,CAAChB,SAAS,CAAC;IAC1D,CAAC,CAAC,OAAOqB,KAAK,EAAE;MACdZ,MAAM,CAAC,QAAQ,CAAC;IAClB;EACF;AACF,CAAC;AAED,eAAe;EACbiB,UAAU,EAAE,IAAI;EAChB/C,KAAK;EACLU,OAAO;EACPO,SAAS;EACTW;AACF,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}