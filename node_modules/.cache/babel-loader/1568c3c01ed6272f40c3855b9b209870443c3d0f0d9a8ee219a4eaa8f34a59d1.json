{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// Importing the API instance created in a separate file\nimport api from \"@/plugins/axios/axiosBusiness\";\nexport default {\n  name: \"SalesInvoiceList\",\n  data() {\n    return {\n      invoices: [],\n      customers: [],\n      filters: {\n        status: \"\",\n        from_date: \"\",\n        to_date: \"\",\n        customer: \"\"\n      },\n      sort: {\n        field: \"posting_date\",\n        order: \"desc\"\n      },\n      pagination: {\n        page: 1,\n        page_size: 20,\n        total: 0\n      }\n    };\n  },\n  computed: {\n    currentPage() {\n      return this.pagination.page;\n    },\n    totalPages() {\n      return Math.ceil(this.pagination.total / this.pagination.page_size);\n    }\n  },\n  created() {\n    this.fetchInvoices();\n    this.fetchCustomers();\n  },\n  methods: {\n    // Fetch invoices using /api/resource/Sales Invoice\n    async fetchInvoices() {\n      // Construct the query parameters\n      const params = {\n        fields: JSON.stringify([\"name\", \"customer\", \"customer_name\", \"posting_date\", \"due_date\", \"grand_total\", \"status\", \"outstanding_amount\"]),\n        limit_start: (this.currentPage - 1) * this.pagination.page_size,\n        limit_page_length: this.pagination.page_size,\n        order_by: `${this.sort.field} ${this.sort.order}`\n      };\n\n      // Add filters if provided\n      if (this.filters.status) {\n        params.filters = JSON.stringify([[\"status\", \"=\", this.filters.status]]);\n      }\n      if (this.filters.from_date) {\n        params.filters = params.filters || [];\n        params.filters.push([\"posting_date\", \">=\", this.filters.from_date]);\n      }\n      if (this.filters.to_date) {\n        params.filters = params.filters || [];\n        params.filters.push([\"posting_date\", \"<=\", this.filters.to_date]);\n      }\n      if (this.filters.customer) {\n        params.filters = params.filters || [];\n        params.filters.push([\"customer\", \"=\", this.filters.customer]);\n      }\n      try {\n        const response = await api.get(\"/resource/Sales Invoice\", {\n          params\n        });\n        console.log(\"Invoices response:\", response);\n\n        // Update invoices data and pagination\n        this.invoices = response.data.data;\n        this.pagination.total = response.data.data.length;\n      } catch (error) {\n        console.error(\"Error fetching invoices:\", error);\n        this.$toast.error(\"Failed to load invoices\");\n      }\n    },\n    // Fetch customers using /api/resource/Customer\n    async fetchCustomers() {\n      try {\n        const response = await api.get(\"/resource/Customer\", {\n          params: {\n            fields: JSON.stringify([\"name\", \"customer_name\"]),\n            limit: 100\n          }\n        });\n        this.customers = response.data.data;\n      } catch (error) {\n        console.error(\"Error fetching customers:\", error);\n      }\n    },\n    // Sort invoices by a given field\n    sortInvoices(field) {\n      if (this.sort.field === field) {\n        this.sort.order = this.sort.order === \"asc\" ? \"desc\" : \"asc\";\n      } else {\n        this.sort.field = field;\n        this.sort.order = \"desc\";\n      }\n      this.fetchInvoices();\n    },\n    // Change pagination page\n    changePage(page) {\n      if (page > 0 && page <= this.totalPages) {\n        this.pagination.page = page;\n        this.fetchInvoices();\n      }\n    },\n    // View invoice details\n    viewInvoice(invoiceName) {\n      this.$router.push(`/sales-invoices/${invoiceName}`);\n    },\n    // Edit invoice\n    editInvoice(invoiceName) {\n      this.$router.push(`/sales-invoices/${invoiceName}/edit`);\n    },\n    // Print invoice\n    async printInvoice(invoiceName) {\n      try {\n        const printUrl = `/api/method/frappe.utils.print_format.download_pdf?doctype=Sales%20Invoice&name=${invoiceName}&format=Standard&no_letterhead=0`;\n        window.open(printUrl, \"_blank\");\n      } catch (error) {\n        console.error(\"Error printing invoice:\", error);\n        this.$toast.error(\"Failed to print invoice\");\n      }\n    },\n    // Format date string\n    formatDate(dateString) {\n      if (!dateString) return \"\";\n      return new Date(dateString).toLocaleDateString();\n    },\n    // Format currency\n    formatCurrency(amount) {\n      return new Intl.NumberFormat(\"en-US\", {\n        style: \"currency\",\n        currency: \"USD\"\n      }).format(amount);\n    },\n    // Check if the invoice is overdue\n    isOverdue(invoice) {\n      if (invoice.status !== \"Unpaid\") return false;\n      if (!invoice.due_date) return false;\n      return new Date(invoice.due_date) < new Date();\n    }\n  }\n};","map":{"version":3,"names":["api","name","data","invoices","customers","filters","status","from_date","to_date","customer","sort","field","order","pagination","page","page_size","total","computed","currentPage","totalPages","Math","ceil","created","fetchInvoices","fetchCustomers","methods","params","fields","JSON","stringify","limit_start","limit_page_length","order_by","push","response","get","console","log","length","error","$toast","limit","sortInvoices","changePage","viewInvoice","invoiceName","$router","editInvoice","printInvoice","printUrl","window","open","formatDate","dateString","Date","toLocaleDateString","formatCurrency","amount","Intl","NumberFormat","style","currency","format","isOverdue","invoice","due_date"],"sources":["C:\\Users\\CITCPC3\\Desktop\\hadeer\\erpnext-vue-front\\src\\views\\SalesInvoiceListView.vue"],"sourcesContent":["<template>\r\n  <div class=\"invoice-list-container\">\r\n    <div class=\"invoice-list-header\">\r\n      <h2>Sales Invoices</h2>\r\n      <router-link to=\"/sales-invoices/new\" class=\"btn-create\">\r\n        <span class=\"material-symbols-outlined\">add</span>\r\n        Create New Invoice\r\n      </router-link>\r\n    </div>\r\n\r\n    <div class=\"invoice-list-filters\">\r\n      <div class=\"filter-group\">\r\n        <label>Status</label>\r\n        <select v-model=\"filters.status\" @change=\"fetchInvoices\">\r\n          <option value=\"\">All Statuses</option>\r\n          <option value=\"Draft\">Draft</option>\r\n          <option value=\"Paid\">Paid</option>\r\n          <option value=\"Unpaid\">Unpaid</option>\r\n          <option value=\"Overdue\">Overdue</option>\r\n          <option value=\"Cancelled\">Cancelled</option>\r\n        </select>\r\n      </div>\r\n\r\n      <div class=\"filter-group\">\r\n        <label>From Date</label>\r\n        <input\r\n          type=\"date\"\r\n          v-model=\"filters.from_date\"\r\n          @change=\"fetchInvoices\"\r\n        />\r\n      </div>\r\n\r\n      <div class=\"filter-group\">\r\n        <label>To Date</label>\r\n        <input type=\"date\" v-model=\"filters.to_date\" @change=\"fetchInvoices\" />\r\n      </div>\r\n\r\n      <div class=\"filter-group\">\r\n        <label>Customer</label>\r\n        <select v-model=\"filters.customer\" @change=\"fetchInvoices\">\r\n          <option value=\"\">All Customers</option>\r\n          <option\r\n            v-for=\"customer in customers\"\r\n            :value=\"customer.name\"\r\n            :key=\"customer.name\"\r\n          >\r\n            {{ customer.customer_name }}\r\n          </option>\r\n        </select>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"invoice-list-table\">\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th @click=\"sortInvoices('name')\">Invoice #</th>\r\n            <!-- <th @click=\"sortInvoices('customer')\">Customer</th>\r\n            <th @click=\"sortInvoices('posting_date')\">Date</th>\r\n            <th @click=\"sortInvoices('due_date')\">Due Date</th>\r\n            <th @click=\"sortInvoices('grand_total')\">Amount</th>\r\n            <th @click=\"sortInvoices('status')\">Status</th> -->\r\n            <th>Actions</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr v-for=\"invoice in invoices\" :key=\"invoice.name\">\r\n            <td>{{ invoice.name }}</td>\r\n            <!-- <td>{{ invoice.customer_name }}</td>\r\n            <td>{{ formatDate(invoice.posting_date) }}</td>\r\n            <td :class=\"{ 'overdue': isOverdue(invoice) }\">\r\n              {{ formatDate(invoice.due_date) }}\r\n              <span v-if=\"isOverdue(invoice)\" class=\"overdue-badge\">Overdue</span>\r\n            </td>\r\n            <td>{{ formatCurrency(invoice.grand_total) }}</td>\r\n            <td>\r\n              <span :class=\"'status-badge status-' + invoice.status.toLowerCase()\">\r\n                {{ invoice.status }}\r\n              </span>\r\n            </td> -->\r\n            <td class=\"actions\">\r\n              <button @click=\"viewInvoice(invoice.name)\" class=\"btn-view\">\r\n                <span class=\"material-symbols-outlined\">visibility</span>\r\n              </button>\r\n              <button @click=\"printInvoice(invoice.name)\" class=\"btn-print\">\r\n                <span class=\"material-symbols-outlined\">print</span>\r\n              </button>\r\n              <button\r\n                v-if=\"invoice.status === 'Draft'\"\r\n                @click=\"editInvoice(invoice.name)\"\r\n                class=\"btn-edit\"\r\n              >\r\n                <span class=\"material-symbols-outlined\">edit</span>\r\n              </button>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n\r\n      <!-- <div v-if=\"loading\" class=\"loading-overlay\">\r\n        <div class=\"loading-spinner\"></div>\r\n      </div> -->\r\n\r\n      <!-- <div v-if=\"!loading && invoices.length === 0\" class=\"no-results\">\r\n        No invoices found matching your criteria.\r\n      </div> -->\r\n\r\n      <div class=\"pagination\" v-if=\"totalPages > 1\">\r\n        <button\r\n          @click=\"changePage(currentPage - 1)\"\r\n          :disabled=\"currentPage === 1\"\r\n        >\r\n          Previous\r\n        </button>\r\n        <span>Page {{ currentPage }} of {{ totalPages }}</span>\r\n        <button\r\n          @click=\"changePage(currentPage + 1)\"\r\n          :disabled=\"currentPage === totalPages\"\r\n        >\r\n          Next\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n<!-- \r\n<script>\r\n// import axios from \"axios\";\r\nimport api from \"@/plugins/axios/axiosBusiness\";\r\n\r\nexport default {\r\n  name: \"SalesInvoiceList\",\r\n  data() {\r\n    return {\r\n      invoices: [],\r\n      customers: [],\r\n      // loading: false,\r\n      filters: {\r\n        status: \"\",\r\n        from_date: \"\",\r\n        to_date: \"\",\r\n        customer: \"\",\r\n      },\r\n      sort: {\r\n        field: \"posting_date\",\r\n        order: \"desc\",\r\n      },\r\n      pagination: {\r\n        page: 1,\r\n        page_size: 20,\r\n        total: 0,\r\n      },\r\n    };\r\n  },\r\n  computed: {\r\n    currentPage() {\r\n      return this.pagination.page;\r\n    },\r\n    totalPages() {\r\n      return Math.ceil(this.pagination.total / this.pagination.page_size);\r\n    },\r\n  },\r\n  created() {\r\n    this.fetchInvoices();\r\n    this.fetchCustomers();\r\n  },\r\n  methods: {\r\n    async fetchInvoices() {\r\n      // this.loading = true;\r\n      try {\r\n        const params = {\r\n          doctype: \"Sales Invoice\",\r\n          fields: [\r\n            \"name\",\r\n            \"customer\",\r\n            \"customer_name\",\r\n            \"posting_date\",\r\n            \"due_date\",\r\n            \"grand_total\",\r\n            \"status\",\r\n            \"outstanding_amount\",\r\n          ],\r\n          limit_start: (this.currentPage - 1) * this.pagination.page_size,\r\n          limit_page_length: this.pagination.page_size,\r\n          order_by: `${this.sort.field} ${this.sort.order}`,\r\n        };\r\n\r\n        // Add filters\r\n        if (this.filters.status) {\r\n          params.filters = [[\"status\", \"=\", this.filters.status]];\r\n        }\r\n        if (this.filters.from_date) {\r\n          params.filters = params.filters || [];\r\n          params.filters.push([\"posting_date\", \">=\", this.filters.from_date]);\r\n        }\r\n        if (this.filters.to_date) {\r\n          params.filters = params.filters || [];\r\n          params.filters.push([\"posting_date\", \"<=\", this.filters.to_date]);\r\n        }\r\n        if (this.filters.customer) {\r\n          params.filters = params.filters || [];\r\n          params.filters.push([\"customer\", \"=\", this.filters.customer]);\r\n        }\r\n        // http://138.199.220.5:8001\r\n        // const api = axios.create({\r\n        //   // baseURL: ' http://138.199.220.5:8001'  // or your full base URL like 'https://yourdomain.com/api'\r\n        //   baseURL: \"http://172.29.82.206:8000\",\r\n        // });\r\n        const response = await api.get(\"/api/method/frappe.client.get_list\", {\r\n          params,\r\n        });\r\n        console.log(\"Invoices response:\", response);\r\n\r\n        this.invoices = response.data.message;\r\n        this.pagination.total =\r\n          response.data.total || response.data.message.length;\r\n      } catch (error) {\r\n        console.error(\"Error fetching invoices:\", error);\r\n        this.$toast.error(\"Failed to load invoices\");\r\n      } finally {\r\n        // this.loading = false;\r\n      }\r\n    },\r\n    async fetchCustomers() {\r\n      try {\r\n        const response = await api.get(\"/api/method/frappe.client.get_list\", {\r\n          params: {\r\n            doctype: \"Customer\",\r\n            fields: [\"name\", \"customer_name\"],\r\n            limit: 100,\r\n          },\r\n        });\r\n        this.customers = response.data.message;\r\n      } catch (error) {\r\n        console.error(\"Error fetching customers:\", error);\r\n      }\r\n    },\r\n    sortInvoices(field) {\r\n      if (this.sort.field === field) {\r\n        this.sort.order = this.sort.order === \"asc\" ? \"desc\" : \"asc\";\r\n      } else {\r\n        this.sort.field = field;\r\n        this.sort.order = \"desc\";\r\n      }\r\n      this.fetchInvoices();\r\n    },\r\n    changePage(page) {\r\n      if (page > 0 && page <= this.totalPages) {\r\n        this.pagination.page = page;\r\n        this.fetchInvoices();\r\n      }\r\n    },\r\n    viewInvoice(invoiceName) {\r\n      this.$router.push(`/sales-invoices/${invoiceName}`);\r\n    },\r\n    editInvoice(invoiceName) {\r\n      this.$router.push(`/sales-invoices/${invoiceName}/edit`);\r\n    },\r\n    async printInvoice(invoiceName) {\r\n      try {\r\n        const printUrl = `/api/method/frappe.utils.print_format.download_pdf?doctype=Sales%20Invoice&name=${invoiceName}&format=Standard&no_letterhead=0`;\r\n        window.open(printUrl, \"_blank\");\r\n      } catch (error) {\r\n        console.error(\"Error printing invoice:\", error);\r\n        this.$toast.error(\"Failed to print invoice\");\r\n      }\r\n    },\r\n    formatDate(dateString) {\r\n      if (!dateString) return \"\";\r\n      return new Date(dateString).toLocaleDateString();\r\n    },\r\n    formatCurrency(amount) {\r\n      return new Intl.NumberFormat(\"en-US\", {\r\n        style: \"currency\",\r\n        currency: \"USD\",\r\n      }).format(amount);\r\n    },\r\n    isOverdue(invoice) {\r\n      if (invoice.status !== \"Unpaid\") return false;\r\n      if (!invoice.due_date) return false;\r\n      return new Date(invoice.due_date) < new Date();\r\n    },\r\n  },\r\n};\r\n</script> -->\r\n\r\n<script>\r\n// Importing the API instance created in a separate file\r\nimport api from \"@/plugins/axios/axiosBusiness\";\r\n\r\nexport default {\r\n  name: \"SalesInvoiceList\",\r\n  data() {\r\n    return {\r\n      invoices: [],\r\n      customers: [],\r\n      filters: {\r\n        status: \"\",\r\n        from_date: \"\",\r\n        to_date: \"\",\r\n        customer: \"\",\r\n      },\r\n      sort: {\r\n        field: \"posting_date\",\r\n        order: \"desc\",\r\n      },\r\n      pagination: {\r\n        page: 1,\r\n        page_size: 20,\r\n        total: 0,\r\n      },\r\n    };\r\n  },\r\n  computed: {\r\n    currentPage() {\r\n      return this.pagination.page;\r\n    },\r\n    totalPages() {\r\n      return Math.ceil(this.pagination.total / this.pagination.page_size);\r\n    },\r\n  },\r\n  created() {\r\n    this.fetchInvoices();\r\n    this.fetchCustomers();\r\n  },\r\n  methods: {\r\n    // Fetch invoices using /api/resource/Sales Invoice\r\n    async fetchInvoices() {\r\n      // Construct the query parameters\r\n      const params = {\r\n        fields: JSON.stringify([\r\n          \"name\",\r\n          \"customer\",\r\n          \"customer_name\",\r\n          \"posting_date\",\r\n          \"due_date\",\r\n          \"grand_total\",\r\n          \"status\",\r\n          \"outstanding_amount\",\r\n        ]),\r\n        limit_start: (this.currentPage - 1) * this.pagination.page_size,\r\n        limit_page_length: this.pagination.page_size,\r\n        order_by: `${this.sort.field} ${this.sort.order}`,\r\n      };\r\n\r\n      // Add filters if provided\r\n      if (this.filters.status) {\r\n        params.filters = JSON.stringify([[\"status\", \"=\", this.filters.status]]);\r\n      }\r\n      if (this.filters.from_date) {\r\n        params.filters = params.filters || [];\r\n        params.filters.push([\"posting_date\", \">=\", this.filters.from_date]);\r\n      }\r\n      if (this.filters.to_date) {\r\n        params.filters = params.filters || [];\r\n        params.filters.push([\"posting_date\", \"<=\", this.filters.to_date]);\r\n      }\r\n      if (this.filters.customer) {\r\n        params.filters = params.filters || [];\r\n        params.filters.push([\"customer\", \"=\", this.filters.customer]);\r\n      }\r\n\r\n      try {\r\n        const response = await api.get(\"/resource/Sales Invoice\", { params });\r\n        console.log(\"Invoices response:\", response);\r\n\r\n        // Update invoices data and pagination\r\n        this.invoices = response.data.data;\r\n        this.pagination.total = response.data.data.length;\r\n      } catch (error) {\r\n        console.error(\"Error fetching invoices:\", error);\r\n        this.$toast.error(\"Failed to load invoices\");\r\n      }\r\n    },\r\n\r\n    // Fetch customers using /api/resource/Customer\r\n    async fetchCustomers() {\r\n      try {\r\n        const response = await api.get(\"/resource/Customer\", {\r\n          params: {\r\n            fields: JSON.stringify([\"name\", \"customer_name\"]),\r\n            limit: 100,\r\n          },\r\n        });\r\n        this.customers = response.data.data;\r\n      } catch (error) {\r\n        console.error(\"Error fetching customers:\", error);\r\n      }\r\n    },\r\n\r\n    // Sort invoices by a given field\r\n    sortInvoices(field) {\r\n      if (this.sort.field === field) {\r\n        this.sort.order = this.sort.order === \"asc\" ? \"desc\" : \"asc\";\r\n      } else {\r\n        this.sort.field = field;\r\n        this.sort.order = \"desc\";\r\n      }\r\n      this.fetchInvoices();\r\n    },\r\n\r\n    // Change pagination page\r\n    changePage(page) {\r\n      if (page > 0 && page <= this.totalPages) {\r\n        this.pagination.page = page;\r\n        this.fetchInvoices();\r\n      }\r\n    },\r\n\r\n    // View invoice details\r\n    viewInvoice(invoiceName) {\r\n      this.$router.push(`/sales-invoices/${invoiceName}`);\r\n    },\r\n\r\n    // Edit invoice\r\n    editInvoice(invoiceName) {\r\n      this.$router.push(`/sales-invoices/${invoiceName}/edit`);\r\n    },\r\n\r\n    // Print invoice\r\n    async printInvoice(invoiceName) {\r\n      try {\r\n        const printUrl = `/api/method/frappe.utils.print_format.download_pdf?doctype=Sales%20Invoice&name=${invoiceName}&format=Standard&no_letterhead=0`;\r\n        window.open(printUrl, \"_blank\");\r\n      } catch (error) {\r\n        console.error(\"Error printing invoice:\", error);\r\n        this.$toast.error(\"Failed to print invoice\");\r\n      }\r\n    },\r\n\r\n    // Format date string\r\n    formatDate(dateString) {\r\n      if (!dateString) return \"\";\r\n      return new Date(dateString).toLocaleDateString();\r\n    },\r\n\r\n    // Format currency\r\n    formatCurrency(amount) {\r\n      return new Intl.NumberFormat(\"en-US\", {\r\n        style: \"currency\",\r\n        currency: \"USD\",\r\n      }).format(amount);\r\n    },\r\n\r\n    // Check if the invoice is overdue\r\n    isOverdue(invoice) {\r\n      if (invoice.status !== \"Unpaid\") return false;\r\n      if (!invoice.due_date) return false;\r\n      return new Date(invoice.due_date) < new Date();\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.invoice-list-container {\r\n  padding: 20px;\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n}\r\n\r\n.invoice-list-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.btn-create {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  padding: 10px 15px;\r\n  background-color: #4caf50;\r\n  color: white;\r\n  text-decoration: none;\r\n  border-radius: 4px;\r\n  font-weight: 500;\r\n}\r\n\r\n.invoice-list-filters {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 15px;\r\n  margin-bottom: 20px;\r\n  padding: 15px;\r\n  background: #f5f7fa;\r\n  border-radius: 8px;\r\n}\r\n\r\n.filter-group {\r\n  display: flex;\r\n  flex-direction: column;\r\n  min-width: 180px;\r\n}\r\n\r\n.filter-group label {\r\n  margin-bottom: 5px;\r\n  font-weight: 500;\r\n  font-size: 14px;\r\n}\r\n\r\n.filter-group select,\r\n.filter-group input {\r\n  padding: 8px 12px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n}\r\n\r\n.invoice-list-table {\r\n  position: relative;\r\n  background: white;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);\r\n  overflow: hidden;\r\n}\r\n\r\ntable {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n}\r\n\r\nth,\r\ntd {\r\n  padding: 12px 15px;\r\n  text-align: left;\r\n  border-bottom: 1px solid #eee;\r\n}\r\n\r\nth {\r\n  background-color: #f8f9fa;\r\n  font-weight: 600;\r\n  cursor: pointer;\r\n  user-select: none;\r\n}\r\n\r\nth:hover {\r\n  background-color: #f1f3f5;\r\n}\r\n\r\ntr:hover {\r\n  background-color: #f8f9fa;\r\n}\r\n\r\n.status-badge {\r\n  padding: 4px 8px;\r\n  border-radius: 12px;\r\n  font-size: 12px;\r\n  font-weight: 500;\r\n}\r\n\r\n.status-draft {\r\n  background-color: #fff3cd;\r\n  color: #856404;\r\n}\r\n\r\n.status-paid {\r\n  background-color: #d4edda;\r\n  color: #155724;\r\n}\r\n\r\n.status-unpaid {\r\n  background-color: #f8d7da;\r\n  color: #721c24;\r\n}\r\n\r\n.status-overdue {\r\n  background-color: #f8d7da;\r\n  color: #721c24;\r\n}\r\n\r\n.status-cancelled {\r\n  background-color: #d6d8d9;\r\n  color: #1b1e21;\r\n}\r\n\r\n.overdue {\r\n  color: #dc3545;\r\n  font-weight: 500;\r\n}\r\n\r\n.overdue-badge {\r\n  margin-left: 5px;\r\n  padding: 2px 6px;\r\n  background-color: #dc3545;\r\n  color: white;\r\n  border-radius: 10px;\r\n  font-size: 10px;\r\n}\r\n\r\n.actions {\r\n  display: flex;\r\n  gap: 5px;\r\n}\r\n\r\n.actions button {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 30px;\r\n  height: 30px;\r\n  border: none;\r\n  border-radius: 4px;\r\n  background: transparent;\r\n  cursor: pointer;\r\n}\r\n\r\n.actions button:hover {\r\n  background: #f1f3f5;\r\n}\r\n\r\n.btn-view {\r\n  color: #17a2b8;\r\n}\r\n\r\n.btn-print {\r\n  color: #6c757d;\r\n}\r\n\r\n.btn-edit {\r\n  color: #ffc107;\r\n}\r\n\r\n.loading-overlay {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background: rgba(255, 255, 255, 0.7);\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.loading-spinner {\r\n  width: 40px;\r\n  height: 40px;\r\n  border: 4px solid #f3f3f3;\r\n  border-top: 4px solid #3498db;\r\n  border-radius: 50%;\r\n  animation: spin 1s linear infinite;\r\n}\r\n\r\n@keyframes spin {\r\n  0% {\r\n    transform: rotate(0deg);\r\n  }\r\n  100% {\r\n    transform: rotate(360deg);\r\n  }\r\n}\r\n\r\n.no-results {\r\n  padding: 20px;\r\n  text-align: center;\r\n  color: #6c757d;\r\n}\r\n\r\n.pagination {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 15px;\r\n  padding: 15px;\r\n  border-top: 1px solid #eee;\r\n}\r\n\r\n.pagination button {\r\n  padding: 8px 15px;\r\n  border: 1px solid #ddd;\r\n  background: white;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n}\r\n\r\n.pagination button:disabled {\r\n  opacity: 0.5;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.pagination button:hover:not(:disabled) {\r\n  background: #f1f3f5;\r\n}\r\n\r\n.material-symbols-outlined {\r\n  font-variation-settings: \"FILL\" 0, \"wght\" 400, \"GRAD\" 0, \"opsz\" 24;\r\n  font-size: 18px;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}