{"ast":null,"code":"// import { axiosAuth } from \"@/plugins/axios/axiosAuth\";\n\n// const state = {\n//   user: JSON.parse(localStorage.getItem(\"user\")) || null,\n//   status: \"\", // 'loading', 'success', 'error'\n//   home_page: \"/app/home\", // Default home page\n// };\n\n// const getters = {\n//   isAuthenticated: (state) => !!state.user,\n//   authStatus: (state) => state.status,\n//   currentUser: (state) => state.user,\n//   homePage: (state) => state.home_page,\n//   fullName: (state) => state.user?.full_name || null,\n// };\n\n// const mutations = {\n//   AUTH_REQUEST(state) {\n//     state.status = \"loading\";\n//   },\n//   AUTH_SUCCESS(state, { full_name, home_page }) {\n//     state.status = \"success\";\n//     state.user = {\n//       full_name: full_name,\n//     };\n//     state.home_page = home_page || \"/app/home\";\n\n//     // Persist in localStorage\n//     localStorage.setItem(\"user\", JSON.stringify(state.user));\n//     localStorage.setItem(\"home_page\", state.home_page);\n//   },\n//   AUTH_ERROR(state) {\n//     state.status = \"error\";\n//     state.user = null;\n//     localStorage.removeItem(\"user\");\n//     localStorage.removeItem(\"home_page\");\n//   },\n//   LOGOUT(state) {\n//     state.user = null;\n//     state.home_page = \"/app/home\";\n//     localStorage.removeItem(\"user\");\n//     localStorage.removeItem(\"home_page\");\n//   },\n// };\n\n// const actions = {\n//   async login({ commit }, credentials) {\n//     commit(\"AUTH_REQUEST\");\n\n//     try {\n//       const response = await axiosAuth.post(\"/api/method/login\", {\n//         usr: credentials.email,\n//         pwd: credentials.password,\n//       });\n\n//       const { full_name, home_page } = response.data;\n\n//       commit(\"AUTH_SUCCESS\", { \n//         full_name, \n//         home_page: home_page || \"/app/home\" \n//       });\n\n//       return response.data;\n//     } catch (error) {\n//       commit(\"AUTH_ERROR\");\n//       throw error;\n//     }\n//   },\n\n//   async logout({ commit }) {\n//     try {\n//       await axiosAuth.post(\"/api/method/frappe.auth.logout\");\n//     } finally {\n//       commit(\"LOGOUT\");\n//     }\n//   },\n// };\n\n// export default {\n//   namespaced: true,\n//   state,\n//   getters,\n//   mutations,\n//   actions,\n// };\n\n// src/store/modules/auth.js\n// import { axiosAuth } from \"@/plugins/axios/axiosAuth\";\n\n// const state = {\n//   user: JSON.parse(localStorage.getItem(\"user\")) || null,\n//   token: localStorage.getItem(\"token\") || null,\n//   status: \"\", // 'loading', 'success', 'error'\n//   home_page: \"/app/home\", // Default home page\n// };\n\n// const getters = {\n//   isAuthenticated: (state) => !!state.token,\n//   authStatus: (state) => state.status,\n//   currentUser: (state) => state.user,\n//   homePage: (state) => state.home_page,\n//   fullName: (state) => state.user?.full_name || null,\n//   authToken: (state) => state.token,\n// };\n\n// const mutations = {\n//   AUTH_REQUEST(state) {\n//     state.status = \"loading\";\n//   },\n//   AUTH_SUCCESS(state, { user, token, home_page }) {\n//     state.status = \"success\";\n//     state.user = user;\n//     state.token = token;\n//     state.home_page = home_page || \"/app/home\";\n\n//     // Persist in localStorage\n//     localStorage.setItem(\"user\", JSON.stringify(user));\n//     localStorage.setItem(\"token\", token);\n//     localStorage.setItem(\"home_page\", state.home_page);\n//   },\n//   AUTH_ERROR(state) {\n//     state.status = \"error\";\n//     state.user = null;\n//     state.token = null;\n//     localStorage.removeItem(\"user\");\n//     localStorage.removeItem(\"token\");\n//     localStorage.removeItem(\"home_page\");\n//   },\n//   LOGOUT(state) {\n//     state.user = null;\n//     state.token = null;\n//     state.home_page = \"/app/home\";\n//     localStorage.removeItem(\"user\");\n//     localStorage.removeItem(\"token\");\n//     localStorage.removeItem(\"home_page\");\n//   },\n// };\n\n// const actions = {\n//   async login({ commit }, credentials) {\n//     commit(\"AUTH_REQUEST\");\n\n//     try {\n//       const response = await axiosAuth.post(\"/api/method/login\", {\n//         usr: credentials.email,\n//         pwd: credentials.password,\n//       });\n\n//       // ERPNext returns the full_name in the response\n//       const user = {\n//         full_name: response.data.full_name,\n//         email: credentials.email\n//       };\n\n//       // ERPNext returns the token in the response\n//       const token = response.data.token || response.data.api_key;\n\n//       commit(\"AUTH_SUCCESS\", { \n//         user,\n//         token,\n//         home_page: response.data.home_page || \"/app/home\" \n//       });\n\n//       return response.data;\n//     } catch (error) {\n//       commit(\"AUTH_ERROR\");\n//       throw error;\n//     }\n//   },\n\n//   async logout({ commit }) {\n//     try {\n//       await axiosAuth.post(\"/api/method/logout\");\n//     } catch (error) {\n//       console.error(\"Logout error:\", error);\n//     } finally {\n//       commit(\"LOGOUT\");\n//     }\n//   },\n\n//   async verifyToken({ state }) {\n//     if (!state.token) return false;\n\n//     try {\n//       const response = await axiosAuth.get(\"/api/method/frappe.auth.get_logged_user\");\n//       return !!response.data;\n//     } catch (error) {\n//       return false;\n//     }\n//   }\n// };\n\n// export default {\n//   namespaced: true,\n//   state,\n//   getters,\n//   mutations,\n//   actions,\n// };\n\n// src/store/modules/auth.js\n// import { axiosAuth } from \"@/plugins/axios/axiosAuth\";\n\n// const state = {\n//   user: JSON.parse(localStorage.getItem(\"user\")) || null,\n//   status: \"\", // 'loading', 'success', 'error'\n//   home_page: localStorage.getItem(\"home_page\") || \"/app/home\",\n// };\n\n// const getters = {\n//   isAuthenticated: (state) => !!state.user,\n//   authStatus: (state) => state.status,\n//   currentUser: (state) => state.user,\n//   homePage: (state) => state.home_page,\n//   fullName: (state) => state.user?.full_name || null,\n// };\n\n// const mutations = {\n//   AUTH_REQUEST(state) {\n//     state.status = \"loading\";\n//   },\n//   AUTH_SUCCESS(state, { user, home_page }) {\n//     state.status = \"success\";\n//     state.user = user;\n//     state.home_page = home_page || \"/app/home\";\n//     localStorage.setItem(\"user\", JSON.stringify(user));\n//     localStorage.setItem(\"home_page\", state.home_page);\n//   },\n//   AUTH_ERROR(state) {\n//     state.status = \"error\";\n//     state.user = null;\n//     localStorage.removeItem(\"user\");\n//     localStorage.removeItem(\"home_page\");\n//   },\n//   LOGOUT(state) {\n//     state.user = null;\n//     state.home_page = \"/app/home\";\n//     localStorage.removeItem(\"user\");\n//     localStorage.removeItem(\"home_page\");\n//   },\n// };\n\n// const actions = {\n//   async login({ commit }, credentials) {\n//     commit(\"AUTH_REQUEST\");\n\n//     try {\n//       // 1. Make login request - this sets the session cookie\n//     const response =   await axiosAuth.post(\"/api/method/login\", {\n//         usr: credentials.email,\n//         pwd: credentials.password,\n//       });\n\n//       const user = {\n//         full_name:  response.full_name,\n//         email: credentials.email,\n//       };\n\n//       commit(\"AUTH_SUCCESS\", {\n//         user,\n//         home_page: \"/app/home\"\n//       });\n\n//       return user;\n//     } catch (error) {\n//       commit(\"AUTH_ERROR\");\n\n//       let errorMessage = \"Login failed\";\n//       if (error.response) {\n//         if (error.response.data && error.response.data.message) {\n//           errorMessage = typeof error.response.data.message === 'string' \n//             ? error.response.data.message\n//             : error.response.data.message.error || errorMessage;\n//         } else if (error.response.status === 401) {\n//           errorMessage = \"Invalid email or password\";\n//         }\n//       }\n\n//       throw new Error(errorMessage);\n//     }\n//   },\n\n//   async logout({ commit }) {\n//     try {\n//       await axiosAuth.post(\"/api/method/logout\");\n//     } catch (error) {\n//       console.error(\"Logout error:\", error);\n//     } finally {\n//       commit(\"LOGOUT\");\n//     }\n//   },\n\n//   async verifyAuth({ state, commit }) {\n//     try {\n//       const response = await axiosAuth.get(\"/api/method/frappe.auth.get_logged_user\");\n//       if (response.data && response.data.message) {\n//         // Update user data if needed\n//         const userData = response.data.message;\n//         const updatedUser = {\n//           ...state.user,\n//           full_name: userData.full_name || state.user?.full_name,\n//           user_image: userData.user_image || state.user?.user_image\n//         };\n\n//         commit(\"AUTH_SUCCESS\", {\n//           user: updatedUser,\n//           home_page: state.home_page\n//         });\n//         return true;\n//       }\n//       return false;\n//     } catch (error) {\n//       if (error.response && error.response.status === 401) {\n//         commit(\"LOGOUT\");\n//       }\n//       return false;\n//     }\n//   }\n// };\n\n// export default {\n//   namespaced: true,\n//   state,\n//   getters,\n//   mutations,\n//   actions,\n// };\n\n// src/store/modules/auth.js\nimport { axiosAuth } from \"@/plugins/axios/axiosAuth\";\nconst state = {\n  user: JSON.parse(localStorage.getItem(\"user\")) || null,\n  status: \"\",\n  // 'loading', 'success', 'error'\n  home_page: localStorage.getItem(\"home_page\") || \"/app/home\"\n};\nconst getters = {\n  isAuthenticated: state => !!state.user,\n  authStatus: state => state.status,\n  currentUser: state => state.user,\n  homePage: state => state.home_page,\n  fullName: state => state.user?.full_name || null\n};\nconst mutations = {\n  AUTH_REQUEST(state) {\n    state.status = \"loading\";\n  },\n  AUTH_SUCCESS(state, {\n    user,\n    home_page\n  }) {\n    state.status = \"success\";\n    state.user = user;\n    state.home_page = home_page || \"/app/home\";\n    localStorage.setItem(\"user\", JSON.stringify(user));\n    localStorage.setItem(\"home_page\", state.home_page);\n  },\n  AUTH_ERROR(state) {\n    state.status = \"error\";\n    state.user = null;\n    localStorage.removeItem(\"user\");\n    localStorage.removeItem(\"home_page\");\n  },\n  LOGOUT(state) {\n    state.user = null;\n    state.home_page = \"/app/home\";\n    localStorage.removeItem(\"user\");\n    localStorage.removeItem(\"home_page\");\n  }\n};\nconst actions = {\n  async login({\n    commit\n  }, credentials) {\n    commit(\"AUTH_REQUEST\");\n    try {\n      // 1. Make login request - this sets the session cookie\n      const response = await axiosAuth.post(\"/api/method/login\", {\n        usr: credentials.email,\n        pwd: credentials.password\n      });\n\n      // 2. Verify the session by getting user details\n      const userResponse = await axiosAuth.get(\"/api/method/frappe.auth.get_logged_user\");\n      const user = {\n        full_name: userResponse.data.message.full_name,\n        email: credentials.email,\n        user_image: userResponse.data.message.user_image\n      };\n      commit(\"AUTH_SUCCESS\", {\n        user,\n        home_page: response.data.home_page || \"/app/home\"\n      });\n      return user;\n    } catch (error) {\n      commit(\"AUTH_ERROR\");\n      let errorMessage = \"Login failed\";\n      if (error.response) {\n        errorMessage = error.response.data.message?.message || error.response.data.message || \"Invalid credentials\";\n      }\n      throw new Error(errorMessage);\n    }\n  },\n  async logout({\n    commit\n  }) {\n    try {\n      await axiosAuth.post(\"/api/method/logout\");\n    } catch (error) {\n      console.error(\"Logout error:\", error);\n    } finally {\n      commit(\"LOGOUT\");\n    }\n  },\n  async verifyAuth({\n    state,\n    commit\n  }) {\n    if (!state.user) return false;\n    try {\n      const response = await axiosAuth.get(\"/api/method/frappe.auth.get_logged_user\");\n      if (response.data.message) {\n        // Update user data from fresh response\n        const updatedUser = {\n          ...state.user,\n          full_name: response.data.message.full_name,\n          user_image: response.data.message.user_image\n        };\n        commit(\"AUTH_SUCCESS\", {\n          user: updatedUser,\n          home_page: state.home_page\n        });\n        return true;\n      }\n      return false;\n    } catch (error) {\n      if (error.response?.status === 401) {\n        commit(\"LOGOUT\");\n      }\n      return false;\n    }\n  }\n};\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  mutations,\n  actions\n};","map":{"version":3,"names":["axiosAuth","state","user","JSON","parse","localStorage","getItem","status","home_page","getters","isAuthenticated","authStatus","currentUser","homePage","fullName","full_name","mutations","AUTH_REQUEST","AUTH_SUCCESS","setItem","stringify","AUTH_ERROR","removeItem","LOGOUT","actions","login","commit","credentials","response","post","usr","email","pwd","password","userResponse","get","data","message","user_image","error","errorMessage","Error","logout","console","verifyAuth","updatedUser","namespaced"],"sources":["D:/hadeerwork/erpnext-vue-front/src/store/modules/auth/auth.js"],"sourcesContent":["\r\n// import { axiosAuth } from \"@/plugins/axios/axiosAuth\";\r\n\r\n// const state = {\r\n//   user: JSON.parse(localStorage.getItem(\"user\")) || null,\r\n//   status: \"\", // 'loading', 'success', 'error'\r\n//   home_page: \"/app/home\", // Default home page\r\n// };\r\n\r\n// const getters = {\r\n//   isAuthenticated: (state) => !!state.user,\r\n//   authStatus: (state) => state.status,\r\n//   currentUser: (state) => state.user,\r\n//   homePage: (state) => state.home_page,\r\n//   fullName: (state) => state.user?.full_name || null,\r\n// };\r\n\r\n// const mutations = {\r\n//   AUTH_REQUEST(state) {\r\n//     state.status = \"loading\";\r\n//   },\r\n//   AUTH_SUCCESS(state, { full_name, home_page }) {\r\n//     state.status = \"success\";\r\n//     state.user = {\r\n//       full_name: full_name,\r\n//     };\r\n//     state.home_page = home_page || \"/app/home\";\r\n\r\n//     // Persist in localStorage\r\n//     localStorage.setItem(\"user\", JSON.stringify(state.user));\r\n//     localStorage.setItem(\"home_page\", state.home_page);\r\n//   },\r\n//   AUTH_ERROR(state) {\r\n//     state.status = \"error\";\r\n//     state.user = null;\r\n//     localStorage.removeItem(\"user\");\r\n//     localStorage.removeItem(\"home_page\");\r\n//   },\r\n//   LOGOUT(state) {\r\n//     state.user = null;\r\n//     state.home_page = \"/app/home\";\r\n//     localStorage.removeItem(\"user\");\r\n//     localStorage.removeItem(\"home_page\");\r\n//   },\r\n// };\r\n\r\n// const actions = {\r\n//   async login({ commit }, credentials) {\r\n//     commit(\"AUTH_REQUEST\");\r\n\r\n//     try {\r\n//       const response = await axiosAuth.post(\"/api/method/login\", {\r\n//         usr: credentials.email,\r\n//         pwd: credentials.password,\r\n//       });\r\n\r\n//       const { full_name, home_page } = response.data;\r\n\r\n//       commit(\"AUTH_SUCCESS\", { \r\n//         full_name, \r\n//         home_page: home_page || \"/app/home\" \r\n//       });\r\n\r\n//       return response.data;\r\n//     } catch (error) {\r\n//       commit(\"AUTH_ERROR\");\r\n//       throw error;\r\n//     }\r\n//   },\r\n\r\n//   async logout({ commit }) {\r\n//     try {\r\n//       await axiosAuth.post(\"/api/method/frappe.auth.logout\");\r\n//     } finally {\r\n//       commit(\"LOGOUT\");\r\n//     }\r\n//   },\r\n// };\r\n\r\n// export default {\r\n//   namespaced: true,\r\n//   state,\r\n//   getters,\r\n//   mutations,\r\n//   actions,\r\n// };\r\n\r\n\r\n// src/store/modules/auth.js\r\n// import { axiosAuth } from \"@/plugins/axios/axiosAuth\";\r\n\r\n// const state = {\r\n//   user: JSON.parse(localStorage.getItem(\"user\")) || null,\r\n//   token: localStorage.getItem(\"token\") || null,\r\n//   status: \"\", // 'loading', 'success', 'error'\r\n//   home_page: \"/app/home\", // Default home page\r\n// };\r\n\r\n// const getters = {\r\n//   isAuthenticated: (state) => !!state.token,\r\n//   authStatus: (state) => state.status,\r\n//   currentUser: (state) => state.user,\r\n//   homePage: (state) => state.home_page,\r\n//   fullName: (state) => state.user?.full_name || null,\r\n//   authToken: (state) => state.token,\r\n// };\r\n\r\n// const mutations = {\r\n//   AUTH_REQUEST(state) {\r\n//     state.status = \"loading\";\r\n//   },\r\n//   AUTH_SUCCESS(state, { user, token, home_page }) {\r\n//     state.status = \"success\";\r\n//     state.user = user;\r\n//     state.token = token;\r\n//     state.home_page = home_page || \"/app/home\";\r\n\r\n//     // Persist in localStorage\r\n//     localStorage.setItem(\"user\", JSON.stringify(user));\r\n//     localStorage.setItem(\"token\", token);\r\n//     localStorage.setItem(\"home_page\", state.home_page);\r\n//   },\r\n//   AUTH_ERROR(state) {\r\n//     state.status = \"error\";\r\n//     state.user = null;\r\n//     state.token = null;\r\n//     localStorage.removeItem(\"user\");\r\n//     localStorage.removeItem(\"token\");\r\n//     localStorage.removeItem(\"home_page\");\r\n//   },\r\n//   LOGOUT(state) {\r\n//     state.user = null;\r\n//     state.token = null;\r\n//     state.home_page = \"/app/home\";\r\n//     localStorage.removeItem(\"user\");\r\n//     localStorage.removeItem(\"token\");\r\n//     localStorage.removeItem(\"home_page\");\r\n//   },\r\n// };\r\n\r\n// const actions = {\r\n//   async login({ commit }, credentials) {\r\n//     commit(\"AUTH_REQUEST\");\r\n\r\n//     try {\r\n//       const response = await axiosAuth.post(\"/api/method/login\", {\r\n//         usr: credentials.email,\r\n//         pwd: credentials.password,\r\n//       });\r\n\r\n//       // ERPNext returns the full_name in the response\r\n//       const user = {\r\n//         full_name: response.data.full_name,\r\n//         email: credentials.email\r\n//       };\r\n\r\n//       // ERPNext returns the token in the response\r\n//       const token = response.data.token || response.data.api_key;\r\n\r\n//       commit(\"AUTH_SUCCESS\", { \r\n//         user,\r\n//         token,\r\n//         home_page: response.data.home_page || \"/app/home\" \r\n//       });\r\n\r\n//       return response.data;\r\n//     } catch (error) {\r\n//       commit(\"AUTH_ERROR\");\r\n//       throw error;\r\n//     }\r\n//   },\r\n\r\n//   async logout({ commit }) {\r\n//     try {\r\n//       await axiosAuth.post(\"/api/method/logout\");\r\n//     } catch (error) {\r\n//       console.error(\"Logout error:\", error);\r\n//     } finally {\r\n//       commit(\"LOGOUT\");\r\n//     }\r\n//   },\r\n\r\n//   async verifyToken({ state }) {\r\n//     if (!state.token) return false;\r\n    \r\n//     try {\r\n//       const response = await axiosAuth.get(\"/api/method/frappe.auth.get_logged_user\");\r\n//       return !!response.data;\r\n//     } catch (error) {\r\n//       return false;\r\n//     }\r\n//   }\r\n// };\r\n\r\n// export default {\r\n//   namespaced: true,\r\n//   state,\r\n//   getters,\r\n//   mutations,\r\n//   actions,\r\n// };\r\n\r\n\r\n// src/store/modules/auth.js\r\n// import { axiosAuth } from \"@/plugins/axios/axiosAuth\";\r\n\r\n// const state = {\r\n//   user: JSON.parse(localStorage.getItem(\"user\")) || null,\r\n//   status: \"\", // 'loading', 'success', 'error'\r\n//   home_page: localStorage.getItem(\"home_page\") || \"/app/home\",\r\n// };\r\n\r\n// const getters = {\r\n//   isAuthenticated: (state) => !!state.user,\r\n//   authStatus: (state) => state.status,\r\n//   currentUser: (state) => state.user,\r\n//   homePage: (state) => state.home_page,\r\n//   fullName: (state) => state.user?.full_name || null,\r\n// };\r\n\r\n// const mutations = {\r\n//   AUTH_REQUEST(state) {\r\n//     state.status = \"loading\";\r\n//   },\r\n//   AUTH_SUCCESS(state, { user, home_page }) {\r\n//     state.status = \"success\";\r\n//     state.user = user;\r\n//     state.home_page = home_page || \"/app/home\";\r\n//     localStorage.setItem(\"user\", JSON.stringify(user));\r\n//     localStorage.setItem(\"home_page\", state.home_page);\r\n//   },\r\n//   AUTH_ERROR(state) {\r\n//     state.status = \"error\";\r\n//     state.user = null;\r\n//     localStorage.removeItem(\"user\");\r\n//     localStorage.removeItem(\"home_page\");\r\n//   },\r\n//   LOGOUT(state) {\r\n//     state.user = null;\r\n//     state.home_page = \"/app/home\";\r\n//     localStorage.removeItem(\"user\");\r\n//     localStorage.removeItem(\"home_page\");\r\n//   },\r\n// };\r\n\r\n// const actions = {\r\n//   async login({ commit }, credentials) {\r\n//     commit(\"AUTH_REQUEST\");\r\n\r\n//     try {\r\n//       // 1. Make login request - this sets the session cookie\r\n//     const response =   await axiosAuth.post(\"/api/method/login\", {\r\n//         usr: credentials.email,\r\n//         pwd: credentials.password,\r\n//       });\r\n\r\n      \r\n\r\n//       const user = {\r\n//         full_name:  response.full_name,\r\n//         email: credentials.email,\r\n//       };\r\n\r\n//       commit(\"AUTH_SUCCESS\", {\r\n//         user,\r\n//         home_page: \"/app/home\"\r\n//       });\r\n\r\n//       return user;\r\n//     } catch (error) {\r\n//       commit(\"AUTH_ERROR\");\r\n      \r\n//       let errorMessage = \"Login failed\";\r\n//       if (error.response) {\r\n//         if (error.response.data && error.response.data.message) {\r\n//           errorMessage = typeof error.response.data.message === 'string' \r\n//             ? error.response.data.message\r\n//             : error.response.data.message.error || errorMessage;\r\n//         } else if (error.response.status === 401) {\r\n//           errorMessage = \"Invalid email or password\";\r\n//         }\r\n//       }\r\n      \r\n//       throw new Error(errorMessage);\r\n//     }\r\n//   },\r\n\r\n//   async logout({ commit }) {\r\n//     try {\r\n//       await axiosAuth.post(\"/api/method/logout\");\r\n//     } catch (error) {\r\n//       console.error(\"Logout error:\", error);\r\n//     } finally {\r\n//       commit(\"LOGOUT\");\r\n//     }\r\n//   },\r\n\r\n//   async verifyAuth({ state, commit }) {\r\n//     try {\r\n//       const response = await axiosAuth.get(\"/api/method/frappe.auth.get_logged_user\");\r\n//       if (response.data && response.data.message) {\r\n//         // Update user data if needed\r\n//         const userData = response.data.message;\r\n//         const updatedUser = {\r\n//           ...state.user,\r\n//           full_name: userData.full_name || state.user?.full_name,\r\n//           user_image: userData.user_image || state.user?.user_image\r\n//         };\r\n        \r\n//         commit(\"AUTH_SUCCESS\", {\r\n//           user: updatedUser,\r\n//           home_page: state.home_page\r\n//         });\r\n//         return true;\r\n//       }\r\n//       return false;\r\n//     } catch (error) {\r\n//       if (error.response && error.response.status === 401) {\r\n//         commit(\"LOGOUT\");\r\n//       }\r\n//       return false;\r\n//     }\r\n//   }\r\n// };\r\n\r\n// export default {\r\n//   namespaced: true,\r\n//   state,\r\n//   getters,\r\n//   mutations,\r\n//   actions,\r\n// };\r\n\r\n\r\n\r\n// src/store/modules/auth.js\r\nimport { axiosAuth } from \"@/plugins/axios/axiosAuth\";\r\n\r\nconst state = {\r\n  user: JSON.parse(localStorage.getItem(\"user\")) || null,\r\n  status: \"\", // 'loading', 'success', 'error'\r\n  home_page: localStorage.getItem(\"home_page\") || \"/app/home\",\r\n};\r\n\r\nconst getters = {\r\n  isAuthenticated: (state) => !!state.user,\r\n  authStatus: (state) => state.status,\r\n  currentUser: (state) => state.user,\r\n  homePage: (state) => state.home_page,\r\n  fullName: (state) => state.user?.full_name || null,\r\n};\r\n\r\nconst mutations = {\r\n  AUTH_REQUEST(state) {\r\n    state.status = \"loading\";\r\n  },\r\n  AUTH_SUCCESS(state, { user, home_page }) {\r\n    state.status = \"success\";\r\n    state.user = user;\r\n    state.home_page = home_page || \"/app/home\";\r\n    localStorage.setItem(\"user\", JSON.stringify(user));\r\n    localStorage.setItem(\"home_page\", state.home_page);\r\n  },\r\n  AUTH_ERROR(state) {\r\n    state.status = \"error\";\r\n    state.user = null;\r\n    localStorage.removeItem(\"user\");\r\n    localStorage.removeItem(\"home_page\");\r\n  },\r\n  LOGOUT(state) {\r\n    state.user = null;\r\n    state.home_page = \"/app/home\";\r\n    localStorage.removeItem(\"user\");\r\n    localStorage.removeItem(\"home_page\");\r\n  },\r\n};\r\n\r\nconst actions = {\r\n  async login({ commit }, credentials) {\r\n    commit(\"AUTH_REQUEST\");\r\n\r\n    try {\r\n      // 1. Make login request - this sets the session cookie\r\n      const response = await axiosAuth.post(\"/api/method/login\", {\r\n        usr: credentials.email,\r\n        pwd: credentials.password,\r\n      });\r\n\r\n      // 2. Verify the session by getting user details\r\n      const userResponse = await axiosAuth.get(\"/api/method/frappe.auth.get_logged_user\");\r\n      \r\n      const user = {\r\n        full_name: userResponse.data.message.full_name,\r\n        email: credentials.email,\r\n        user_image: userResponse.data.message.user_image\r\n      };\r\n\r\n      commit(\"AUTH_SUCCESS\", {\r\n        user,\r\n        home_page: response.data.home_page || \"/app/home\"\r\n      });\r\n\r\n      return user;\r\n    } catch (error) {\r\n      commit(\"AUTH_ERROR\");\r\n      \r\n      let errorMessage = \"Login failed\";\r\n      if (error.response) {\r\n        errorMessage = error.response.data.message?.message || \r\n                      error.response.data.message ||\r\n                      \"Invalid credentials\";\r\n      }\r\n      \r\n      throw new Error(errorMessage);\r\n    }\r\n  },\r\n\r\n  async logout({ commit }) {\r\n    try {\r\n      await axiosAuth.post(\"/api/method/logout\");\r\n    } catch (error) {\r\n      console.error(\"Logout error:\", error);\r\n    } finally {\r\n      commit(\"LOGOUT\");\r\n    }\r\n  },\r\n\r\n  async verifyAuth({ state, commit }) {\r\n    if (!state.user) return false;\r\n    \r\n    try {\r\n      const response = await axiosAuth.get(\"/api/method/frappe.auth.get_logged_user\");\r\n      if (response.data.message) {\r\n        // Update user data from fresh response\r\n        const updatedUser = {\r\n          ...state.user,\r\n          full_name: response.data.message.full_name,\r\n          user_image: response.data.message.user_image\r\n        };\r\n        \r\n        commit(\"AUTH_SUCCESS\", {\r\n          user: updatedUser,\r\n          home_page: state.home_page\r\n        });\r\n        return true;\r\n      }\r\n      return false;\r\n    } catch (error) {\r\n      if (error.response?.status === 401) {\r\n        commit(\"LOGOUT\");\r\n      }\r\n      return false;\r\n    }\r\n  }\r\n};\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state,\r\n  getters,\r\n  mutations,\r\n  actions,\r\n};"],"mappings":"AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}