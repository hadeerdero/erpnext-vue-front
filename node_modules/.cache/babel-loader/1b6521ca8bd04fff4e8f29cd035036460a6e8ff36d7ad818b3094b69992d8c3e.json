{"ast":null,"code":"// import { axiosAuth } from \"@/plugins/axios/axiosAuth\";\n\n// const state = {\n//   user: JSON.parse(localStorage.getItem(\"user\")) || null,\n//   status: \"\", // 'loading', 'success', 'error'\n//   home_page: \"/app/home\", // Default home page\n// };\n\n// const getters = {\n//   isAuthenticated: (state) => !!state.user,\n//   authStatus: (state) => state.status,\n//   currentUser: (state) => state.user,\n//   homePage: (state) => state.home_page,\n//   fullName: (state) => state.user?.full_name || null,\n// };\n\n// const mutations = {\n//   AUTH_REQUEST(state) {\n//     state.status = \"loading\";\n//   },\n//   AUTH_SUCCESS(state, { full_name, home_page }) {\n//     state.status = \"success\";\n//     state.user = {\n//       full_name: full_name,\n//     };\n//     state.home_page = home_page || \"/app/home\";\n\n//     // Persist in localStorage\n//     localStorage.setItem(\"user\", JSON.stringify(state.user));\n//     localStorage.setItem(\"home_page\", state.home_page);\n//   },\n//   AUTH_ERROR(state) {\n//     state.status = \"error\";\n//     state.user = null;\n//     localStorage.removeItem(\"user\");\n//     localStorage.removeItem(\"home_page\");\n//   },\n//   LOGOUT(state) {\n//     state.user = null;\n//     state.home_page = \"/app/home\";\n//     localStorage.removeItem(\"user\");\n//     localStorage.removeItem(\"home_page\");\n//   },\n// };\n\n// const actions = {\n//   async login({ commit }, credentials) {\n//     commit(\"AUTH_REQUEST\");\n\n//     try {\n//       const response = await axiosAuth.post(\"/api/method/login\", {\n//         usr: credentials.email,\n//         pwd: credentials.password,\n//       });\n\n//       const { full_name, home_page } = response.data;\n\n//       commit(\"AUTH_SUCCESS\", { \n//         full_name, \n//         home_page: home_page || \"/app/home\" \n//       });\n\n//       return response.data;\n//     } catch (error) {\n//       commit(\"AUTH_ERROR\");\n//       throw error;\n//     }\n//   },\n\n//   async logout({ commit }) {\n//     try {\n//       await axiosAuth.post(\"/api/method/frappe.auth.logout\");\n//     } finally {\n//       commit(\"LOGOUT\");\n//     }\n//   },\n// };\n\n// export default {\n//   namespaced: true,\n//   state,\n//   getters,\n//   mutations,\n//   actions,\n// };\n\n// src/store/modules/auth.js\n// import { axiosAuth } from \"@/plugins/axios/axiosAuth\";\n\n// const state = {\n//   user: JSON.parse(localStorage.getItem(\"user\")) || null,\n//   token: localStorage.getItem(\"token\") || null,\n//   status: \"\", // 'loading', 'success', 'error'\n//   home_page: \"/app/home\", // Default home page\n// };\n\n// const getters = {\n//   isAuthenticated: (state) => !!state.token,\n//   authStatus: (state) => state.status,\n//   currentUser: (state) => state.user,\n//   homePage: (state) => state.home_page,\n//   fullName: (state) => state.user?.full_name || null,\n//   authToken: (state) => state.token,\n// };\n\n// const mutations = {\n//   AUTH_REQUEST(state) {\n//     state.status = \"loading\";\n//   },\n//   AUTH_SUCCESS(state, { user, token, home_page }) {\n//     state.status = \"success\";\n//     state.user = user;\n//     state.token = token;\n//     state.home_page = home_page || \"/app/home\";\n\n//     // Persist in localStorage\n//     localStorage.setItem(\"user\", JSON.stringify(user));\n//     localStorage.setItem(\"token\", token);\n//     localStorage.setItem(\"home_page\", state.home_page);\n//   },\n//   AUTH_ERROR(state) {\n//     state.status = \"error\";\n//     state.user = null;\n//     state.token = null;\n//     localStorage.removeItem(\"user\");\n//     localStorage.removeItem(\"token\");\n//     localStorage.removeItem(\"home_page\");\n//   },\n//   LOGOUT(state) {\n//     state.user = null;\n//     state.token = null;\n//     state.home_page = \"/app/home\";\n//     localStorage.removeItem(\"user\");\n//     localStorage.removeItem(\"token\");\n//     localStorage.removeItem(\"home_page\");\n//   },\n// };\n\n// const actions = {\n//   async login({ commit }, credentials) {\n//     commit(\"AUTH_REQUEST\");\n\n//     try {\n//       const response = await axiosAuth.post(\"/api/method/login\", {\n//         usr: credentials.email,\n//         pwd: credentials.password,\n//       });\n\n//       // ERPNext returns the full_name in the response\n//       const user = {\n//         full_name: response.data.full_name,\n//         email: credentials.email\n//       };\n\n//       // ERPNext returns the token in the response\n//       const token = response.data.token || response.data.api_key;\n\n//       commit(\"AUTH_SUCCESS\", { \n//         user,\n//         token,\n//         home_page: response.data.home_page || \"/app/home\" \n//       });\n\n//       return response.data;\n//     } catch (error) {\n//       commit(\"AUTH_ERROR\");\n//       throw error;\n//     }\n//   },\n\n//   async logout({ commit }) {\n//     try {\n//       await axiosAuth.post(\"/api/method/logout\");\n//     } catch (error) {\n//       console.error(\"Logout error:\", error);\n//     } finally {\n//       commit(\"LOGOUT\");\n//     }\n//   },\n\n//   async verifyToken({ state }) {\n//     if (!state.token) return false;\n\n//     try {\n//       const response = await axiosAuth.get(\"/api/method/frappe.auth.get_logged_user\");\n//       return !!response.data;\n//     } catch (error) {\n//       return false;\n//     }\n//   }\n// };\n\n// export default {\n//   namespaced: true,\n//   state,\n//   getters,\n//   mutations,\n//   actions,\n// };\n\n// src/store/modules/auth.js\n// import { axiosAuth } from \"@/plugins/axios/axiosAuth\";\n\n// const state = {\n//   user: JSON.parse(localStorage.getItem(\"user\")) || null,\n//   status: \"\", // 'loading', 'success', 'error'\n//   home_page: localStorage.getItem(\"home_page\") || \"/app/home\",\n// };\n\n// const getters = {\n//   isAuthenticated: (state) => !!state.user,\n//   authStatus: (state) => state.status,\n//   currentUser: (state) => state.user,\n//   homePage: (state) => state.home_page,\n//   fullName: (state) => state.user?.full_name || null,\n// };\n\n// const mutations = {\n//   AUTH_REQUEST(state) {\n//     state.status = \"loading\";\n//   },\n//   AUTH_SUCCESS(state, { user, home_page }) {\n//     state.status = \"success\";\n//     state.user = user;\n//     state.home_page = home_page || \"/app/home\";\n//     localStorage.setItem(\"user\", JSON.stringify(user));\n//     localStorage.setItem(\"home_page\", state.home_page);\n//   },\n//   AUTH_ERROR(state) {\n//     state.status = \"error\";\n//     state.user = null;\n//     localStorage.removeItem(\"user\");\n//     localStorage.removeItem(\"home_page\");\n//   },\n//   LOGOUT(state) {\n//     state.user = null;\n//     state.home_page = \"/app/home\";\n//     localStorage.removeItem(\"user\");\n//     localStorage.removeItem(\"home_page\");\n//   },\n// };\n\n// const actions = {\n//   async login({ commit }, credentials) {\n//     commit(\"AUTH_REQUEST\");\n\n//     try {\n//       // 1. Make login request - this sets the session cookie\n//     const response =   await axiosAuth.post(\"/api/method/login\", {\n//         usr: credentials.email,\n//         pwd: credentials.password,\n//       });\n\n//       const user = {\n//         full_name:  response.full_name,\n//         email: credentials.email,\n//       };\n\n//       commit(\"AUTH_SUCCESS\", {\n//         user,\n//         home_page: \"/app/home\"\n//       });\n\n//       return user;\n//     } catch (error) {\n//       commit(\"AUTH_ERROR\");\n\n//       let errorMessage = \"Login failed\";\n//       if (error.response) {\n//         if (error.response.data && error.response.data.message) {\n//           errorMessage = typeof error.response.data.message === 'string' \n//             ? error.response.data.message\n//             : error.response.data.message.error || errorMessage;\n//         } else if (error.response.status === 401) {\n//           errorMessage = \"Invalid email or password\";\n//         }\n//       }\n\n//       throw new Error(errorMessage);\n//     }\n//   },\n\n//   async logout({ commit }) {\n//     try {\n//       await axiosAuth.post(\"/api/method/logout\");\n//     } catch (error) {\n//       console.error(\"Logout error:\", error);\n//     } finally {\n//       commit(\"LOGOUT\");\n//     }\n//   },\n\n//   async verifyAuth({ state, commit }) {\n//     try {\n//       const response = await axiosAuth.get(\"/api/method/frappe.auth.get_logged_user\");\n//       if (response.data && response.data.message) {\n//         // Update user data if needed\n//         const userData = response.data.message;\n//         const updatedUser = {\n//           ...state.user,\n//           full_name: userData.full_name || state.user?.full_name,\n//           user_image: userData.user_image || state.user?.user_image\n//         };\n\n//         commit(\"AUTH_SUCCESS\", {\n//           user: updatedUser,\n//           home_page: state.home_page\n//         });\n//         return true;\n//       }\n//       return false;\n//     } catch (error) {\n//       if (error.response && error.response.status === 401) {\n//         commit(\"LOGOUT\");\n//       }\n//       return false;\n//     }\n//   }\n// };\n\n// export default {\n//   namespaced: true,\n//   state,\n//   getters,\n//   mutations,\n//   actions,\n// };\n\n// // src/store/modules/auth.js\n// import { axiosAuth } from \"@/plugins/axios/axiosAuth\";\n\n// const state = {\n//   user: JSON.parse(localStorage.getItem(\"user\")) || null,\n//   status: \"\", // 'loading', 'success', 'error'\n//   home_page: localStorage.getItem(\"home_page\") || \"/app/home\",\n// };\n\n// const getters = {\n//   isAuthenticated: (state) => !!state.user,\n//   authStatus: (state) => state.status,\n//   currentUser: (state) => state.user,\n//   homePage: (state) => state.home_page,\n//   fullName: (state) => state.user?.full_name || null,\n// };\n\n// const mutations = {\n//   AUTH_REQUEST(state) {\n//     state.status = \"loading\";\n//   },\n//   AUTH_SUCCESS(state, { user, home_page }) {\n//     state.status = \"success\";\n//     state.user = user;\n//     state.home_page = home_page || \"/app/home\";\n//     localStorage.setItem(\"user\", JSON.stringify(user));\n//     localStorage.setItem(\"home_page\", state.home_page);\n//   },\n//   AUTH_ERROR(state) {\n//     state.status = \"error\";\n//     state.user = null;\n//     localStorage.removeItem(\"user\");\n//     localStorage.removeItem(\"home_page\");\n//   },\n//   LOGOUT(state) {\n//     state.user = null;\n//     state.home_page = \"/app/home\";\n//     localStorage.removeItem(\"user\");\n//     localStorage.removeItem(\"home_page\");\n//   },\n// };\n\n// const actions = {\n//   async login({ commit }, credentials) {\n//     commit(\"AUTH_REQUEST\");\n\n//     try {\n//       // 1. Make login request - this sets the session cookie\n//       const response = await axiosAuth.post(\"/api/method/login\", {\n//         usr: credentials.email,\n//         pwd: credentials.password,\n//       });\n\n//       // 2. Verify the session by getting user details\n//       const userResponse = await axiosAuth.get(\"/api/method/frappe.auth.get_logged_user\");\n\n//       const user = {\n//         full_name: userResponse.data.message.full_name,\n//         email: credentials.email,\n//         user_image: userResponse.data.message.user_image\n//       };\n\n//       commit(\"AUTH_SUCCESS\", {\n//         user,\n//         home_page: response.data.home_page || \"/app/home\"\n//       });\n\n//       return user;\n//     } catch (error) {\n//       commit(\"AUTH_ERROR\");\n\n//       let errorMessage = \"Login failed\";\n//       if (error.response) {\n//         errorMessage = error.response.data.message?.message || \n//                       error.response.data.message ||\n//                       \"Invalid credentials\";\n//       }\n\n//       throw new Error(errorMessage);\n//     }\n//   },\n\n//   async logout({ commit }) {\n//     try {\n//       await axiosAuth.post(\"/api/method/logout\");\n//     } catch (error) {\n//       console.error(\"Logout error:\", error);\n//     } finally {\n//       commit(\"LOGOUT\");\n//     }\n//   },\n\n//   async verifyAuth({ state, commit }) {\n//     if (!state.user) return false;\n\n//     try {\n//       const response = await axiosAuth.get(\"/api/method/frappe.auth.get_logged_user\");\n//       if (response.data.message) {\n//         // Update user data from fresh response\n//         const updatedUser = {\n//           ...state.user,\n//           full_name: response.data.message.full_name,\n//           user_image: response.data.message.user_image\n//         };\n\n//         commit(\"AUTH_SUCCESS\", {\n//           user: updatedUser,\n//           home_page: state.home_page\n//         });\n//         return true;\n//       }\n//       return false;\n//     } catch (error) {\n//       if (error.response?.status === 401) {\n//         commit(\"LOGOUT\");\n//       }\n//       return false;\n//     }\n//   }\n// };\n\n// export default {\n//   namespaced: true,\n//   state,\n//   getters,\n//   mutations,\n//   actions,\n\n// };\n\nimport { axiosAuth } from \"@/plugins/axios/axiosAuth\";\nconst state = {\n  user: JSON.parse(localStorage.getItem(\"user\")) || null,\n  api_token: localStorage.getItem(\"api_token\") || null,\n  api_secret: localStorage.getItem(\"api_secret\") || null,\n  status: \"\",\n  // 'loading', 'success', 'error'\n  home_page: localStorage.getItem(\"home_page\") || \"/app/home\"\n};\nconst getters = {\n  isAuthenticated: state => !!state.api_token && !!state.api_secret,\n  authStatus: state => state.status,\n  currentUser: state => state.user,\n  homePage: state => state.home_page,\n  fullName: state => state.user?.full_name || null,\n  apiToken: state => state.api_token\n};\nconst mutations = {\n  AUTH_REQUEST(state) {\n    state.status = \"loading\";\n  },\n  AUTH_SUCCESS(state, {\n    user,\n    api_token,\n    api_secret,\n    home_page\n  }) {\n    state.status = \"success\";\n    state.user = user;\n    state.api_token = api_token;\n    state.api_secret = api_secret;\n    state.home_page = home_page || \"/app/home\";\n\n    // Store auth data in localStorage\n    localStorage.setItem(\"user\", JSON.stringify(user));\n    localStorage.setItem(\"api_token\", api_token);\n    localStorage.setItem(\"api_secret\", api_secret);\n    localStorage.setItem(\"home_page\", state.home_page);\n  },\n  AUTH_ERROR(state) {\n    state.status = \"error\";\n    state.user = null;\n    state.api_token = null;\n    state.api_secret = null;\n\n    // Clean up localStorage\n    localStorage.removeItem(\"user\");\n    localStorage.removeItem(\"api_token\");\n    localStorage.removeItem(\"api_secret\");\n    localStorage.removeItem(\"home_page\");\n    localStorage.removeItem(\"csrf_token\");\n  },\n  LOGOUT(state) {\n    state.user = null;\n    state.api_token = null;\n    state.api_secret = null;\n    state.home_page = \"/app/home\";\n\n    // Clean up localStorage\n    localStorage.removeItem(\"user\");\n    localStorage.removeItem(\"api_token\");\n    localStorage.removeItem(\"api_secret\");\n    localStorage.removeItem(\"home_page\");\n    localStorage.removeItem(\"csrf_token\");\n  },\n  UPDATE_USER(state, user) {\n    state.user = {\n      ...state.user,\n      ...user\n    };\n    localStorage.setItem(\"user\", JSON.stringify(state.user));\n  }\n};\nconst actions = {\n  async login({\n    commit\n  }, credentials) {\n    commit(\"AUTH_REQUEST\");\n    try {\n      // Step 1: First, get a CSRF token by making a simple request\n      await axiosAuth.get(\"/api/method/frappe.auth.get_csrf_token\");\n\n      // Step 2: Login via username/password to get session\n      const loginResponse = await axiosAuth.post(\"/api/method/login\", {\n        usr: credentials.email,\n        pwd: credentials.password\n      });\n\n      // Step 3: Generate API key for token auth\n      const tokenResponse = await axiosAuth.post(\"/api/method/frappe.integrations.oauth2.get_token\", {\n        grant_type: \"authorization_code\"\n      }, {\n        // Use the session we just established\n        withCredentials: true\n      });\n      const api_token = tokenResponse.data.token || tokenResponse.data.api_key;\n      const api_secret = tokenResponse.data.secret || tokenResponse.data.api_secret;\n      if (!api_token || !api_secret) {\n        throw new Error(\"Failed to generate API token\");\n      }\n\n      // Step 4: Get user details with the token\n      axiosAuth.defaults.headers.common[\"Authorization\"] = `token ${api_token}:${api_secret}`;\n      const userResponse = await axiosAuth.get(\"/api/method/frappe.auth.get_logged_user\");\n\n      // Step 5: Get more user details if needed\n      const detailedUserResponse = await axiosAuth.get(`/api/resource/User/${credentials.email}`);\n      const user = {\n        full_name: userResponse.data.message.full_name || detailedUserResponse.data.data.full_name,\n        email: credentials.email,\n        user_image: userResponse.data.message.user_image || detailedUserResponse.data.data.user_image,\n        user_id: userResponse.data.message.name || credentials.email\n      };\n      commit(\"AUTH_SUCCESS\", {\n        user,\n        api_token,\n        api_secret,\n        home_page: loginResponse.data.home_page || \"/app/home\"\n      });\n      return user;\n    } catch (error) {\n      commit(\"AUTH_ERROR\");\n      let errorMessage = \"Login failed\";\n      if (error.response) {\n        // Extract error message from response\n        errorMessage = error.response.data._server_messages ? JSON.parse(error.response.data._server_messages)[0] : error.response.data.message || \"Authentication failed\";\n\n        // Try to parse the server message if it's a string that looks like JSON\n        if (typeof errorMessage === 'string' && errorMessage.startsWith('{')) {\n          try {\n            const parsedError = JSON.parse(errorMessage);\n            errorMessage = parsedError.message || errorMessage;\n          } catch (e) {\n            // If parsing fails, keep the original message\n          }\n        }\n      }\n      throw new Error(errorMessage);\n    }\n  },\n  async logout({\n    commit,\n    state\n  }) {\n    try {\n      // Only try to logout if we have token\n      if (state.api_token) {\n        await axiosAuth.post(\"/api/method/logout\");\n      }\n    } catch (error) {\n      console.error(\"Logout error:\", error);\n    } finally {\n      commit(\"LOGOUT\");\n    }\n  },\n  async verifyAuth({\n    state,\n    commit\n  }) {\n    if (!state.api_token || !state.api_secret) return false;\n    try {\n      // Try to get user data using token auth\n      const response = await axiosAuth.get(\"/api/method/frappe.auth.get_logged_user\");\n      if (response.data.message && response.data.message.name) {\n        // Update user data from fresh response\n        const updatedUser = {\n          ...state.user,\n          full_name: response.data.message.full_name || state.user.full_name,\n          user_image: response.data.message.user_image || state.user.user_image\n        };\n        commit(\"UPDATE_USER\", updatedUser);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      if (error.response && (error.response.status === 401 || error.response.status === 403)) {\n        commit(\"LOGOUT\");\n      }\n      return false;\n    }\n  },\n  // New method to fetch user data at any time\n  async fetchUserData({\n    commit,\n    state\n  }) {\n    if (!state.api_token || !state.api_secret) return null;\n    try {\n      const response = await axiosAuth.get(`/api/resource/User/${state.user.email}`);\n      const userData = response.data.data;\n      const updatedUser = {\n        ...state.user,\n        full_name: userData.full_name,\n        user_image: userData.user_image,\n        roles: userData.roles\n      };\n      commit(\"UPDATE_USER\", updatedUser);\n      return updatedUser;\n    } catch (error) {\n      console.error(\"Error fetching user data:\", error);\n      return null;\n    }\n  }\n};\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  mutations,\n  actions\n};","map":{"version":3,"names":["axiosAuth","state","user","JSON","parse","localStorage","getItem","api_token","api_secret","status","home_page","getters","isAuthenticated","authStatus","currentUser","homePage","fullName","full_name","apiToken","mutations","AUTH_REQUEST","AUTH_SUCCESS","setItem","stringify","AUTH_ERROR","removeItem","LOGOUT","UPDATE_USER","actions","login","commit","credentials","get","loginResponse","post","usr","email","pwd","password","tokenResponse","grant_type","withCredentials","data","token","api_key","secret","Error","defaults","headers","common","userResponse","detailedUserResponse","message","user_image","user_id","name","error","errorMessage","response","_server_messages","startsWith","parsedError","e","logout","console","verifyAuth","updatedUser","fetchUserData","userData","roles","namespaced"],"sources":["D:/hadeerwork/erpnext-vue-front/src/store/modules/auth/auth.js"],"sourcesContent":["\r\n// import { axiosAuth } from \"@/plugins/axios/axiosAuth\";\r\n\r\n// const state = {\r\n//   user: JSON.parse(localStorage.getItem(\"user\")) || null,\r\n//   status: \"\", // 'loading', 'success', 'error'\r\n//   home_page: \"/app/home\", // Default home page\r\n// };\r\n\r\n// const getters = {\r\n//   isAuthenticated: (state) => !!state.user,\r\n//   authStatus: (state) => state.status,\r\n//   currentUser: (state) => state.user,\r\n//   homePage: (state) => state.home_page,\r\n//   fullName: (state) => state.user?.full_name || null,\r\n// };\r\n\r\n// const mutations = {\r\n//   AUTH_REQUEST(state) {\r\n//     state.status = \"loading\";\r\n//   },\r\n//   AUTH_SUCCESS(state, { full_name, home_page }) {\r\n//     state.status = \"success\";\r\n//     state.user = {\r\n//       full_name: full_name,\r\n//     };\r\n//     state.home_page = home_page || \"/app/home\";\r\n\r\n//     // Persist in localStorage\r\n//     localStorage.setItem(\"user\", JSON.stringify(state.user));\r\n//     localStorage.setItem(\"home_page\", state.home_page);\r\n//   },\r\n//   AUTH_ERROR(state) {\r\n//     state.status = \"error\";\r\n//     state.user = null;\r\n//     localStorage.removeItem(\"user\");\r\n//     localStorage.removeItem(\"home_page\");\r\n//   },\r\n//   LOGOUT(state) {\r\n//     state.user = null;\r\n//     state.home_page = \"/app/home\";\r\n//     localStorage.removeItem(\"user\");\r\n//     localStorage.removeItem(\"home_page\");\r\n//   },\r\n// };\r\n\r\n// const actions = {\r\n//   async login({ commit }, credentials) {\r\n//     commit(\"AUTH_REQUEST\");\r\n\r\n//     try {\r\n//       const response = await axiosAuth.post(\"/api/method/login\", {\r\n//         usr: credentials.email,\r\n//         pwd: credentials.password,\r\n//       });\r\n\r\n//       const { full_name, home_page } = response.data;\r\n\r\n//       commit(\"AUTH_SUCCESS\", { \r\n//         full_name, \r\n//         home_page: home_page || \"/app/home\" \r\n//       });\r\n\r\n//       return response.data;\r\n//     } catch (error) {\r\n//       commit(\"AUTH_ERROR\");\r\n//       throw error;\r\n//     }\r\n//   },\r\n\r\n//   async logout({ commit }) {\r\n//     try {\r\n//       await axiosAuth.post(\"/api/method/frappe.auth.logout\");\r\n//     } finally {\r\n//       commit(\"LOGOUT\");\r\n//     }\r\n//   },\r\n// };\r\n\r\n// export default {\r\n//   namespaced: true,\r\n//   state,\r\n//   getters,\r\n//   mutations,\r\n//   actions,\r\n// };\r\n\r\n\r\n// src/store/modules/auth.js\r\n// import { axiosAuth } from \"@/plugins/axios/axiosAuth\";\r\n\r\n// const state = {\r\n//   user: JSON.parse(localStorage.getItem(\"user\")) || null,\r\n//   token: localStorage.getItem(\"token\") || null,\r\n//   status: \"\", // 'loading', 'success', 'error'\r\n//   home_page: \"/app/home\", // Default home page\r\n// };\r\n\r\n// const getters = {\r\n//   isAuthenticated: (state) => !!state.token,\r\n//   authStatus: (state) => state.status,\r\n//   currentUser: (state) => state.user,\r\n//   homePage: (state) => state.home_page,\r\n//   fullName: (state) => state.user?.full_name || null,\r\n//   authToken: (state) => state.token,\r\n// };\r\n\r\n// const mutations = {\r\n//   AUTH_REQUEST(state) {\r\n//     state.status = \"loading\";\r\n//   },\r\n//   AUTH_SUCCESS(state, { user, token, home_page }) {\r\n//     state.status = \"success\";\r\n//     state.user = user;\r\n//     state.token = token;\r\n//     state.home_page = home_page || \"/app/home\";\r\n\r\n//     // Persist in localStorage\r\n//     localStorage.setItem(\"user\", JSON.stringify(user));\r\n//     localStorage.setItem(\"token\", token);\r\n//     localStorage.setItem(\"home_page\", state.home_page);\r\n//   },\r\n//   AUTH_ERROR(state) {\r\n//     state.status = \"error\";\r\n//     state.user = null;\r\n//     state.token = null;\r\n//     localStorage.removeItem(\"user\");\r\n//     localStorage.removeItem(\"token\");\r\n//     localStorage.removeItem(\"home_page\");\r\n//   },\r\n//   LOGOUT(state) {\r\n//     state.user = null;\r\n//     state.token = null;\r\n//     state.home_page = \"/app/home\";\r\n//     localStorage.removeItem(\"user\");\r\n//     localStorage.removeItem(\"token\");\r\n//     localStorage.removeItem(\"home_page\");\r\n//   },\r\n// };\r\n\r\n// const actions = {\r\n//   async login({ commit }, credentials) {\r\n//     commit(\"AUTH_REQUEST\");\r\n\r\n//     try {\r\n//       const response = await axiosAuth.post(\"/api/method/login\", {\r\n//         usr: credentials.email,\r\n//         pwd: credentials.password,\r\n//       });\r\n\r\n//       // ERPNext returns the full_name in the response\r\n//       const user = {\r\n//         full_name: response.data.full_name,\r\n//         email: credentials.email\r\n//       };\r\n\r\n//       // ERPNext returns the token in the response\r\n//       const token = response.data.token || response.data.api_key;\r\n\r\n//       commit(\"AUTH_SUCCESS\", { \r\n//         user,\r\n//         token,\r\n//         home_page: response.data.home_page || \"/app/home\" \r\n//       });\r\n\r\n//       return response.data;\r\n//     } catch (error) {\r\n//       commit(\"AUTH_ERROR\");\r\n//       throw error;\r\n//     }\r\n//   },\r\n\r\n//   async logout({ commit }) {\r\n//     try {\r\n//       await axiosAuth.post(\"/api/method/logout\");\r\n//     } catch (error) {\r\n//       console.error(\"Logout error:\", error);\r\n//     } finally {\r\n//       commit(\"LOGOUT\");\r\n//     }\r\n//   },\r\n\r\n//   async verifyToken({ state }) {\r\n//     if (!state.token) return false;\r\n    \r\n//     try {\r\n//       const response = await axiosAuth.get(\"/api/method/frappe.auth.get_logged_user\");\r\n//       return !!response.data;\r\n//     } catch (error) {\r\n//       return false;\r\n//     }\r\n//   }\r\n// };\r\n\r\n// export default {\r\n//   namespaced: true,\r\n//   state,\r\n//   getters,\r\n//   mutations,\r\n//   actions,\r\n// };\r\n\r\n\r\n// src/store/modules/auth.js\r\n// import { axiosAuth } from \"@/plugins/axios/axiosAuth\";\r\n\r\n// const state = {\r\n//   user: JSON.parse(localStorage.getItem(\"user\")) || null,\r\n//   status: \"\", // 'loading', 'success', 'error'\r\n//   home_page: localStorage.getItem(\"home_page\") || \"/app/home\",\r\n// };\r\n\r\n// const getters = {\r\n//   isAuthenticated: (state) => !!state.user,\r\n//   authStatus: (state) => state.status,\r\n//   currentUser: (state) => state.user,\r\n//   homePage: (state) => state.home_page,\r\n//   fullName: (state) => state.user?.full_name || null,\r\n// };\r\n\r\n// const mutations = {\r\n//   AUTH_REQUEST(state) {\r\n//     state.status = \"loading\";\r\n//   },\r\n//   AUTH_SUCCESS(state, { user, home_page }) {\r\n//     state.status = \"success\";\r\n//     state.user = user;\r\n//     state.home_page = home_page || \"/app/home\";\r\n//     localStorage.setItem(\"user\", JSON.stringify(user));\r\n//     localStorage.setItem(\"home_page\", state.home_page);\r\n//   },\r\n//   AUTH_ERROR(state) {\r\n//     state.status = \"error\";\r\n//     state.user = null;\r\n//     localStorage.removeItem(\"user\");\r\n//     localStorage.removeItem(\"home_page\");\r\n//   },\r\n//   LOGOUT(state) {\r\n//     state.user = null;\r\n//     state.home_page = \"/app/home\";\r\n//     localStorage.removeItem(\"user\");\r\n//     localStorage.removeItem(\"home_page\");\r\n//   },\r\n// };\r\n\r\n// const actions = {\r\n//   async login({ commit }, credentials) {\r\n//     commit(\"AUTH_REQUEST\");\r\n\r\n//     try {\r\n//       // 1. Make login request - this sets the session cookie\r\n//     const response =   await axiosAuth.post(\"/api/method/login\", {\r\n//         usr: credentials.email,\r\n//         pwd: credentials.password,\r\n//       });\r\n\r\n      \r\n\r\n//       const user = {\r\n//         full_name:  response.full_name,\r\n//         email: credentials.email,\r\n//       };\r\n\r\n//       commit(\"AUTH_SUCCESS\", {\r\n//         user,\r\n//         home_page: \"/app/home\"\r\n//       });\r\n\r\n//       return user;\r\n//     } catch (error) {\r\n//       commit(\"AUTH_ERROR\");\r\n      \r\n//       let errorMessage = \"Login failed\";\r\n//       if (error.response) {\r\n//         if (error.response.data && error.response.data.message) {\r\n//           errorMessage = typeof error.response.data.message === 'string' \r\n//             ? error.response.data.message\r\n//             : error.response.data.message.error || errorMessage;\r\n//         } else if (error.response.status === 401) {\r\n//           errorMessage = \"Invalid email or password\";\r\n//         }\r\n//       }\r\n      \r\n//       throw new Error(errorMessage);\r\n//     }\r\n//   },\r\n\r\n//   async logout({ commit }) {\r\n//     try {\r\n//       await axiosAuth.post(\"/api/method/logout\");\r\n//     } catch (error) {\r\n//       console.error(\"Logout error:\", error);\r\n//     } finally {\r\n//       commit(\"LOGOUT\");\r\n//     }\r\n//   },\r\n\r\n//   async verifyAuth({ state, commit }) {\r\n//     try {\r\n//       const response = await axiosAuth.get(\"/api/method/frappe.auth.get_logged_user\");\r\n//       if (response.data && response.data.message) {\r\n//         // Update user data if needed\r\n//         const userData = response.data.message;\r\n//         const updatedUser = {\r\n//           ...state.user,\r\n//           full_name: userData.full_name || state.user?.full_name,\r\n//           user_image: userData.user_image || state.user?.user_image\r\n//         };\r\n        \r\n//         commit(\"AUTH_SUCCESS\", {\r\n//           user: updatedUser,\r\n//           home_page: state.home_page\r\n//         });\r\n//         return true;\r\n//       }\r\n//       return false;\r\n//     } catch (error) {\r\n//       if (error.response && error.response.status === 401) {\r\n//         commit(\"LOGOUT\");\r\n//       }\r\n//       return false;\r\n//     }\r\n//   }\r\n// };\r\n\r\n// export default {\r\n//   namespaced: true,\r\n//   state,\r\n//   getters,\r\n//   mutations,\r\n//   actions,\r\n// };\r\n\r\n\r\n\r\n// // src/store/modules/auth.js\r\n// import { axiosAuth } from \"@/plugins/axios/axiosAuth\";\r\n\r\n// const state = {\r\n//   user: JSON.parse(localStorage.getItem(\"user\")) || null,\r\n//   status: \"\", // 'loading', 'success', 'error'\r\n//   home_page: localStorage.getItem(\"home_page\") || \"/app/home\",\r\n// };\r\n\r\n// const getters = {\r\n//   isAuthenticated: (state) => !!state.user,\r\n//   authStatus: (state) => state.status,\r\n//   currentUser: (state) => state.user,\r\n//   homePage: (state) => state.home_page,\r\n//   fullName: (state) => state.user?.full_name || null,\r\n// };\r\n\r\n// const mutations = {\r\n//   AUTH_REQUEST(state) {\r\n//     state.status = \"loading\";\r\n//   },\r\n//   AUTH_SUCCESS(state, { user, home_page }) {\r\n//     state.status = \"success\";\r\n//     state.user = user;\r\n//     state.home_page = home_page || \"/app/home\";\r\n//     localStorage.setItem(\"user\", JSON.stringify(user));\r\n//     localStorage.setItem(\"home_page\", state.home_page);\r\n//   },\r\n//   AUTH_ERROR(state) {\r\n//     state.status = \"error\";\r\n//     state.user = null;\r\n//     localStorage.removeItem(\"user\");\r\n//     localStorage.removeItem(\"home_page\");\r\n//   },\r\n//   LOGOUT(state) {\r\n//     state.user = null;\r\n//     state.home_page = \"/app/home\";\r\n//     localStorage.removeItem(\"user\");\r\n//     localStorage.removeItem(\"home_page\");\r\n//   },\r\n// };\r\n\r\n// const actions = {\r\n//   async login({ commit }, credentials) {\r\n//     commit(\"AUTH_REQUEST\");\r\n\r\n//     try {\r\n//       // 1. Make login request - this sets the session cookie\r\n//       const response = await axiosAuth.post(\"/api/method/login\", {\r\n//         usr: credentials.email,\r\n//         pwd: credentials.password,\r\n//       });\r\n\r\n//       // 2. Verify the session by getting user details\r\n//       const userResponse = await axiosAuth.get(\"/api/method/frappe.auth.get_logged_user\");\r\n      \r\n//       const user = {\r\n//         full_name: userResponse.data.message.full_name,\r\n//         email: credentials.email,\r\n//         user_image: userResponse.data.message.user_image\r\n//       };\r\n\r\n//       commit(\"AUTH_SUCCESS\", {\r\n//         user,\r\n//         home_page: response.data.home_page || \"/app/home\"\r\n//       });\r\n\r\n//       return user;\r\n//     } catch (error) {\r\n//       commit(\"AUTH_ERROR\");\r\n      \r\n//       let errorMessage = \"Login failed\";\r\n//       if (error.response) {\r\n//         errorMessage = error.response.data.message?.message || \r\n//                       error.response.data.message ||\r\n//                       \"Invalid credentials\";\r\n//       }\r\n      \r\n//       throw new Error(errorMessage);\r\n//     }\r\n//   },\r\n\r\n//   async logout({ commit }) {\r\n//     try {\r\n//       await axiosAuth.post(\"/api/method/logout\");\r\n//     } catch (error) {\r\n//       console.error(\"Logout error:\", error);\r\n//     } finally {\r\n//       commit(\"LOGOUT\");\r\n//     }\r\n//   },\r\n\r\n//   async verifyAuth({ state, commit }) {\r\n//     if (!state.user) return false;\r\n    \r\n//     try {\r\n//       const response = await axiosAuth.get(\"/api/method/frappe.auth.get_logged_user\");\r\n//       if (response.data.message) {\r\n//         // Update user data from fresh response\r\n//         const updatedUser = {\r\n//           ...state.user,\r\n//           full_name: response.data.message.full_name,\r\n//           user_image: response.data.message.user_image\r\n//         };\r\n        \r\n//         commit(\"AUTH_SUCCESS\", {\r\n//           user: updatedUser,\r\n//           home_page: state.home_page\r\n//         });\r\n//         return true;\r\n//       }\r\n//       return false;\r\n//     } catch (error) {\r\n//       if (error.response?.status === 401) {\r\n//         commit(\"LOGOUT\");\r\n//       }\r\n//       return false;\r\n//     }\r\n//   }\r\n// };\r\n\r\n// export default {\r\n//   namespaced: true,\r\n//   state,\r\n//   getters,\r\n//   mutations,\r\n//   actions,\r\n\r\n// };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport { axiosAuth } from \"@/plugins/axios/axiosAuth\";\r\n\r\nconst state = {\r\n  user: JSON.parse(localStorage.getItem(\"user\")) || null,\r\n  api_token: localStorage.getItem(\"api_token\") || null,\r\n  api_secret: localStorage.getItem(\"api_secret\") || null,\r\n  status: \"\", // 'loading', 'success', 'error'\r\n  home_page: localStorage.getItem(\"home_page\") || \"/app/home\",\r\n};\r\n\r\nconst getters = {\r\n  isAuthenticated: (state) => !!state.api_token && !!state.api_secret,\r\n  authStatus: (state) => state.status,\r\n  currentUser: (state) => state.user,\r\n  homePage: (state) => state.home_page,\r\n  fullName: (state) => state.user?.full_name || null,\r\n  apiToken: (state) => state.api_token,\r\n};\r\n\r\nconst mutations = {\r\n  AUTH_REQUEST(state) {\r\n    state.status = \"loading\";\r\n  },\r\n  AUTH_SUCCESS(state, { user, api_token, api_secret, home_page }) {\r\n    state.status = \"success\";\r\n    state.user = user;\r\n    state.api_token = api_token;\r\n    state.api_secret = api_secret;\r\n    state.home_page = home_page || \"/app/home\";\r\n    \r\n    // Store auth data in localStorage\r\n    localStorage.setItem(\"user\", JSON.stringify(user));\r\n    localStorage.setItem(\"api_token\", api_token);\r\n    localStorage.setItem(\"api_secret\", api_secret);\r\n    localStorage.setItem(\"home_page\", state.home_page);\r\n  },\r\n  AUTH_ERROR(state) {\r\n    state.status = \"error\";\r\n    state.user = null;\r\n    state.api_token = null;\r\n    state.api_secret = null;\r\n    \r\n    // Clean up localStorage\r\n    localStorage.removeItem(\"user\");\r\n    localStorage.removeItem(\"api_token\");\r\n    localStorage.removeItem(\"api_secret\");\r\n    localStorage.removeItem(\"home_page\");\r\n    localStorage.removeItem(\"csrf_token\");\r\n  },\r\n  LOGOUT(state) {\r\n    state.user = null;\r\n    state.api_token = null;\r\n    state.api_secret = null;\r\n    state.home_page = \"/app/home\";\r\n    \r\n    // Clean up localStorage\r\n    localStorage.removeItem(\"user\");\r\n    localStorage.removeItem(\"api_token\");\r\n    localStorage.removeItem(\"api_secret\");\r\n    localStorage.removeItem(\"home_page\");\r\n    localStorage.removeItem(\"csrf_token\");\r\n  },\r\n  UPDATE_USER(state, user) {\r\n    state.user = { ...state.user, ...user };\r\n    localStorage.setItem(\"user\", JSON.stringify(state.user));\r\n  }\r\n};\r\n\r\nconst actions = {\r\n  async login({ commit }, credentials) {\r\n    commit(\"AUTH_REQUEST\");\r\n\r\n    try {\r\n      // Step 1: First, get a CSRF token by making a simple request\r\n      await axiosAuth.get(\"/api/method/frappe.auth.get_csrf_token\");\r\n      \r\n      // Step 2: Login via username/password to get session\r\n      const loginResponse = await axiosAuth.post(\"/api/method/login\", {\r\n        usr: credentials.email,\r\n        pwd: credentials.password,\r\n      });\r\n      \r\n      // Step 3: Generate API key for token auth\r\n      const tokenResponse = await axiosAuth.post(\"/api/method/frappe.integrations.oauth2.get_token\", {\r\n        grant_type: \"authorization_code\"\r\n      }, {\r\n        // Use the session we just established\r\n        withCredentials: true\r\n      });\r\n      \r\n      const api_token = tokenResponse.data.token || tokenResponse.data.api_key;\r\n      const api_secret = tokenResponse.data.secret || tokenResponse.data.api_secret;\r\n      \r\n      if (!api_token || !api_secret) {\r\n        throw new Error(\"Failed to generate API token\");\r\n      }\r\n      \r\n      // Step 4: Get user details with the token\r\n      axiosAuth.defaults.headers.common[\"Authorization\"] = `token ${api_token}:${api_secret}`;\r\n      const userResponse = await axiosAuth.get(\"/api/method/frappe.auth.get_logged_user\");\r\n      \r\n      // Step 5: Get more user details if needed\r\n      const detailedUserResponse = await axiosAuth.get(`/api/resource/User/${credentials.email}`);\r\n      \r\n      const user = {\r\n        full_name: userResponse.data.message.full_name || detailedUserResponse.data.data.full_name,\r\n        email: credentials.email,\r\n        user_image: userResponse.data.message.user_image || detailedUserResponse.data.data.user_image,\r\n        user_id: userResponse.data.message.name || credentials.email\r\n      };\r\n\r\n      commit(\"AUTH_SUCCESS\", {\r\n        user,\r\n        api_token,\r\n        api_secret,\r\n        home_page: loginResponse.data.home_page || \"/app/home\"\r\n      });\r\n\r\n      return user;\r\n    } catch (error) {\r\n      commit(\"AUTH_ERROR\");\r\n      \r\n      let errorMessage = \"Login failed\";\r\n      if (error.response) {\r\n        // Extract error message from response\r\n        errorMessage = error.response.data._server_messages ? \r\n                      JSON.parse(error.response.data._server_messages)[0] : \r\n                      error.response.data.message || \r\n                      \"Authentication failed\";\r\n        \r\n        // Try to parse the server message if it's a string that looks like JSON\r\n        if (typeof errorMessage === 'string' && errorMessage.startsWith('{')) {\r\n          try {\r\n            const parsedError = JSON.parse(errorMessage);\r\n            errorMessage = parsedError.message || errorMessage;\r\n          } catch (e) {\r\n            // If parsing fails, keep the original message\r\n          }\r\n        }\r\n      }\r\n      \r\n      throw new Error(errorMessage);\r\n    }\r\n  },\r\n\r\n  async logout({ commit, state }) {\r\n    try {\r\n      // Only try to logout if we have token\r\n      if (state.api_token) {\r\n        await axiosAuth.post(\"/api/method/logout\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Logout error:\", error);\r\n    } finally {\r\n      commit(\"LOGOUT\");\r\n    }\r\n  },\r\n\r\n  async verifyAuth({ state, commit }) {\r\n    if (!state.api_token || !state.api_secret) return false;\r\n    \r\n    try {\r\n      // Try to get user data using token auth\r\n      const response = await axiosAuth.get(\"/api/method/frappe.auth.get_logged_user\");\r\n      \r\n      if (response.data.message && response.data.message.name) {\r\n        // Update user data from fresh response\r\n        const updatedUser = {\r\n          ...state.user,\r\n          full_name: response.data.message.full_name || state.user.full_name,\r\n          user_image: response.data.message.user_image || state.user.user_image\r\n        };\r\n        \r\n        commit(\"UPDATE_USER\", updatedUser);\r\n        return true;\r\n      }\r\n      return false;\r\n    } catch (error) {\r\n      if (error.response && (error.response.status === 401 || error.response.status === 403)) {\r\n        commit(\"LOGOUT\");\r\n      }\r\n      return false;\r\n    }\r\n  },\r\n  \r\n  // New method to fetch user data at any time\r\n  async fetchUserData({ commit, state }) {\r\n    if (!state.api_token || !state.api_secret) return null;\r\n    \r\n    try {\r\n      const response = await axiosAuth.get(`/api/resource/User/${state.user.email}`);\r\n      const userData = response.data.data;\r\n      \r\n      const updatedUser = {\r\n        ...state.user,\r\n        full_name: userData.full_name,\r\n        user_image: userData.user_image,\r\n        roles: userData.roles\r\n      };\r\n      \r\n      commit(\"UPDATE_USER\", updatedUser);\r\n      return updatedUser;\r\n    } catch (error) {\r\n      console.error(\"Error fetching user data:\", error);\r\n      return null;\r\n    }\r\n  }\r\n};\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state,\r\n  getters,\r\n  mutations,\r\n  actions,\r\n};"],"mappings":"AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAcA,SAASA,SAAS,QAAQ,2BAA2B;AAErD,MAAMC,KAAK,GAAG;EACZC,IAAI,EAAEC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,IAAI;EACtDC,SAAS,EAAEF,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,IAAI,IAAI;EACpDE,UAAU,EAAEH,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,IAAI,IAAI;EACtDG,MAAM,EAAE,EAAE;EAAE;EACZC,SAAS,EAAEL,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,IAAI;AAClD,CAAC;AAED,M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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}