{"ast":null,"code":"// import axios from 'axios';\n// // axios.defaults.baseURL = 'http://45.79.209.137'\n// // axios.defaults.baseURL = 'http://160.153.175.147'\n// // axios.defaults.baseURL = 'http://127.0.0.1:8000'\n\n// axios.defaults.baseURL = 'http://138.199.220.5:8001'\n\n// const axiosAuth = axios.create({\n//   // baseURL:  \"http://45.79.209.137\",\n//   // baseURL:  \"http://160.153.175.147\",\n//   // baseURL:  \"http://127.0.0.1:8000\",\n//   baseURL:  'http://138.199.220.5:8001',\n\n//   headers: {\n//     'Content-Type': 'application/json',\n//   },\n// });\n\n// axiosAuth.interceptors.request.use(\n//   async (config) => {\n//   // Get the token from the store\n//   let accessToken = localStorage.getItem('token')\n//   if(accessToken){\n//     // print success messages in the console with green color using ANSI escape sequences\n//     config.headers[\"Authorization\"] = `Bearer ${accessToken}`;\n//     // config.headers[\"Authorization\"] = `Bearer ${accessToken}`;\n\n//   }\n//   return config;\n// },\n// (error) => {\n//   console.error(error);\n//   return Promise.reject(error);\n// }\n// );\n\n// axiosAuth.interceptors.response.use(\n//   (response) => {\n//     return response;\n//   },\n//   async (error) => {\n//     // Throw an error to cancel the request\n//     if (error.response && error.response.status === 500) {\n//         throw new Error('Internal Server Error');\n//     }\n//     // Check if the error is due to an expired token\n//     if (error.response.status === 401 && error.config && !error.config.__isRetryRequest) {\n//       // Set the __isRetryRequest flag to prevent an infinite loop\n//       error.config.__isRetryRequest = true;\n//       // Refresh the token\n//       // await refreshingToken();\n//       // Update the Authorization header with the new token\n//       let accessToken = localStorage.getItem('token')\n//       error.config.headers[\"Authorization\"] = `Bearer ${accessToken}`;\n//       // Retry the original request with the new token\n//       return axiosAuth(error.config);\n//     }\n//     return Promise.reject(error);\n//   }\n// );\n\n// export {axiosAuth};\n// // import axios from 'axios';\n\n// // axios.defaults.baseURL = 'http://138.199.220.5:8001';\n\n// // const axiosAuth = axios.create({\n// //   baseURL: 'http://138.199.220.5:8001',\n// //   headers: {\n// //     'Content-Type': 'application/json',\n// //   },\n// // });\n\n// // export {axiosAuth};\n\n// src/plugins/axios/axiosAuth.js\nimport axios from \"axios\";\n\n// Base configuration\nconst axiosAuth = axios.create({\n  baseURL: \"http://172.29.82.206:8000\",\n  // Your ERPNext instance\n  withCredentials: true,\n  headers: {\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\"\n  }\n});\n\n// Request interceptor\naxiosAuth.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"token\");\n  if (token) {\n    // ERPNext uses \"token {token}\" format for authorization\n    config.headers[\"Authorization\"] = `token ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor\naxiosAuth.interceptors.response.use(response => {\n  // Handle successful responses\n  return response;\n}, error => {\n  // Handle errors\n  if (error.response) {\n    switch (error.response.status) {\n      case 401:\n        // Clear auth data if unauthorized\n        localStorage.removeItem(\"token\");\n        localStorage.removeItem(\"user\");\n        break;\n      case 500:\n        error.message = \"Internal Server Error\";\n        break;\n    }\n  }\n  return Promise.reject(error);\n});\nexport { axiosAuth };","map":{"version":3,"names":["axios","axiosAuth","create","baseURL","withCredentials","headers","Accept","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject","response","status","removeItem","message"],"sources":["C:/Users/CITCPC3/Desktop/hadeer/erpnext-vue-front/src/plugins/axios/axiosAuth.js"],"sourcesContent":["// import axios from 'axios';\r\n// // axios.defaults.baseURL = 'http://45.79.209.137'\r\n// // axios.defaults.baseURL = 'http://160.153.175.147'\r\n// // axios.defaults.baseURL = 'http://127.0.0.1:8000'\r\n\r\n// axios.defaults.baseURL = 'http://138.199.220.5:8001'\r\n\r\n// const axiosAuth = axios.create({\r\n//   // baseURL:  \"http://45.79.209.137\",\r\n//   // baseURL:  \"http://160.153.175.147\",\r\n//   // baseURL:  \"http://127.0.0.1:8000\",\r\n//   baseURL:  'http://138.199.220.5:8001',\r\n\r\n//   headers: {\r\n//     'Content-Type': 'application/json',\r\n//   },\r\n// });\r\n\r\n// axiosAuth.interceptors.request.use(\r\n//   async (config) => {\r\n//   // Get the token from the store\r\n//   let accessToken = localStorage.getItem('token')\r\n//   if(accessToken){\r\n//     // print success messages in the console with green color using ANSI escape sequences\r\n//     config.headers[\"Authorization\"] = `Bearer ${accessToken}`;\r\n//     // config.headers[\"Authorization\"] = `Bearer ${accessToken}`;\r\n\r\n//   }\r\n//   return config;\r\n// },\r\n// (error) => {\r\n//   console.error(error);\r\n//   return Promise.reject(error);\r\n// }\r\n// );\r\n\r\n// axiosAuth.interceptors.response.use(\r\n//   (response) => {\r\n//     return response;\r\n//   },\r\n//   async (error) => {\r\n//     // Throw an error to cancel the request\r\n//     if (error.response && error.response.status === 500) {\r\n//         throw new Error('Internal Server Error');\r\n//     }\r\n//     // Check if the error is due to an expired token\r\n//     if (error.response.status === 401 && error.config && !error.config.__isRetryRequest) {\r\n//       // Set the __isRetryRequest flag to prevent an infinite loop\r\n//       error.config.__isRetryRequest = true;\r\n//       // Refresh the token\r\n//       // await refreshingToken();\r\n//       // Update the Authorization header with the new token\r\n//       let accessToken = localStorage.getItem('token')\r\n//       error.config.headers[\"Authorization\"] = `Bearer ${accessToken}`;\r\n//       // Retry the original request with the new token\r\n//       return axiosAuth(error.config);\r\n//     }\r\n//     return Promise.reject(error);\r\n//   }\r\n// );\r\n\r\n// export {axiosAuth};\r\n// // import axios from 'axios';\r\n\r\n// // axios.defaults.baseURL = 'http://138.199.220.5:8001';\r\n\r\n// // const axiosAuth = axios.create({\r\n// //   baseURL: 'http://138.199.220.5:8001',\r\n// //   headers: {\r\n// //     'Content-Type': 'application/json',\r\n// //   },\r\n// // });\r\n\r\n// // export {axiosAuth};\r\n\r\n// src/plugins/axios/axiosAuth.js\r\nimport axios from \"axios\";\r\n\r\n// Base configuration\r\nconst axiosAuth = axios.create({\r\n  baseURL: \"http://172.29.82.206:8000\", // Your ERPNext instance\r\n  withCredentials: true,\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n    Accept: \"application/json\",\r\n  },\r\n});\r\n\r\n// Request interceptor\r\naxiosAuth.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem(\"token\");\r\n    if (token) {\r\n      // ERPNext uses \"token {token}\" format for authorization\r\n      config.headers[\"Authorization\"] = `token ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor\r\naxiosAuth.interceptors.response.use(\r\n  (response) => {\r\n    // Handle successful responses\r\n    return response;\r\n  },\r\n  (error) => {\r\n    // Handle errors\r\n    if (error.response) {\r\n      switch (error.response.status) {\r\n        case 401:\r\n          // Clear auth data if unauthorized\r\n          localStorage.removeItem(\"token\");\r\n          localStorage.removeItem(\"user\");\r\n          break;\r\n        case 500:\r\n          error.message = \"Internal Server Error\";\r\n          break;\r\n      }\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport { axiosAuth };\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,SAAS,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC7BC,OAAO,EAAE,2BAA2B;EAAE;EACtCC,eAAe,EAAE,IAAI;EACrBC,OAAO,EAAE;IACP,cAAc,EAAE,kBAAkB;IAClCC,MAAM,EAAE;EACV;AACF,CAAC,CAAC;;AAEF;AACAL,SAAS,CAACM,YAAY,CAACC,OAAO,CAACC,GAAG,CAC/BC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACT;IACAD,MAAM,CAACL,OAAO,CAAC,eAAe,CAAC,GAAG,SAASM,KAAK,EAAE;EACpD;EACA,OAAOD,MAAM;AACf,CAAC,EACAI,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAb,SAAS,CAACM,YAAY,CAACU,QAAQ,CAACR,GAAG,CAChCQ,QAAQ,IAAK;EACZ;EACA,OAAOA,QAAQ;AACjB,CAAC,EACAH,KAAK,IAAK;EACT;EACA,IAAIA,KAAK,CAACG,QAAQ,EAAE;IAClB,QAAQH,KAAK,CAACG,QAAQ,CAACC,MAAM;MAC3B,KAAK,GAAG;QACN;QACAN,YAAY,CAACO,UAAU,CAAC,OAAO,CAAC;QAChCP,YAAY,CAACO,UAAU,CAAC,MAAM,CAAC;QAC/B;MACF,KAAK,GAAG;QACNL,KAAK,CAACM,OAAO,GAAG,uBAAuB;QACvC;IACJ;EACF;EACA,OAAOL,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,SAASb,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}