{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\n// import { axiosAuth } from \"@/plugins/axios/axiosAuth\";\n\n// const state = {\n//   token: localStorage.getItem(\"token\") || null,\n//   user: JSON.parse(localStorage.getItem(\"user\")) || null,\n//   status: \"\", // Can be 'loading', 'success', 'error'\n//   sid: localStorage.getItem(\"sid\") || null, // Store session ID\n//   home_page: localStorage.getItem(\"home_page\") || \"/app/home\",\n// };\n\n// const getters = {\n//   isAuthenticated: (state) => !!state.sid, // Now checking sid instead of token\n//   authStatus: (state) => state.status,\n//   currentUser: (state) => state.user,\n//   homePage: (state) => state.home_page,\n//   hasRole: (state) => (role) => state.user && state.user.role === role,\n// };\n\n// const mutations = {\n//   AUTH_REQUEST(state) {\n//     state.status = \"loading\";\n//   },\n//   AUTH_SUCCESS(state, { sid, user, home_page }) {\n//     state.status = \"success\";\n//     state.sid = sid;\n//     state.user = {\n//       email: user,\n//       full_name: state.full_name,\n//     };\n//     state.home_page = home_page;\n\n//     // Persist in localStorage\n//     localStorage.setItem(\"sid\", sid);\n//     localStorage.setItem(\"user\", JSON.stringify(state.user));\n//     localStorage.setItem(\"home_page\", home_page);\n//   },\n//   LOGOUT(state) {\n//     state.sid = null;\n//     state.user = null;\n//     state.home_page = \"/app/home\";\n//     localStorage.removeItem(\"sid\");\n//     localStorage.removeItem(\"user\");\n//     localStorage.removeItem(\"home_page\");\n//   },\n//   AUTH_ERROR(state) {\n//     state.status = \"error\";\n//     state.sid = null;\n//     state.user = null;\n//   },\n//   SET_FULL_NAME(state, full_name) {\n//     state.full_name = full_name;\n//     if (state.user) {\n//       state.user.full_name = full_name;\n//       localStorage.setItem(\"user\", JSON.stringify(state.user));\n//     }\n//   },\n// };\n\n// const actions = {\n//   async login({ commit }, credentials) {\n//     commit(\"AUTH_REQUEST\");\n\n//     try {\n//       const response = await axiosAuth.post(\"/api/method/my_app.custom_login\", {\n//         usr: credentials.email,\n//         pwd: credentials.password,\n//       });\n\n//       // Extract data from response\n//       const { message } = response.data;\n//       const { sid, user, full_name, home_page } = message;\n\n//       // Store session data\n//       commit(\"AUTH_SUCCESS\", { sid, user, home_page });\n//       commit(\"SET_FULL_NAME\", full_name);\n\n//       // Set CSRF token for subsequent requests\n//       axiosAuth.defaults.headers.common[\"X-Frappe-Sid\"] = sid;\n\n//       return response.data;\n//     } catch (error) {\n//       commit(\"AUTH_ERROR\");\n//       localStorage.removeItem(\"sid\");\n//       localStorage.removeItem(\"user\");\n//       delete axiosAuth.defaults.headers.common[\"X-Frappe-Sid\"];\n//       throw error;\n//     }\n//   },\n\n//   async logout({ commit }) {\n//     try {\n//       await axiosAuth.post(\"/api/method/frappe.auth.logout\");\n//     } finally {\n//       commit(\"LOGOUT\");\n//       localStorage.removeItem(\"sid\");\n//       localStorage.removeItem(\"user\");\n//       delete axiosAuth.defaults.headers.common[\"X-Frappe-Sid\"];\n//     }\n//   },\n\n//   checkAuth({ commit }) {\n//     const sid = localStorage.getItem(\"sid\");\n//     if (sid) {\n//       const user = JSON.parse(localStorage.getItem(\"user\"));\n//       axiosAuth.defaults.headers.common[\"X-Frappe-Sid\"] = sid;\n//       commit(\"AUTH_SUCCESS\", {\n//         sid,\n//         user: user.email,\n//         home_page: localStorage.getItem(\"home_page\"),\n//       });\n//       commit(\"SET_FULL_NAME\", user.full_name);\n//     }\n//   },\n\n//   // Optional: Refresh session\n//   async refreshSession({ state, commit }) {\n//     if (!state.sid) return;\n\n//     try {\n//       const response = await axiosAuth.get(\n//         \"/api/method/frappe.auth.get_logged_user\"\n//       );\n//       commit(\"SET_FULL_NAME\", response.data.message.full_name);\n//     } catch (error) {\n//       commit(\"LOGOUT\");\n//     }\n//   },\n// };\n\n// export default {\n//   namespaced: true,\n//   state,\n//   getters,\n//   mutations,\n//   actions,\n// };\n\nimport { axiosAuth } from \"@/plugins/axios/axiosAuth\";\nconst state = {\n  token: localStorage.getItem(\"token\") || null,\n  user: JSON.parse(localStorage.getItem(\"user\")) || null,\n  status: \"\",\n  // 'loading', 'success', 'error'\n  sid: localStorage.getItem(\"sid\") || null,\n  home_page: localStorage.getItem(\"home_page\") || \"/desk\",\n  full_name: localStorage.getItem(\"full_name\") || null\n};\nconst getters = {\n  isAuthenticated: state => !!state.sid,\n  authStatus: state => state.status,\n  currentUser: state => state.user,\n  homePage: state => state.home_page,\n  fullName: state => state.full_name,\n  hasRole: state => role => state.user && state.user.roles && state.user.roles.includes(role)\n};\nconst mutations = {\n  AUTH_REQUEST(state) {\n    state.status = \"loading\";\n  },\n  AUTH_SUCCESS(state, {\n    sid,\n    user,\n    home_page,\n    full_name\n  }) {\n    state.status = \"success\";\n    state.sid = sid;\n    state.user = {\n      email: user,\n      full_name: full_name,\n      roles: state.user?.roles || []\n    };\n    state.home_page = home_page;\n    state.full_name = full_name;\n\n    // Persist in localStorage\n    localStorage.setItem(\"sid\", sid);\n    localStorage.setItem(\"user\", JSON.stringify(state.user));\n    localStorage.setItem(\"home_page\", home_page);\n    localStorage.setItem(\"full_name\", full_name);\n  },\n  AUTH_ERROR(state) {\n    state.status = \"error\";\n    state.sid = null;\n    state.user = null;\n    state.full_name = null;\n    localStorage.removeItem(\"sid\");\n    localStorage.removeItem(\"user\");\n    localStorage.removeItem(\"home_page\");\n    localStorage.removeItem(\"full_name\");\n  },\n  LOGOUT(state) {\n    state.sid = null;\n    state.user = null;\n    state.home_page = \"/desk\";\n    state.full_name = null;\n    localStorage.removeItem(\"sid\");\n    localStorage.removeItem(\"user\");\n    localStorage.removeItem(\"home_page\");\n    localStorage.removeItem(\"full_name\");\n  },\n  SET_USER_ROLES(state, roles) {\n    if (state.user) {\n      state.user.roles = roles;\n      localStorage.setItem(\"user\", JSON.stringify(state.user));\n    }\n  }\n};\nconst actions = {\n  async login({\n    commit\n  }, credentials) {\n    commit(\"AUTH_REQUEST\");\n    try {\n      const response = await axiosAuth.post(\"/api/method/my_app.custom_login\", {\n        usr: credentials.email,\n        pwd: credentials.password\n      });\n      const {\n        message\n      } = response.data;\n      const {\n        sid,\n        user,\n        full_name,\n        home_page\n      } = message;\n\n      // Set critical cookies for Frappe desk\n      document.cookie = `sid=${sid}; path=/; ${process.env.NODE_ENV === \"production\" ? \"domain=.yourdomain.com; Secure; SameSite=Lax\" : \"\"}`;\n      document.cookie = `user_id=${user}; path=/; ${process.env.NODE_ENV === \"production\" ? \"domain=.yourdomain.com; Secure; SameSite=Lax\" : \"\"}`;\n      document.cookie = `full_name=${encodeURIComponent(full_name)}; path=/; ${process.env.NODE_ENV === \"production\" ? \"domain=.yourdomain.com; Secure; SameSite=Lax\" : \"\"}`;\n\n      // Configure axios for future requests\n      axiosAuth.defaults.headers.common[\"X-Frappe-Sid\"] = sid;\n      commit(\"AUTH_SUCCESS\", {\n        sid,\n        user,\n        home_page,\n        full_name\n      });\n\n      // Fetch user roles if needed\n      await this.dispatch(\"fetchUserRoles\");\n      return response.data;\n    } catch (error) {\n      commit(\"AUTH_ERROR\");\n      delete axiosAuth.defaults.headers.common[\"X-Frappe-Sid\"];\n      throw error;\n    }\n  },\n  async fetchUserRoles({\n    commit\n  }) {\n    try {\n      const response = await axiosAuth.get(\"/api/method/frappe.auth.get_logged_user\");\n      const roles = response.data.message.roles.map(r => r.role);\n      commit(\"SET_USER_ROLES\", roles);\n    } catch (error) {\n      console.error(\"Failed to fetch user roles:\", error);\n    }\n  },\n  async logout({\n    commit\n  }) {\n    try {\n      await axiosAuth.post(\"/api/method/frappe.auth.logout\");\n    } finally {\n      commit(\"LOGOUT\");\n      delete axiosAuth.defaults.headers.common[\"X-Frappe-Sid\"];\n\n      // Clear Frappe cookies\n      document.cookie = \"sid=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT\";\n      document.cookie = \"user_id=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT\";\n      document.cookie = \"full_name=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT\";\n    }\n  },\n  checkAuth({\n    commit,\n    state\n  }) {\n    const sid = localStorage.getItem(\"sid\");\n    if (sid) {\n      const user = JSON.parse(localStorage.getItem(\"user\"));\n      const full_name = localStorage.getItem(\"full_name\");\n      const home_page = localStorage.getItem(\"home_page\") || \"/desk\";\n      axiosAuth.defaults.headers.common[\"X-Frappe-Sid\"] = sid;\n      commit(\"AUTH_SUCCESS\", {\n        sid,\n        user: user?.email || \"\",\n        home_page,\n        full_name\n      });\n\n      // Verify session is still valid\n      this.dispatch(\"verifySession\");\n    }\n  },\n  async verifySession({\n    commit,\n    state\n  }) {\n    if (!state.sid) return;\n    try {\n      await axiosAuth.get(\"/api/method/frappe.auth.get_logged_user\");\n    } catch (error) {\n      commit(\"LOGOUT\");\n    }\n  }\n};\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  mutations,\n  actions\n};","map":{"version":3,"names":["axiosAuth","state","token","localStorage","getItem","user","JSON","parse","status","sid","home_page","full_name","getters","isAuthenticated","authStatus","currentUser","homePage","fullName","hasRole","role","roles","includes","mutations","AUTH_REQUEST","AUTH_SUCCESS","email","setItem","stringify","AUTH_ERROR","removeItem","LOGOUT","SET_USER_ROLES","actions","login","commit","credentials","response","post","usr","pwd","password","message","data","document","cookie","process","env","NODE_ENV","encodeURIComponent","defaults","headers","common","dispatch","error","fetchUserRoles","get","map","r","console","logout","checkAuth","verifySession","namespaced"],"sources":["C:/Users/CITCPC3/Desktop/hadeer/erpnext-vue-front/src/store/modules/auth/auth.js"],"sourcesContent":["// import { axiosAuth } from \"@/plugins/axios/axiosAuth\";\r\n\r\n// const state = {\r\n//   token: localStorage.getItem(\"token\") || null,\r\n//   user: JSON.parse(localStorage.getItem(\"user\")) || null,\r\n//   status: \"\", // Can be 'loading', 'success', 'error'\r\n//   sid: localStorage.getItem(\"sid\") || null, // Store session ID\r\n//   home_page: localStorage.getItem(\"home_page\") || \"/app/home\",\r\n// };\r\n\r\n// const getters = {\r\n//   isAuthenticated: (state) => !!state.sid, // Now checking sid instead of token\r\n//   authStatus: (state) => state.status,\r\n//   currentUser: (state) => state.user,\r\n//   homePage: (state) => state.home_page,\r\n//   hasRole: (state) => (role) => state.user && state.user.role === role,\r\n// };\r\n\r\n// const mutations = {\r\n//   AUTH_REQUEST(state) {\r\n//     state.status = \"loading\";\r\n//   },\r\n//   AUTH_SUCCESS(state, { sid, user, home_page }) {\r\n//     state.status = \"success\";\r\n//     state.sid = sid;\r\n//     state.user = {\r\n//       email: user,\r\n//       full_name: state.full_name,\r\n//     };\r\n//     state.home_page = home_page;\r\n\r\n//     // Persist in localStorage\r\n//     localStorage.setItem(\"sid\", sid);\r\n//     localStorage.setItem(\"user\", JSON.stringify(state.user));\r\n//     localStorage.setItem(\"home_page\", home_page);\r\n//   },\r\n//   LOGOUT(state) {\r\n//     state.sid = null;\r\n//     state.user = null;\r\n//     state.home_page = \"/app/home\";\r\n//     localStorage.removeItem(\"sid\");\r\n//     localStorage.removeItem(\"user\");\r\n//     localStorage.removeItem(\"home_page\");\r\n//   },\r\n//   AUTH_ERROR(state) {\r\n//     state.status = \"error\";\r\n//     state.sid = null;\r\n//     state.user = null;\r\n//   },\r\n//   SET_FULL_NAME(state, full_name) {\r\n//     state.full_name = full_name;\r\n//     if (state.user) {\r\n//       state.user.full_name = full_name;\r\n//       localStorage.setItem(\"user\", JSON.stringify(state.user));\r\n//     }\r\n//   },\r\n// };\r\n\r\n// const actions = {\r\n//   async login({ commit }, credentials) {\r\n//     commit(\"AUTH_REQUEST\");\r\n\r\n//     try {\r\n//       const response = await axiosAuth.post(\"/api/method/my_app.custom_login\", {\r\n//         usr: credentials.email,\r\n//         pwd: credentials.password,\r\n//       });\r\n\r\n//       // Extract data from response\r\n//       const { message } = response.data;\r\n//       const { sid, user, full_name, home_page } = message;\r\n\r\n//       // Store session data\r\n//       commit(\"AUTH_SUCCESS\", { sid, user, home_page });\r\n//       commit(\"SET_FULL_NAME\", full_name);\r\n\r\n//       // Set CSRF token for subsequent requests\r\n//       axiosAuth.defaults.headers.common[\"X-Frappe-Sid\"] = sid;\r\n\r\n//       return response.data;\r\n//     } catch (error) {\r\n//       commit(\"AUTH_ERROR\");\r\n//       localStorage.removeItem(\"sid\");\r\n//       localStorage.removeItem(\"user\");\r\n//       delete axiosAuth.defaults.headers.common[\"X-Frappe-Sid\"];\r\n//       throw error;\r\n//     }\r\n//   },\r\n\r\n//   async logout({ commit }) {\r\n//     try {\r\n//       await axiosAuth.post(\"/api/method/frappe.auth.logout\");\r\n//     } finally {\r\n//       commit(\"LOGOUT\");\r\n//       localStorage.removeItem(\"sid\");\r\n//       localStorage.removeItem(\"user\");\r\n//       delete axiosAuth.defaults.headers.common[\"X-Frappe-Sid\"];\r\n//     }\r\n//   },\r\n\r\n//   checkAuth({ commit }) {\r\n//     const sid = localStorage.getItem(\"sid\");\r\n//     if (sid) {\r\n//       const user = JSON.parse(localStorage.getItem(\"user\"));\r\n//       axiosAuth.defaults.headers.common[\"X-Frappe-Sid\"] = sid;\r\n//       commit(\"AUTH_SUCCESS\", {\r\n//         sid,\r\n//         user: user.email,\r\n//         home_page: localStorage.getItem(\"home_page\"),\r\n//       });\r\n//       commit(\"SET_FULL_NAME\", user.full_name);\r\n//     }\r\n//   },\r\n\r\n//   // Optional: Refresh session\r\n//   async refreshSession({ state, commit }) {\r\n//     if (!state.sid) return;\r\n\r\n//     try {\r\n//       const response = await axiosAuth.get(\r\n//         \"/api/method/frappe.auth.get_logged_user\"\r\n//       );\r\n//       commit(\"SET_FULL_NAME\", response.data.message.full_name);\r\n//     } catch (error) {\r\n//       commit(\"LOGOUT\");\r\n//     }\r\n//   },\r\n// };\r\n\r\n// export default {\r\n//   namespaced: true,\r\n//   state,\r\n//   getters,\r\n//   mutations,\r\n//   actions,\r\n// };\r\n\r\nimport { axiosAuth } from \"@/plugins/axios/axiosAuth\";\r\n\r\nconst state = {\r\n  token: localStorage.getItem(\"token\") || null,\r\n  user: JSON.parse(localStorage.getItem(\"user\")) || null,\r\n  status: \"\", // 'loading', 'success', 'error'\r\n  sid: localStorage.getItem(\"sid\") || null,\r\n  home_page: localStorage.getItem(\"home_page\") || \"/desk\",\r\n  full_name: localStorage.getItem(\"full_name\") || null,\r\n};\r\n\r\nconst getters = {\r\n  isAuthenticated: (state) => !!state.sid,\r\n  authStatus: (state) => state.status,\r\n  currentUser: (state) => state.user,\r\n  homePage: (state) => state.home_page,\r\n  fullName: (state) => state.full_name,\r\n  hasRole: (state) => (role) =>\r\n    state.user && state.user.roles && state.user.roles.includes(role),\r\n};\r\n\r\nconst mutations = {\r\n  AUTH_REQUEST(state) {\r\n    state.status = \"loading\";\r\n  },\r\n  AUTH_SUCCESS(state, { sid, user, home_page, full_name }) {\r\n    state.status = \"success\";\r\n    state.sid = sid;\r\n    state.user = {\r\n      email: user,\r\n      full_name: full_name,\r\n      roles: state.user?.roles || [],\r\n    };\r\n    state.home_page = home_page;\r\n    state.full_name = full_name;\r\n\r\n    // Persist in localStorage\r\n    localStorage.setItem(\"sid\", sid);\r\n    localStorage.setItem(\"user\", JSON.stringify(state.user));\r\n    localStorage.setItem(\"home_page\", home_page);\r\n    localStorage.setItem(\"full_name\", full_name);\r\n  },\r\n  AUTH_ERROR(state) {\r\n    state.status = \"error\";\r\n    state.sid = null;\r\n    state.user = null;\r\n    state.full_name = null;\r\n    localStorage.removeItem(\"sid\");\r\n    localStorage.removeItem(\"user\");\r\n    localStorage.removeItem(\"home_page\");\r\n    localStorage.removeItem(\"full_name\");\r\n  },\r\n  LOGOUT(state) {\r\n    state.sid = null;\r\n    state.user = null;\r\n    state.home_page = \"/desk\";\r\n    state.full_name = null;\r\n    localStorage.removeItem(\"sid\");\r\n    localStorage.removeItem(\"user\");\r\n    localStorage.removeItem(\"home_page\");\r\n    localStorage.removeItem(\"full_name\");\r\n  },\r\n  SET_USER_ROLES(state, roles) {\r\n    if (state.user) {\r\n      state.user.roles = roles;\r\n      localStorage.setItem(\"user\", JSON.stringify(state.user));\r\n    }\r\n  },\r\n};\r\n\r\nconst actions = {\r\n  async login({ commit }, credentials) {\r\n    commit(\"AUTH_REQUEST\");\r\n\r\n    try {\r\n      const response = await axiosAuth.post(\"/api/method/my_app.custom_login\", {\r\n        usr: credentials.email,\r\n        pwd: credentials.password,\r\n      });\r\n\r\n      const { message } = response.data;\r\n      const { sid, user, full_name, home_page } = message;\r\n\r\n      // Set critical cookies for Frappe desk\r\n      document.cookie = `sid=${sid}; path=/; ${\r\n        process.env.NODE_ENV === \"production\"\r\n          ? \"domain=.yourdomain.com; Secure; SameSite=Lax\"\r\n          : \"\"\r\n      }`;\r\n      document.cookie = `user_id=${user}; path=/; ${\r\n        process.env.NODE_ENV === \"production\"\r\n          ? \"domain=.yourdomain.com; Secure; SameSite=Lax\"\r\n          : \"\"\r\n      }`;\r\n      document.cookie = `full_name=${encodeURIComponent(full_name)}; path=/; ${\r\n        process.env.NODE_ENV === \"production\"\r\n          ? \"domain=.yourdomain.com; Secure; SameSite=Lax\"\r\n          : \"\"\r\n      }`;\r\n\r\n      // Configure axios for future requests\r\n      axiosAuth.defaults.headers.common[\"X-Frappe-Sid\"] = sid;\r\n\r\n      commit(\"AUTH_SUCCESS\", { sid, user, home_page, full_name });\r\n\r\n      // Fetch user roles if needed\r\n      await this.dispatch(\"fetchUserRoles\");\r\n\r\n      return response.data;\r\n    } catch (error) {\r\n      commit(\"AUTH_ERROR\");\r\n      delete axiosAuth.defaults.headers.common[\"X-Frappe-Sid\"];\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async fetchUserRoles({ commit }) {\r\n    try {\r\n      const response = await axiosAuth.get(\r\n        \"/api/method/frappe.auth.get_logged_user\"\r\n      );\r\n      const roles = response.data.message.roles.map((r) => r.role);\r\n      commit(\"SET_USER_ROLES\", roles);\r\n    } catch (error) {\r\n      console.error(\"Failed to fetch user roles:\", error);\r\n    }\r\n  },\r\n\r\n  async logout({ commit }) {\r\n    try {\r\n      await axiosAuth.post(\"/api/method/frappe.auth.logout\");\r\n    } finally {\r\n      commit(\"LOGOUT\");\r\n      delete axiosAuth.defaults.headers.common[\"X-Frappe-Sid\"];\r\n\r\n      // Clear Frappe cookies\r\n      document.cookie = \"sid=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT\";\r\n      document.cookie =\r\n        \"user_id=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT\";\r\n      document.cookie =\r\n        \"full_name=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT\";\r\n    }\r\n  },\r\n\r\n  checkAuth({ commit, state }) {\r\n    const sid = localStorage.getItem(\"sid\");\r\n    if (sid) {\r\n      const user = JSON.parse(localStorage.getItem(\"user\"));\r\n      const full_name = localStorage.getItem(\"full_name\");\r\n      const home_page = localStorage.getItem(\"home_page\") || \"/desk\";\r\n\r\n      axiosAuth.defaults.headers.common[\"X-Frappe-Sid\"] = sid;\r\n\r\n      commit(\"AUTH_SUCCESS\", {\r\n        sid,\r\n        user: user?.email || \"\",\r\n        home_page,\r\n        full_name,\r\n      });\r\n\r\n      // Verify session is still valid\r\n      this.dispatch(\"verifySession\");\r\n    }\r\n  },\r\n\r\n  async verifySession({ commit, state }) {\r\n    if (!state.sid) return;\r\n\r\n    try {\r\n      await axiosAuth.get(\"/api/method/frappe.auth.get_logged_user\");\r\n    } catch (error) {\r\n      commit(\"LOGOUT\");\r\n    }\r\n  },\r\n};\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state,\r\n  getters,\r\n  mutations,\r\n  actions,\r\n};\r\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,SAAS,QAAQ,2BAA2B;AAErD,MAAMC,KAAK,GAAG;EACZC,KAAK,EAAEC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,IAAI;EAC5CC,IAAI,EAAEC,IAAI,CAACC,KAAK,CAACJ,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,IAAI;EACtDI,MAAM,EAAE,EAAE;EAAE;EACZC,GAAG,EAAEN,YAAY,CAACC,OAAO,CAAC,KAAK,CAAC,IAAI,IAAI;EACxCM,SAAS,EAAEP,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,IAAI,OAAO;EACvDO,SAAS,EAAER,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,IAAI;AAClD,CAAC;AAED,MAAMQ,OAAO,GAAG;EACdC,eAAe,EAAGZ,KAAK,IAAK,CAAC,CAACA,KAAK,CAACQ,GAAG;EACvCK,UAAU,EAAGb,KAAK,IAAKA,KAAK,CAACO,MAAM;EACnCO,WAAW,EAAGd,KAAK,IAAKA,KAAK,CAACI,IAAI;EAClCW,QA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}