{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\n// import { axiosAuth } from \"@/plugins/axios/axiosAuth\";\n\n// const state = {\n//   user: JSON.parse(localStorage.getItem(\"user\")) || null,\n//   status: \"\", // 'loading', 'success', 'error'\n//   home_page: \"/app/home\", // Default home page\n// };\n\n// const getters = {\n//   isAuthenticated: (state) => !!state.user,\n//   authStatus: (state) => state.status,\n//   currentUser: (state) => state.user,\n//   homePage: (state) => state.home_page,\n//   fullName: (state) => state.user?.full_name || null,\n// };\n\n// const mutations = {\n//   AUTH_REQUEST(state) {\n//     state.status = \"loading\";\n//   },\n//   AUTH_SUCCESS(state, { full_name, home_page }) {\n//     state.status = \"success\";\n//     state.user = {\n//       full_name: full_name,\n//     };\n//     state.home_page = home_page || \"/app/home\";\n\n//     // Persist in localStorage\n//     localStorage.setItem(\"user\", JSON.stringify(state.user));\n//     localStorage.setItem(\"home_page\", state.home_page);\n//   },\n//   AUTH_ERROR(state) {\n//     state.status = \"error\";\n//     state.user = null;\n//     localStorage.removeItem(\"user\");\n//     localStorage.removeItem(\"home_page\");\n//   },\n//   LOGOUT(state) {\n//     state.user = null;\n//     state.home_page = \"/app/home\";\n//     localStorage.removeItem(\"user\");\n//     localStorage.removeItem(\"home_page\");\n//   },\n// };\n\n// const actions = {\n//   async login({ commit }, credentials) {\n//     commit(\"AUTH_REQUEST\");\n\n//     try {\n//       const response = await axiosAuth.post(\"/api/method/login\", {\n//         usr: credentials.email,\n//         pwd: credentials.password,\n//       });\n\n//       const { full_name, home_page } = response.data;\n\n//       commit(\"AUTH_SUCCESS\", { \n//         full_name, \n//         home_page: home_page || \"/app/home\" \n//       });\n\n//       return response.data;\n//     } catch (error) {\n//       commit(\"AUTH_ERROR\");\n//       throw error;\n//     }\n//   },\n\n//   async logout({ commit }) {\n//     try {\n//       await axiosAuth.post(\"/api/method/frappe.auth.logout\");\n//     } finally {\n//       commit(\"LOGOUT\");\n//     }\n//   },\n// };\n\n// export default {\n//   namespaced: true,\n//   state,\n//   getters,\n//   mutations,\n//   actions,\n// };\n\n// src/store/modules/auth.js\n// import { axiosAuth } from \"@/plugins/axios/axiosAuth\";\n\n// const state = {\n//   user: JSON.parse(localStorage.getItem(\"user\")) || null,\n//   token: localStorage.getItem(\"token\") || null,\n//   status: \"\", // 'loading', 'success', 'error'\n//   home_page: \"/app/home\", // Default home page\n// };\n\n// const getters = {\n//   isAuthenticated: (state) => !!state.token,\n//   authStatus: (state) => state.status,\n//   currentUser: (state) => state.user,\n//   homePage: (state) => state.home_page,\n//   fullName: (state) => state.user?.full_name || null,\n//   authToken: (state) => state.token,\n// };\n\n// const mutations = {\n//   AUTH_REQUEST(state) {\n//     state.status = \"loading\";\n//   },\n//   AUTH_SUCCESS(state, { user, token, home_page }) {\n//     state.status = \"success\";\n//     state.user = user;\n//     state.token = token;\n//     state.home_page = home_page || \"/app/home\";\n\n//     // Persist in localStorage\n//     localStorage.setItem(\"user\", JSON.stringify(user));\n//     localStorage.setItem(\"token\", token);\n//     localStorage.setItem(\"home_page\", state.home_page);\n//   },\n//   AUTH_ERROR(state) {\n//     state.status = \"error\";\n//     state.user = null;\n//     state.token = null;\n//     localStorage.removeItem(\"user\");\n//     localStorage.removeItem(\"token\");\n//     localStorage.removeItem(\"home_page\");\n//   },\n//   LOGOUT(state) {\n//     state.user = null;\n//     state.token = null;\n//     state.home_page = \"/app/home\";\n//     localStorage.removeItem(\"user\");\n//     localStorage.removeItem(\"token\");\n//     localStorage.removeItem(\"home_page\");\n//   },\n// };\n\n// const actions = {\n//   async login({ commit }, credentials) {\n//     commit(\"AUTH_REQUEST\");\n\n//     try {\n//       const response = await axiosAuth.post(\"/api/method/login\", {\n//         usr: credentials.email,\n//         pwd: credentials.password,\n//       });\n\n//       // ERPNext returns the full_name in the response\n//       const user = {\n//         full_name: response.data.full_name,\n//         email: credentials.email\n//       };\n\n//       // ERPNext returns the token in the response\n//       const token = response.data.token || response.data.api_key;\n\n//       commit(\"AUTH_SUCCESS\", { \n//         user,\n//         token,\n//         home_page: response.data.home_page || \"/app/home\" \n//       });\n\n//       return response.data;\n//     } catch (error) {\n//       commit(\"AUTH_ERROR\");\n//       throw error;\n//     }\n//   },\n\n//   async logout({ commit }) {\n//     try {\n//       await axiosAuth.post(\"/api/method/logout\");\n//     } catch (error) {\n//       console.error(\"Logout error:\", error);\n//     } finally {\n//       commit(\"LOGOUT\");\n//     }\n//   },\n\n//   async verifyToken({ state }) {\n//     if (!state.token) return false;\n\n//     try {\n//       const response = await axiosAuth.get(\"/api/method/frappe.auth.get_logged_user\");\n//       return !!response.data;\n//     } catch (error) {\n//       return false;\n//     }\n//   }\n// };\n\n// export default {\n//   namespaced: true,\n//   state,\n//   getters,\n//   mutations,\n//   actions,\n// };\n\n// src/store/modules/auth.js\nimport { axiosAuth } from \"@/plugins/axios/axiosAuth\";\nconst state = {\n  user: JSON.parse(localStorage.getItem(\"user\")) || null,\n  token: localStorage.getItem(\"token\") || null,\n  status: \"\",\n  // 'loading', 'success', 'error'\n  home_page: localStorage.getItem(\"home_page\") || \"/app/home\"\n};\nconst getters = {\n  isAuthenticated: state => !!state.token,\n  authStatus: state => state.status,\n  currentUser: state => state.user,\n  homePage: state => state.home_page,\n  fullName: state => state.user?.full_name || null,\n  authToken: state => state.token\n};\nconst mutations = {\n  AUTH_REQUEST(state) {\n    state.status = \"loading\";\n  },\n  AUTH_SUCCESS(state, {\n    user,\n    token,\n    home_page\n  }) {\n    state.status = \"success\";\n    state.user = user;\n    state.token = token;\n    state.home_page = home_page || \"/app/home\";\n\n    // Persist in localStorage\n    localStorage.setItem(\"user\", JSON.stringify(user));\n    localStorage.setItem(\"token\", token);\n    localStorage.setItem(\"home_page\", state.home_page);\n  },\n  AUTH_ERROR(state) {\n    state.status = \"error\";\n    state.user = null;\n    state.token = null;\n    localStorage.removeItem(\"user\");\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"home_page\");\n  },\n  LOGOUT(state) {\n    state.user = null;\n    state.token = null;\n    state.home_page = \"/app/home\";\n    localStorage.removeItem(\"user\");\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"home_page\");\n  }\n};\nconst actions = {\n  async login({\n    commit\n  }, credentials) {\n    commit(\"AUTH_REQUEST\");\n    try {\n      // First make login request\n      const response = await axiosAuth.post(\"/api/method/login\", {\n        usr: credentials.email,\n        pwd: credentials.password\n      });\n\n      // Get session ID from cookies (ERPNext uses cookie-based auth)\n      const sessionId = document.cookie.split('; ').find(row => row.startsWith('sid='))?.split('=')[1];\n      if (!sessionId) {\n        throw new Error(\"No session ID received from server\");\n      }\n\n      // Get user details\n      const userResponse = await axiosAuth.get(\"/api/method/frappe.auth.get_logged_user\");\n      const userData = userResponse.data.message;\n      const user = {\n        full_name: userData.full_name || credentials.email,\n        email: credentials.email,\n        user_image: userData.user_image\n      };\n      commit(\"AUTH_SUCCESS\", {\n        user,\n        token: sessionId,\n        // We're using the session ID as token\n        home_page: \"/app/home\" // Default home page\n      });\n      return userData;\n    } catch (error) {\n      commit(\"AUTH_ERROR\");\n\n      // Enhanced error handling for ERPNext\n      let errorMessage = \"Login failed\";\n      if (error.response) {\n        if (error.response.data && error.response.data.message) {\n          errorMessage = typeof error.response.data.message === 'string' ? error.response.data.message : error.response.data.message.error || errorMessage;\n        } else if (error.response.status === 401) {\n          errorMessage = \"Invalid email or password\";\n        }\n      }\n      throw new Error(errorMessage);\n    }\n  },\n  async logout({\n    commit\n  }) {\n    try {\n      await axiosAuth.post(\"/api/method/logout\");\n    } catch (error) {\n      console.error(\"Logout error:\", error);\n    } finally {\n      commit(\"LOGOUT\");\n    }\n  },\n  async verifyToken({\n    state,\n    dispatch\n  }) {\n    if (!state.token) return false;\n    try {\n      // Verify by fetching current user\n      const response = await axiosAuth.get(\"/api/method/frappe.auth.get_logged_user\");\n\n      // If we get a valid user response, session is active\n      if (response.data && response.data.message) {\n        // Update user data in case it changed\n        const userData = response.data.message;\n        const updatedUser = {\n          ...state.user,\n          full_name: userData.full_name || state.user.full_name,\n          user_image: userData.user_image || state.user.user_image\n        };\n        localStorage.setItem(\"user\", JSON.stringify(updatedUser));\n        return true;\n      }\n      return false;\n    } catch (error) {\n      // If verification fails, clear auth state\n      if (error.response && error.response.status === 401) {\n        await dispatch('logout');\n      }\n      return false;\n    }\n  }\n};\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  mutations,\n  actions\n};","map":{"version":3,"names":["axiosAuth","state","user","JSON","parse","localStorage","getItem","token","status","home_page","getters","isAuthenticated","authStatus","currentUser","homePage","fullName","full_name","authToken","mutations","AUTH_REQUEST","AUTH_SUCCESS","setItem","stringify","AUTH_ERROR","removeItem","LOGOUT","actions","login","commit","credentials","response","post","usr","email","pwd","password","sessionId","document","cookie","split","find","row","startsWith","Error","userResponse","get","userData","data","message","user_image","error","errorMessage","logout","console","verifyToken","dispatch","updatedUser","namespaced"],"sources":["D:/hadeerwork/erpnext-vue-front/src/store/modules/auth/auth.js"],"sourcesContent":["\r\n// import { axiosAuth } from \"@/plugins/axios/axiosAuth\";\r\n\r\n// const state = {\r\n//   user: JSON.parse(localStorage.getItem(\"user\")) || null,\r\n//   status: \"\", // 'loading', 'success', 'error'\r\n//   home_page: \"/app/home\", // Default home page\r\n// };\r\n\r\n// const getters = {\r\n//   isAuthenticated: (state) => !!state.user,\r\n//   authStatus: (state) => state.status,\r\n//   currentUser: (state) => state.user,\r\n//   homePage: (state) => state.home_page,\r\n//   fullName: (state) => state.user?.full_name || null,\r\n// };\r\n\r\n// const mutations = {\r\n//   AUTH_REQUEST(state) {\r\n//     state.status = \"loading\";\r\n//   },\r\n//   AUTH_SUCCESS(state, { full_name, home_page }) {\r\n//     state.status = \"success\";\r\n//     state.user = {\r\n//       full_name: full_name,\r\n//     };\r\n//     state.home_page = home_page || \"/app/home\";\r\n\r\n//     // Persist in localStorage\r\n//     localStorage.setItem(\"user\", JSON.stringify(state.user));\r\n//     localStorage.setItem(\"home_page\", state.home_page);\r\n//   },\r\n//   AUTH_ERROR(state) {\r\n//     state.status = \"error\";\r\n//     state.user = null;\r\n//     localStorage.removeItem(\"user\");\r\n//     localStorage.removeItem(\"home_page\");\r\n//   },\r\n//   LOGOUT(state) {\r\n//     state.user = null;\r\n//     state.home_page = \"/app/home\";\r\n//     localStorage.removeItem(\"user\");\r\n//     localStorage.removeItem(\"home_page\");\r\n//   },\r\n// };\r\n\r\n// const actions = {\r\n//   async login({ commit }, credentials) {\r\n//     commit(\"AUTH_REQUEST\");\r\n\r\n//     try {\r\n//       const response = await axiosAuth.post(\"/api/method/login\", {\r\n//         usr: credentials.email,\r\n//         pwd: credentials.password,\r\n//       });\r\n\r\n//       const { full_name, home_page } = response.data;\r\n\r\n//       commit(\"AUTH_SUCCESS\", { \r\n//         full_name, \r\n//         home_page: home_page || \"/app/home\" \r\n//       });\r\n\r\n//       return response.data;\r\n//     } catch (error) {\r\n//       commit(\"AUTH_ERROR\");\r\n//       throw error;\r\n//     }\r\n//   },\r\n\r\n//   async logout({ commit }) {\r\n//     try {\r\n//       await axiosAuth.post(\"/api/method/frappe.auth.logout\");\r\n//     } finally {\r\n//       commit(\"LOGOUT\");\r\n//     }\r\n//   },\r\n// };\r\n\r\n// export default {\r\n//   namespaced: true,\r\n//   state,\r\n//   getters,\r\n//   mutations,\r\n//   actions,\r\n// };\r\n\r\n\r\n// src/store/modules/auth.js\r\n// import { axiosAuth } from \"@/plugins/axios/axiosAuth\";\r\n\r\n// const state = {\r\n//   user: JSON.parse(localStorage.getItem(\"user\")) || null,\r\n//   token: localStorage.getItem(\"token\") || null,\r\n//   status: \"\", // 'loading', 'success', 'error'\r\n//   home_page: \"/app/home\", // Default home page\r\n// };\r\n\r\n// const getters = {\r\n//   isAuthenticated: (state) => !!state.token,\r\n//   authStatus: (state) => state.status,\r\n//   currentUser: (state) => state.user,\r\n//   homePage: (state) => state.home_page,\r\n//   fullName: (state) => state.user?.full_name || null,\r\n//   authToken: (state) => state.token,\r\n// };\r\n\r\n// const mutations = {\r\n//   AUTH_REQUEST(state) {\r\n//     state.status = \"loading\";\r\n//   },\r\n//   AUTH_SUCCESS(state, { user, token, home_page }) {\r\n//     state.status = \"success\";\r\n//     state.user = user;\r\n//     state.token = token;\r\n//     state.home_page = home_page || \"/app/home\";\r\n\r\n//     // Persist in localStorage\r\n//     localStorage.setItem(\"user\", JSON.stringify(user));\r\n//     localStorage.setItem(\"token\", token);\r\n//     localStorage.setItem(\"home_page\", state.home_page);\r\n//   },\r\n//   AUTH_ERROR(state) {\r\n//     state.status = \"error\";\r\n//     state.user = null;\r\n//     state.token = null;\r\n//     localStorage.removeItem(\"user\");\r\n//     localStorage.removeItem(\"token\");\r\n//     localStorage.removeItem(\"home_page\");\r\n//   },\r\n//   LOGOUT(state) {\r\n//     state.user = null;\r\n//     state.token = null;\r\n//     state.home_page = \"/app/home\";\r\n//     localStorage.removeItem(\"user\");\r\n//     localStorage.removeItem(\"token\");\r\n//     localStorage.removeItem(\"home_page\");\r\n//   },\r\n// };\r\n\r\n// const actions = {\r\n//   async login({ commit }, credentials) {\r\n//     commit(\"AUTH_REQUEST\");\r\n\r\n//     try {\r\n//       const response = await axiosAuth.post(\"/api/method/login\", {\r\n//         usr: credentials.email,\r\n//         pwd: credentials.password,\r\n//       });\r\n\r\n//       // ERPNext returns the full_name in the response\r\n//       const user = {\r\n//         full_name: response.data.full_name,\r\n//         email: credentials.email\r\n//       };\r\n\r\n//       // ERPNext returns the token in the response\r\n//       const token = response.data.token || response.data.api_key;\r\n\r\n//       commit(\"AUTH_SUCCESS\", { \r\n//         user,\r\n//         token,\r\n//         home_page: response.data.home_page || \"/app/home\" \r\n//       });\r\n\r\n//       return response.data;\r\n//     } catch (error) {\r\n//       commit(\"AUTH_ERROR\");\r\n//       throw error;\r\n//     }\r\n//   },\r\n\r\n//   async logout({ commit }) {\r\n//     try {\r\n//       await axiosAuth.post(\"/api/method/logout\");\r\n//     } catch (error) {\r\n//       console.error(\"Logout error:\", error);\r\n//     } finally {\r\n//       commit(\"LOGOUT\");\r\n//     }\r\n//   },\r\n\r\n//   async verifyToken({ state }) {\r\n//     if (!state.token) return false;\r\n    \r\n//     try {\r\n//       const response = await axiosAuth.get(\"/api/method/frappe.auth.get_logged_user\");\r\n//       return !!response.data;\r\n//     } catch (error) {\r\n//       return false;\r\n//     }\r\n//   }\r\n// };\r\n\r\n// export default {\r\n//   namespaced: true,\r\n//   state,\r\n//   getters,\r\n//   mutations,\r\n//   actions,\r\n// };\r\n\r\n\r\n// src/store/modules/auth.js\r\nimport { axiosAuth } from \"@/plugins/axios/axiosAuth\";\r\n\r\nconst state = {\r\n  user: JSON.parse(localStorage.getItem(\"user\")) || null,\r\n  token: localStorage.getItem(\"token\") || null,\r\n  status: \"\", // 'loading', 'success', 'error'\r\n  home_page: localStorage.getItem(\"home_page\") || \"/app/home\",\r\n};\r\n\r\nconst getters = {\r\n  isAuthenticated: (state) => !!state.token,\r\n  authStatus: (state) => state.status,\r\n  currentUser: (state) => state.user,\r\n  homePage: (state) => state.home_page,\r\n  fullName: (state) => state.user?.full_name || null,\r\n  authToken: (state) => state.token,\r\n};\r\n\r\nconst mutations = {\r\n  AUTH_REQUEST(state) {\r\n    state.status = \"loading\";\r\n  },\r\n  AUTH_SUCCESS(state, { user, token, home_page }) {\r\n    state.status = \"success\";\r\n    state.user = user;\r\n    state.token = token;\r\n    state.home_page = home_page || \"/app/home\";\r\n\r\n    // Persist in localStorage\r\n    localStorage.setItem(\"user\", JSON.stringify(user));\r\n    localStorage.setItem(\"token\", token);\r\n    localStorage.setItem(\"home_page\", state.home_page);\r\n  },\r\n  AUTH_ERROR(state) {\r\n    state.status = \"error\";\r\n    state.user = null;\r\n    state.token = null;\r\n    localStorage.removeItem(\"user\");\r\n    localStorage.removeItem(\"token\");\r\n    localStorage.removeItem(\"home_page\");\r\n  },\r\n  LOGOUT(state) {\r\n    state.user = null;\r\n    state.token = null;\r\n    state.home_page = \"/app/home\";\r\n    localStorage.removeItem(\"user\");\r\n    localStorage.removeItem(\"token\");\r\n    localStorage.removeItem(\"home_page\");\r\n  },\r\n};\r\n\r\nconst actions = {\r\n  async login({ commit }, credentials) {\r\n    commit(\"AUTH_REQUEST\");\r\n\r\n    try {\r\n      // First make login request\r\n      const response = await axiosAuth.post(\"/api/method/login\", {\r\n        usr: credentials.email,\r\n        pwd: credentials.password,\r\n      });\r\n\r\n      // Get session ID from cookies (ERPNext uses cookie-based auth)\r\n      const sessionId = document.cookie\r\n        .split('; ')\r\n        .find(row => row.startsWith('sid='))\r\n        ?.split('=')[1];\r\n\r\n      if (!sessionId) {\r\n        throw new Error(\"No session ID received from server\");\r\n      }\r\n\r\n      // Get user details\r\n      const userResponse = await axiosAuth.get(\"/api/method/frappe.auth.get_logged_user\");\r\n      const userData = userResponse.data.message;\r\n\r\n      const user = {\r\n        full_name: userData.full_name || credentials.email,\r\n        email: credentials.email,\r\n        user_image: userData.user_image\r\n      };\r\n\r\n      commit(\"AUTH_SUCCESS\", {\r\n        user,\r\n        token: sessionId, // We're using the session ID as token\r\n        home_page: \"/app/home\" // Default home page\r\n      });\r\n\r\n      return userData;\r\n    } catch (error) {\r\n      commit(\"AUTH_ERROR\");\r\n      \r\n      // Enhanced error handling for ERPNext\r\n      let errorMessage = \"Login failed\";\r\n      if (error.response) {\r\n        if (error.response.data && error.response.data.message) {\r\n          errorMessage = typeof error.response.data.message === 'string' \r\n            ? error.response.data.message\r\n            : error.response.data.message.error || errorMessage;\r\n        } else if (error.response.status === 401) {\r\n          errorMessage = \"Invalid email or password\";\r\n        }\r\n      }\r\n      \r\n      throw new Error(errorMessage);\r\n    }\r\n  },\r\n\r\n  async logout({ commit }) {\r\n    try {\r\n      await axiosAuth.post(\"/api/method/logout\");\r\n    } catch (error) {\r\n      console.error(\"Logout error:\", error);\r\n    } finally {\r\n      commit(\"LOGOUT\");\r\n    }\r\n  },\r\n\r\n  async verifyToken({ state, dispatch }) {\r\n    if (!state.token) return false;\r\n    \r\n    try {\r\n      // Verify by fetching current user\r\n      const response = await axiosAuth.get(\"/api/method/frappe.auth.get_logged_user\");\r\n      \r\n      // If we get a valid user response, session is active\r\n      if (response.data && response.data.message) {\r\n        // Update user data in case it changed\r\n        const userData = response.data.message;\r\n        const updatedUser = {\r\n          ...state.user,\r\n          full_name: userData.full_name || state.user.full_name,\r\n          user_image: userData.user_image || state.user.user_image\r\n        };\r\n        \r\n        localStorage.setItem(\"user\", JSON.stringify(updatedUser));\r\n        return true;\r\n      }\r\n      return false;\r\n    } catch (error) {\r\n      // If verification fails, clear auth state\r\n      if (error.response && error.response.status === 401) {\r\n        await dispatch('logout');\r\n      }\r\n      return false;\r\n    }\r\n  }\r\n};\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state,\r\n  getters,\r\n  mutations,\r\n  actions,\r\n};"],"mappings":";;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA,SAASA,SAAS,QAAQ,2BAA2B;AAErD,MAAMC,KAAK,GAAG;EACZC,IAAI,EAAEC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,IAAI;EACtDC,KAAK,EAAEF,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,IAAI;EAC5CE,MAAM,EAAE,EAAE;EAAE;EACZC,SAAS,EAAEJ,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,IAAI;AAClD,CAAC;AAED,MAAMI,OAAO,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}