{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\n// import axios from 'axios';\n// // axios.defaults.baseURL = 'http://45.79.209.137'\n// // axios.defaults.baseURL = 'http://160.153.175.147'\n// // axios.defaults.baseURL = 'http://127.0.0.1:8000'\n\n// axios.defaults.baseURL = 'http://138.199.220.5:8001'\n\n// const axiosAuth = axios.create({\n//   // baseURL:  \"http://45.79.209.137\",\n//   // baseURL:  \"http://160.153.175.147\",\n//   // baseURL:  \"http://127.0.0.1:8000\",\n//   baseURL:  'http://138.199.220.5:8001',\n\n//   headers: {\n//     'Content-Type': 'application/json',\n//   },\n// });\n\n// axiosAuth.interceptors.request.use(\n//   async (config) => {\n//   // Get the token from the store\n//   let accessToken = localStorage.getItem('token')\n//   if(accessToken){\n//     // print success messages in the console with green color using ANSI escape sequences\n//     config.headers[\"Authorization\"] = `Bearer ${accessToken}`;\n//     // config.headers[\"Authorization\"] = `Bearer ${accessToken}`;\n\n//   }\n//   return config;\n// },\n// (error) => {\n//   console.error(error);\n//   return Promise.reject(error);\n// }\n// );\n\n// axiosAuth.interceptors.response.use(\n//   (response) => {\n//     return response;\n//   },\n//   async (error) => {\n//     // Throw an error to cancel the request\n//     if (error.response && error.response.status === 500) {\n//         throw new Error('Internal Server Error');\n//     } \n//     // Check if the error is due to an expired token\n//     if (error.response.status === 401 && error.config && !error.config.__isRetryRequest) {\n//       // Set the __isRetryRequest flag to prevent an infinite loop\n//       error.config.__isRetryRequest = true;\n//       // Refresh the token\n//       // await refreshingToken();\n//       // Update the Authorization header with the new token\n//       let accessToken = localStorage.getItem('token')\n//       error.config.headers[\"Authorization\"] = `Bearer ${accessToken}`;\n//       // Retry the original request with the new token\n//       return axiosAuth(error.config);\n//     }\n//     return Promise.reject(error);\n//   }\n// );\n\n// export {axiosAuth};\n// // import axios from 'axios';\n\n// // axios.defaults.baseURL = 'http://138.199.220.5:8001';\n\n// // const axiosAuth = axios.create({\n// //   baseURL: 'http://138.199.220.5:8001',\n// //   headers: {\n// //     'Content-Type': 'application/json',\n// //   },\n// // });\n\n// // export {axiosAuth};\n\n// // src/plugins/axios/axiosAuth.js\n// import axios from 'axios';\n\n// // Base configuration\n// const axiosAuth = axios.create({\n//   baseURL: 'http://138.199.220.5:8001', // Your ERPNext instance\n//     withCredentials: true,\n//   headers: {\n//     'Content-Type': 'application/json',\n//     'Accept': 'application/json'\n//   }\n// });\n\n// // Request interceptor\n// axiosAuth.interceptors.request.use(\n//   (config) => {\n//     const token = localStorage.getItem('token');\n//     if (token) {\n//       // ERPNext uses \"token {token}\" format for authorization\n//       config.headers['Authorization'] = `token ${token}`;\n//     }\n//     return config;\n//   },\n//   (error) => {\n//     return Promise.reject(error);\n//   }\n// );\n\n// // Response interceptor\n// axiosAuth.interceptors.response.use(\n//   (response) => {\n//     // Handle successful responses\n//     return response;\n//   },\n//   (error) => {\n//     // Handle errors\n//     if (error.response) {\n//       switch (error.response.status) {\n//         case 401:\n//           // Clear auth data if unauthorized\n//           localStorage.removeItem('token');\n//           localStorage.removeItem('user');\n//           break;\n//         case 500:\n//           error.message = 'Internal Server Error';\n//           break;\n//       }\n//     }\n//     return Promise.reject(error);\n//   }\n// );\n\n// export { axiosAuth };\n\n// src/plugins/axios/axiosAuth.js\nimport axios from 'axios';\nconst axiosAuth = axios.create({\n  baseURL: 'http://138.199.220.5:8001',\n  withCredentials: true,\n  // This is crucial for cookie-based auth\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  }\n});\n\n// Add CSRF token handling\naxiosAuth.interceptors.request.use(config => {\n  const csrfToken = document.cookie.split('; ').find(row => row.startsWith('csrf_token='))?.split('=')[1];\n  if (csrfToken) {\n    config.headers['X-Frappe-CSRF-Token'] = csrfToken;\n  }\n  return config;\n});\nexport { axiosAuth };","map":{"version":3,"names":["axios","axiosAuth","create","baseURL","withCredentials","headers","interceptors","request","use","config","csrfToken","document","cookie","split","find","row","startsWith"],"sources":["D:/hadeerwork/erpnext-vue-front/src/plugins/axios/axiosAuth.js"],"sourcesContent":["// import axios from 'axios';\r\n// // axios.defaults.baseURL = 'http://45.79.209.137'\r\n// // axios.defaults.baseURL = 'http://160.153.175.147'\r\n// // axios.defaults.baseURL = 'http://127.0.0.1:8000'\r\n\r\n// axios.defaults.baseURL = 'http://138.199.220.5:8001'\r\n\r\n// const axiosAuth = axios.create({\r\n//   // baseURL:  \"http://45.79.209.137\",\r\n//   // baseURL:  \"http://160.153.175.147\",\r\n//   // baseURL:  \"http://127.0.0.1:8000\",\r\n//   baseURL:  'http://138.199.220.5:8001',\r\n  \r\n\r\n//   headers: {\r\n//     'Content-Type': 'application/json',\r\n//   },\r\n// });\r\n        \r\n        \r\n// axiosAuth.interceptors.request.use(\r\n//   async (config) => {\r\n//   // Get the token from the store\r\n//   let accessToken = localStorage.getItem('token')\r\n//   if(accessToken){\r\n//     // print success messages in the console with green color using ANSI escape sequences\r\n//     config.headers[\"Authorization\"] = `Bearer ${accessToken}`;\r\n//     // config.headers[\"Authorization\"] = `Bearer ${accessToken}`;\r\n\r\n//   }\r\n//   return config;\r\n// },\r\n// (error) => {\r\n//   console.error(error);\r\n//   return Promise.reject(error);\r\n// }\r\n// );\r\n\r\n// axiosAuth.interceptors.response.use(\r\n//   (response) => {\r\n//     return response;\r\n//   },\r\n//   async (error) => {\r\n//     // Throw an error to cancel the request\r\n//     if (error.response && error.response.status === 500) {\r\n//         throw new Error('Internal Server Error');\r\n//     } \r\n//     // Check if the error is due to an expired token\r\n//     if (error.response.status === 401 && error.config && !error.config.__isRetryRequest) {\r\n//       // Set the __isRetryRequest flag to prevent an infinite loop\r\n//       error.config.__isRetryRequest = true;\r\n//       // Refresh the token\r\n//       // await refreshingToken();\r\n//       // Update the Authorization header with the new token\r\n//       let accessToken = localStorage.getItem('token')\r\n//       error.config.headers[\"Authorization\"] = `Bearer ${accessToken}`;\r\n//       // Retry the original request with the new token\r\n//       return axiosAuth(error.config);\r\n//     }\r\n//     return Promise.reject(error);\r\n//   }\r\n// );\r\n\r\n// export {axiosAuth};\r\n// // import axios from 'axios';\r\n\r\n// // axios.defaults.baseURL = 'http://138.199.220.5:8001';\r\n\r\n// // const axiosAuth = axios.create({\r\n// //   baseURL: 'http://138.199.220.5:8001',\r\n// //   headers: {\r\n// //     'Content-Type': 'application/json',\r\n// //   },\r\n// // });\r\n\r\n\r\n// // export {axiosAuth};\r\n\r\n// // src/plugins/axios/axiosAuth.js\r\n// import axios from 'axios';\r\n\r\n// // Base configuration\r\n// const axiosAuth = axios.create({\r\n//   baseURL: 'http://138.199.220.5:8001', // Your ERPNext instance\r\n//     withCredentials: true,\r\n//   headers: {\r\n//     'Content-Type': 'application/json',\r\n//     'Accept': 'application/json'\r\n//   }\r\n// });\r\n\r\n// // Request interceptor\r\n// axiosAuth.interceptors.request.use(\r\n//   (config) => {\r\n//     const token = localStorage.getItem('token');\r\n//     if (token) {\r\n//       // ERPNext uses \"token {token}\" format for authorization\r\n//       config.headers['Authorization'] = `token ${token}`;\r\n//     }\r\n//     return config;\r\n//   },\r\n//   (error) => {\r\n//     return Promise.reject(error);\r\n//   }\r\n// );\r\n\r\n// // Response interceptor\r\n// axiosAuth.interceptors.response.use(\r\n//   (response) => {\r\n//     // Handle successful responses\r\n//     return response;\r\n//   },\r\n//   (error) => {\r\n//     // Handle errors\r\n//     if (error.response) {\r\n//       switch (error.response.status) {\r\n//         case 401:\r\n//           // Clear auth data if unauthorized\r\n//           localStorage.removeItem('token');\r\n//           localStorage.removeItem('user');\r\n//           break;\r\n//         case 500:\r\n//           error.message = 'Internal Server Error';\r\n//           break;\r\n//       }\r\n//     }\r\n//     return Promise.reject(error);\r\n//   }\r\n// );\r\n\r\n// export { axiosAuth };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// src/plugins/axios/axiosAuth.js\r\nimport axios from 'axios';\r\n\r\nconst axiosAuth = axios.create({\r\n  baseURL: 'http://138.199.220.5:8001',\r\n  withCredentials: true, // This is crucial for cookie-based auth\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    'Accept': 'application/json'\r\n  }\r\n});\r\n\r\n// Add CSRF token handling\r\naxiosAuth.interceptors.request.use(config => {\r\n  const csrfToken = document.cookie\r\n    .split('; ')\r\n    .find(row => row.startsWith('csrf_token='))\r\n    ?.split('=')[1];\r\n  \r\n  if (csrfToken) {\r\n    config.headers['X-Frappe-CSRF-Token'] = csrfToken;\r\n  }\r\n  return config;\r\n});\r\n\r\nexport { axiosAuth };"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AASA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,SAAS,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC7BC,OAAO,EAAE,2BAA2B;EACpCC,eAAe,EAAE,IAAI;EAAE;EACvBC,OAAO,EAAE;IACP,cAAc,EAAE,kBAAkB;IAClC,QAAQ,EAAE;EACZ;AACF,CAAC,CAAC;;AAEF;AACAJ,SAAS,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAACC,MAAM,IAAI;EAC3C,MAAMC,SAAS,GAAGC,QAAQ,CAACC,MAAM,CAC9BC,KAAK,CAAC,IAAI,CAAC,CACXC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,UAAU,CAAC,aAAa,CAAC,CAAC,EACzCH,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAEjB,IAAIH,SAAS,EAAE;IACbD,MAAM,CAACJ,OAAO,CAAC,qBAAqB,CAAC,GAAGK,SAAS;EACnD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;AAEF,SAASR,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}