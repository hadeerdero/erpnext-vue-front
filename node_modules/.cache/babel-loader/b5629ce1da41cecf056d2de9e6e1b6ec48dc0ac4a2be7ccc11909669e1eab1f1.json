{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"dashboard\"\n};\nconst _hoisted_2 = {\n  class: \"dashboard-header\"\n};\nconst _hoisted_3 = {\n  class: \"dashboard-widgets\"\n};\nconst _hoisted_4 = {\n  class: \"widget-row\"\n};\nconst _hoisted_5 = {\n  class: \"widget-row\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_DashboardCard = _resolveComponent(\"DashboardCard\");\n  const _component_RecentActivity = _resolveComponent(\"RecentActivity\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"h1\", null, \"Welcome, \" + _toDisplayString($options.userName) + \"!\", 1 /* TEXT */), _createElementVNode(\"p\", null, \"Last login: \" + _toDisplayString($options.lastLogin), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_3, [_createCommentVNode(\" Summary Cards \"), _createElementVNode(\"div\", _hoisted_4, [_createVNode(_component_DashboardCard, {\n    title: \"Total Sales\",\n    value: $data.salesData.total,\n    icon: \"dollar-sign\",\n    trend: $data.salesData.trend\n  }, null, 8 /* PROPS */, [\"value\", \"trend\"]), _createVNode(_component_DashboardCard, {\n    title: \"New Customers\",\n    value: $data.customerData.new,\n    icon: \"users\",\n    trend: $data.customerData.trend\n  }, null, 8 /* PROPS */, [\"value\", \"trend\"]), _createVNode(_component_DashboardCard, {\n    title: \"Pending Orders\",\n    value: $data.orderData.pending,\n    icon: \"shopping-cart\",\n    trend: $data.orderData.trend\n  }, null, 8 /* PROPS */, [\"value\", \"trend\"])]), _createCommentVNode(\" Charts Section \"), _createCommentVNode(\" <div class=\\\"widget-row\\\">\\r\\n        <div class=\\\"chart-container\\\">\\r\\n          <LineChart :data=\\\"salesChartData\\\" title=\\\"Sales Trend\\\" />\\r\\n        </div>\\r\\n        <div class=\\\"chart-container\\\">\\r\\n          <BarChart :data=\\\"customerChartData\\\" title=\\\"Customer Growth\\\" />\\r\\n        </div>\\r\\n      </div> \"), _createCommentVNode(\" Recent Activity \"), _createElementVNode(\"div\", _hoisted_5, [_createVNode(_component_RecentActivity, {\n    items: $data.recentActivities\n  }, null, 8 /* PROPS */, [\"items\"])])])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_toDisplayString","$options","userName","lastLogin","_hoisted_3","_createCommentVNode","_hoisted_4","_createVNode","_component_DashboardCard","title","value","$data","salesData","total","icon","trend","customerData","new","orderData","pending","_hoisted_5","_component_RecentActivity","items","recentActivities"],"sources":["D:\\hadeerwork\\erpnext-vue-front\\src\\views\\DashboardView.vue"],"sourcesContent":["<template>\r\n  <div class=\"dashboard\">\r\n    <div class=\"dashboard-header\">\r\n      <h1>Welcome, {{ userName }}!</h1>\r\n      <p>Last login: {{ lastLogin }}</p>\r\n    </div>\r\n\r\n    <div class=\"dashboard-widgets\">\r\n      <!-- Summary Cards -->\r\n      <div class=\"widget-row\">\r\n        <DashboardCard \r\n          title=\"Total Sales\" \r\n          :value=\"salesData.total\" \r\n          icon=\"dollar-sign\"\r\n          :trend=\"salesData.trend\"\r\n        />\r\n        <DashboardCard \r\n          title=\"New Customers\" \r\n          :value=\"customerData.new\" \r\n          icon=\"users\"\r\n          :trend=\"customerData.trend\"\r\n        />\r\n        <DashboardCard \r\n          title=\"Pending Orders\" \r\n          :value=\"orderData.pending\" \r\n          icon=\"shopping-cart\"\r\n          :trend=\"orderData.trend\"\r\n        />\r\n      </div>\r\n\r\n      <!-- Charts Section -->\r\n      <!-- <div class=\"widget-row\">\r\n        <div class=\"chart-container\">\r\n          <LineChart :data=\"salesChartData\" title=\"Sales Trend\" />\r\n        </div>\r\n        <div class=\"chart-container\">\r\n          <BarChart :data=\"customerChartData\" title=\"Customer Growth\" />\r\n        </div>\r\n      </div> -->\r\n\r\n      <!-- Recent Activity -->\r\n      <div class=\"widget-row\">\r\n        <RecentActivity :items=\"recentActivities\" />\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapGetters, mapState } from 'vuex';\r\nimport DashboardCard from '@/components/dashboard/DashboardCard.vue';\r\n\r\nimport RecentActivity from '@/components/dashboard/RecentActivity.vue';\r\n\r\nexport default {\r\n  name: 'DashboardView',\r\n  components: {\r\n    DashboardCard,\r\n   \r\n    RecentActivity\r\n  },\r\n  data() {\r\n    return {\r\n      salesData: {\r\n        total: 0,\r\n        trend: 0,\r\n        loading: true\r\n      },\r\n      customerData: {\r\n        new: 0,\r\n        trend: 0,\r\n        loading: true\r\n      },\r\n      orderData: {\r\n        pending: 0,\r\n        trend: 0,\r\n        loading: true\r\n      },\r\n      salesChartData: [],\r\n      customerChartData: [],\r\n      recentActivities: [],\r\n      isLoading: true\r\n    };\r\n  },\r\n  computed: {\r\n    ...mapGetters('auth', ['currentUser', 'fullName']),\r\n    ...mapState('auth', ['user']),\r\n    \r\n    userName() {\r\n      return this.fullName || this.user?.full_name || 'User';\r\n    },\r\n    lastLogin() {\r\n      // Format last login date from user data or use current time\r\n      return new Date().toLocaleString();\r\n    }\r\n  },\r\n  async created() {\r\n    // await this.fetchDashboardData();\r\n    this.isLoading = false;\r\n  },\r\n  methods: {\r\n    // async fetchDashboardData() {\r\n    //   try {\r\n    //     // Fetch all data in parallel\r\n    //     await Promise.all([\r\n    //       this.fetchSalesData(),\r\n    //       this.fetchCustomerData(),\r\n    //       this.fetchOrderData(),\r\n    //       this.fetchChartData(),\r\n    //       this.fetchRecentActivities()\r\n    //     ]);\r\n    //   } catch (error) {\r\n    //     console.error('Error loading dashboard data:', error);\r\n    //     // Handle error (show notification, etc.)\r\n    //   }\r\n    // },\r\n    \r\n    async fetchSalesData() {\r\n      // Example API call - replace with your actual endpoint\r\n      const response = await this.$axios.get('/api/method/get_sales_summary');\r\n      this.salesData = {\r\n        total: response.data.total_sales,\r\n        trend: response.data.trend,\r\n        loading: false\r\n      };\r\n    },\r\n    \r\n    async fetchCustomerData() {\r\n      const response = await this.$axios.get('/api/method/get_customer_summary');\r\n      this.customerData = {\r\n        new: response.data.new_customers,\r\n        trend: response.data.trend,\r\n        loading: false\r\n      };\r\n    },\r\n    \r\n    async fetchOrderData() {\r\n      const response = await this.$axios.get('/api/method/get_order_summary');\r\n      this.orderData = {\r\n        pending: response.data.pending_orders,\r\n        trend: response.data.trend,\r\n        loading: false\r\n      };\r\n    },\r\n    \r\n    async fetchChartData() {\r\n      const responses = await Promise.all([\r\n        this.$axios.get('/api/method/get_sales_chart_data'),\r\n        this.$axios.get('/api/method/get_customer_chart_data')\r\n      ]);\r\n      \r\n      this.salesChartData = responses[0].data;\r\n      this.customerChartData = responses[1].data;\r\n    },\r\n    \r\n    async fetchRecentActivities() {\r\n      const response = await this.$axios.get('/api/method/get_recent_activities');\r\n      this.recentActivities = response.data.activities;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.dashboard {\r\n  padding: 20px;\r\n  height: 100%;\r\n}\r\n\r\n.dashboard-header {\r\n  margin-bottom: 30px;\r\n}\r\n\r\n.dashboard-header h1 {\r\n  font-size: 24px;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.dashboard-header p {\r\n  color: #666;\r\n  font-size: 14px;\r\n}\r\n\r\n.widget-row {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 20px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.chart-container {\r\n  flex: 1;\r\n  min-width: 300px;\r\n  background: white;\r\n  border-radius: 8px;\r\n  padding: 15px;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .widget-row {\r\n    flex-direction: column;\r\n  }\r\n  \r\n  .chart-container {\r\n    min-width: 100%;\r\n  }\r\n}\r\n</style>"],"mappings":";;EACOA,KAAK,EAAC;AAAW;;EACfA,KAAK,EAAC;AAAkB;;EAKxBA,KAAK,EAAC;AAAmB;;EAEvBA,KAAK,EAAC;AAAY;;EAgClBA,KAAK,EAAC;AAAY;;;;uBAxC3BC,mBAAA,CA4CM,OA5CNC,UA4CM,GA3CJC,mBAAA,CAGM,OAHNC,UAGM,GAFJD,mBAAA,CAAiC,YAA7B,WAAS,GAAAE,gBAAA,CAAGC,QAAA,CAAAC,QAAQ,IAAG,GAAC,iBAC5BJ,mBAAA,CAAkC,WAA/B,cAAY,GAAAE,gBAAA,CAAGC,QAAA,CAAAE,SAAS,iB,GAG7BL,mBAAA,CAqCM,OArCNM,UAqCM,GApCJC,mBAAA,mBAAsB,EACtBP,mBAAA,CAmBM,OAnBNQ,UAmBM,GAlBJC,YAAA,CAKEC,wBAAA;IAJAC,KAAK,EAAC,aAAa;IAClBC,KAAK,EAAEC,KAAA,CAAAC,SAAS,CAACC,KAAK;IACvBC,IAAI,EAAC,aAAa;IACjBC,KAAK,EAAEJ,KAAA,CAAAC,SAAS,CAACG;+CAEpBR,YAAA,CAKEC,wBAAA;IAJAC,KAAK,EAAC,eAAe;IACpBC,KAAK,EAAEC,KAAA,CAAAK,YAAY,CAACC,GAAG;IACxBH,IAAI,EAAC,OAAO;IACXC,KAAK,EAAEJ,KAAA,CAAAK,YAAY,CAACD;+CAEvBR,YAAA,CAKEC,wBAAA;IAJAC,KAAK,EAAC,gBAAgB;IACrBC,KAAK,EAAEC,KAAA,CAAAO,SAAS,CAACC,OAAO;IACzBL,IAAI,EAAC,eAAe;IACnBC,KAAK,EAAEJ,KAAA,CAAAO,SAAS,CAACH;iDAItBV,mBAAA,oBAAuB,EACvBA,mBAAA,oUAOU,EAEVA,mBAAA,qBAAwB,EACxBP,mBAAA,CAEM,OAFNsB,UAEM,GADJb,YAAA,CAA4Cc,yBAAA;IAA3BC,KAAK,EAAEX,KAAA,CAAAY;EAAgB,mC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}