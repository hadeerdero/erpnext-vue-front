{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\n// import axios from 'axios';\n// let locale = localStorage.getItem(\"locale\") || 'en';\n// // const userRole = localStorage.getItem('role');\n\n// // axios.defaults.baseURL = 'http://45.79.209.137'\n// // axios.defaults.baseURL = 'http://160.153.175.147'\n\n// axios.defaults.baseUR ='http://127.0.0.1:8000'\n\n// const axiosBusiness = axios.create({\n//   // baseURL:  \"http://45.79.209.137\",\n//   // baseURL:  \"http://160.153.175.147\",\n//   baseURL:  \"http://127.0.0.1:8000\",\n//   headers: {\n//     'Content-Type': 'application/json',\n//     'lang': locale,\n//     // 'X-User-Role': userRole,\n//     // \"userRole\": 'admin'\n//   },\n//   // body: JSON.stringify({ role: userRole })\n\n// });\n// // Add a request interceptor\n// axiosBusiness.interceptors.request.use(\n//   async (config) => {\n//   // Get the token from the store\n//   let accessToken = localStorage.getItem('token')\n//   if(accessToken){\n//     config.headers[\"Authorization\"] = `Bearer ${accessToken}`;\n//   }\n//   if (config.method === 'post' || config.method === 'put') {\n//     if (config.data instanceof FormData) {\n//       // config.data.append('role', userRole);\n//     } else {\n//       config.data = {\n//         ...config.data,\n//         // role: userRole\n//       };\n//     }\n//   } else if (config.method === 'get' || config.method === 'delete') {\n//     config.params = {\n//       ...config.params,\n//       // role: userRole\n//     };\n//   }\n//   return config;\n// },\n// (error) => {\n//   return Promise.reject(error);\n// }\n// );\n// // axiosBusiness.defaults.baseURL = 'http://160.153.175.147'\n// // Add a response interceptor\n// axiosBusiness.interceptors.response.use(\n//   (response) => {\n\n//     return response;\n//   },\n//   async (error) => {\n//     // Throw an error to cancel the request\n//     if (error.response && error.response.status === 500) {\n//         throw new Error('Internal Server Error');\n//     }\n//     // Check if the error is due to an expired token\n//     if (error.response.status === 401 && error.config && !error.config.__isRetryRequest) {\n//       // Set the __isRetryRequest flag to prevent an infinite loop\n//       error.config.__isRetryRequest = true;\n//       // Refresh the token\n//       // await refreshingToken();\n//       // Update the Authorization header with the new token\n//       let accessToken = localStorage.getItem('token')\n//       error.config.headers[\"Authorization\"] = `Bearer ${accessToken}`;\n//       // Retry the original request with the new token\n//       return axiosBusiness(error.config);\n//     }\n//     return Promise.reject(error);\n//   }\n// );\n\n// export {axiosBusiness};\n\n// import axios from \"axios\";\n\n// const api = axios.create({\n//   baseURL: \"http://172.29.82.206:8000/api\", // Your ERPNext API base URL\n//   withCredentials: true, // Required for session cookies\n//   headers: {\n//     \"Content-Type\": \"application/json\",\n//     Accept: \"application/json\",\n//   },\n// });\n\n// // Add CSRF token interceptor\n// api.interceptors.request.use((config) => {\n//   const csrfToken = document.cookie\n//     .split(\"; \")\n//     .find((row) => row.startsWith(\"csrf_token=\"))\n//     ?.split(\"=\")[1];\n\n//   if (csrfToken) {\n//     config.headers[\"X-Frappe-CSRF-Token\"] = csrfToken;\n//   }\n//   return config;\n// });\n\n// export default api;\n\nimport axios from \"axios\";\nconst api = axios.create({\n  baseURL: \"http://172.29.82.206:8000\",\n  // ERPNext API base URL\n  withCredentials: true,\n  // Needed to send cookies\n  headers: {\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\"\n  }\n});\n\n// Add CSRF token from cookies (only needed for state-changing requests like POST, PUT, DELETE)\napi.interceptors.request.use(config => {\n  const csrfToken = document.cookie.split(\"; \").find(row => row.startsWith(\"csrf_token=\"))?.split(\"=\")[1];\n  if (csrfToken && [\"post\", \"put\", \"delete\"].includes(config.method)) {\n    config.headers[\"X-Frappe-CSRF-Token\"] = csrfToken;\n  }\n  return config;\n});\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","withCredentials","headers","Accept","interceptors","request","use","config","csrfToken","document","cookie","split","find","row","startsWith","includes","method"],"sources":["C:/Users/CITCPC3/Desktop/hadeer/erpnext-vue-front/src/plugins/axios/axiosBusiness.js"],"sourcesContent":["// import axios from 'axios';\r\n// let locale = localStorage.getItem(\"locale\") || 'en';\r\n// // const userRole = localStorage.getItem('role');\r\n\r\n// // axios.defaults.baseURL = 'http://45.79.209.137'\r\n// // axios.defaults.baseURL = 'http://160.153.175.147'\r\n\r\n// axios.defaults.baseUR ='http://127.0.0.1:8000'\r\n\r\n// const axiosBusiness = axios.create({\r\n//   // baseURL:  \"http://45.79.209.137\",\r\n//   // baseURL:  \"http://160.153.175.147\",\r\n//   baseURL:  \"http://127.0.0.1:8000\",\r\n//   headers: {\r\n//     'Content-Type': 'application/json',\r\n//     'lang': locale,\r\n//     // 'X-User-Role': userRole,\r\n//     // \"userRole\": 'admin'\r\n//   },\r\n//   // body: JSON.stringify({ role: userRole })\r\n\r\n// });\r\n// // Add a request interceptor\r\n// axiosBusiness.interceptors.request.use(\r\n//   async (config) => {\r\n//   // Get the token from the store\r\n//   let accessToken = localStorage.getItem('token')\r\n//   if(accessToken){\r\n//     config.headers[\"Authorization\"] = `Bearer ${accessToken}`;\r\n//   }\r\n//   if (config.method === 'post' || config.method === 'put') {\r\n//     if (config.data instanceof FormData) {\r\n//       // config.data.append('role', userRole);\r\n//     } else {\r\n//       config.data = {\r\n//         ...config.data,\r\n//         // role: userRole\r\n//       };\r\n//     }\r\n//   } else if (config.method === 'get' || config.method === 'delete') {\r\n//     config.params = {\r\n//       ...config.params,\r\n//       // role: userRole\r\n//     };\r\n//   }\r\n//   return config;\r\n// },\r\n// (error) => {\r\n//   return Promise.reject(error);\r\n// }\r\n// );\r\n// // axiosBusiness.defaults.baseURL = 'http://160.153.175.147'\r\n// // Add a response interceptor\r\n// axiosBusiness.interceptors.response.use(\r\n//   (response) => {\r\n\r\n//     return response;\r\n//   },\r\n//   async (error) => {\r\n//     // Throw an error to cancel the request\r\n//     if (error.response && error.response.status === 500) {\r\n//         throw new Error('Internal Server Error');\r\n//     }\r\n//     // Check if the error is due to an expired token\r\n//     if (error.response.status === 401 && error.config && !error.config.__isRetryRequest) {\r\n//       // Set the __isRetryRequest flag to prevent an infinite loop\r\n//       error.config.__isRetryRequest = true;\r\n//       // Refresh the token\r\n//       // await refreshingToken();\r\n//       // Update the Authorization header with the new token\r\n//       let accessToken = localStorage.getItem('token')\r\n//       error.config.headers[\"Authorization\"] = `Bearer ${accessToken}`;\r\n//       // Retry the original request with the new token\r\n//       return axiosBusiness(error.config);\r\n//     }\r\n//     return Promise.reject(error);\r\n//   }\r\n// );\r\n\r\n// export {axiosBusiness};\r\n\r\n// import axios from \"axios\";\r\n\r\n// const api = axios.create({\r\n//   baseURL: \"http://172.29.82.206:8000/api\", // Your ERPNext API base URL\r\n//   withCredentials: true, // Required for session cookies\r\n//   headers: {\r\n//     \"Content-Type\": \"application/json\",\r\n//     Accept: \"application/json\",\r\n//   },\r\n// });\r\n\r\n// // Add CSRF token interceptor\r\n// api.interceptors.request.use((config) => {\r\n//   const csrfToken = document.cookie\r\n//     .split(\"; \")\r\n//     .find((row) => row.startsWith(\"csrf_token=\"))\r\n//     ?.split(\"=\")[1];\r\n\r\n//   if (csrfToken) {\r\n//     config.headers[\"X-Frappe-CSRF-Token\"] = csrfToken;\r\n//   }\r\n//   return config;\r\n// });\r\n\r\n// export default api;\r\n\r\nimport axios from \"axios\";\r\n\r\nconst api = axios.create({\r\n  baseURL: \"http://172.29.82.206:8000\", // ERPNext API base URL\r\n  withCredentials: true, // Needed to send cookies\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n    Accept: \"application/json\",\r\n  },\r\n});\r\n\r\n// Add CSRF token from cookies (only needed for state-changing requests like POST, PUT, DELETE)\r\napi.interceptors.request.use((config) => {\r\n  const csrfToken = document.cookie\r\n    .split(\"; \")\r\n    .find((row) => row.startsWith(\"csrf_token=\"))\r\n    ?.split(\"=\")[1];\r\n\r\n  if (csrfToken && [\"post\", \"put\", \"delete\"].includes(config.method)) {\r\n    config.headers[\"X-Frappe-CSRF-Token\"] = csrfToken;\r\n  }\r\n\r\n  return config;\r\n});\r\n\r\nexport default api;\r\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE,2BAA2B;EAAE;EACtCC,eAAe,EAAE,IAAI;EAAE;EACvBC,OAAO,EAAE;IACP,cAAc,EAAE,kBAAkB;IAClCC,MAAM,EAAE;EACV;AACF,CAAC,CAAC;;AAEF;AACAL,GAAG,CAACM,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACvC,MAAMC,SAAS,GAAGC,QAAQ,CAACC,MAAM,CAC9BC,KAAK,CAAC,IAAI,CAAC,CACXC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,UAAU,CAAC,aAAa,CAAC,CAAC,EAC3CH,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAEjB,IAAIH,SAAS,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,QAAQ,CAAC,CAACO,QAAQ,CAACR,MAAM,CAACS,MAAM,CAAC,EAAE;IAClET,MAAM,CAACL,OAAO,CAAC,qBAAqB,CAAC,GAAGM,SAAS;EACnD;EAEA,OAAOD,MAAM;AACf,CAAC,CAAC;AAEF,eAAeT,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}