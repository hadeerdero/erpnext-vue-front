{"ast":null,"code":"// import axios from 'axios';\n// let locale = localStorage.getItem(\"locale\") || 'en';\n// // const userRole = localStorage.getItem('role');\n\n// // axios.defaults.baseURL = 'http://45.79.209.137'\n// // axios.defaults.baseURL = 'http://160.153.175.147'\n\n// axios.defaults.baseUR ='http://127.0.0.1:8000'\n\n// const axiosBusiness = axios.create({\n//   // baseURL:  \"http://45.79.209.137\",\n//   // baseURL:  \"http://160.153.175.147\",\n//   baseURL:  \"http://127.0.0.1:8000\",\n//   headers: {\n//     'Content-Type': 'application/json',\n//     'lang': locale,\n//     // 'X-User-Role': userRole,\n//     // \"userRole\": 'admin'\n//   },\n//   // body: JSON.stringify({ role: userRole })\n\n// });\n// // Add a request interceptor\n// axiosBusiness.interceptors.request.use(\n//   async (config) => {\n//   // Get the token from the store\n//   let accessToken = localStorage.getItem('token')\n//   if(accessToken){\n//     config.headers[\"Authorization\"] = `Bearer ${accessToken}`;\n//   }\n//   if (config.method === 'post' || config.method === 'put') {\n//     if (config.data instanceof FormData) {\n//       // config.data.append('role', userRole);\n//     } else {\n//       config.data = {\n//         ...config.data,\n//         // role: userRole\n//       };\n//     }\n//   } else if (config.method === 'get' || config.method === 'delete') {\n//     config.params = {\n//       ...config.params,\n//       // role: userRole\n//     };\n//   }\n//   return config;\n// },\n// (error) => {\n//   return Promise.reject(error);\n// }\n// );\n// // axiosBusiness.defaults.baseURL = 'http://160.153.175.147'\n// // Add a response interceptor\n// axiosBusiness.interceptors.response.use(\n//   (response) => {\n\n//     return response;\n//   },\n//   async (error) => {\n//     // Throw an error to cancel the request\n//     if (error.response && error.response.status === 500) {\n//         throw new Error('Internal Server Error');\n//     }\n//     // Check if the error is due to an expired token\n//     if (error.response.status === 401 && error.config && !error.config.__isRetryRequest) {\n//       // Set the __isRetryRequest flag to prevent an infinite loop\n//       error.config.__isRetryRequest = true;\n//       // Refresh the token\n//       // await refreshingToken();\n//       // Update the Authorization header with the new token\n//       let accessToken = localStorage.getItem('token')\n//       error.config.headers[\"Authorization\"] = `Bearer ${accessToken}`;\n//       // Retry the original request with the new token\n//       return axiosBusiness(error.config);\n//     }\n//     return Promise.reject(error);\n//   }\n// );\n\n// export {axiosBusiness};\n\n// import axios from \"axios\";\n\n// const api = axios.create({\n//   baseURL: \"http://172.29.82.206:8000/api\", // Your ERPNext API base URL\n//   withCredentials: true, // Required for session cookies\n//   headers: {\n//     \"Content-Type\": \"application/json\",\n//     Accept: \"application/json\",\n//   },\n// });\n\n// // Add CSRF token interceptor\n// api.interceptors.request.use((config) => {\n//   const csrfToken = document.cookie\n//     .split(\"; \")\n//     .find((row) => row.startsWith(\"csrf_token=\"))\n//     ?.split(\"=\")[1];\n\n//   if (csrfToken) {\n//     config.headers[\"X-Frappe-CSRF-Token\"] = csrfToken;\n//   }\n//   return config;\n// });\n\n// export default api;\n\n// import axios from \"axios\";\n\n// const api = axios.create({\n//   baseURL: \"http://172.29.82.206:8000\", // ERPNext API base URL\n//   withCredentials: true, // Needed to send cookies\n//   headers: {\n//     \"Content-Type\": \"application/json\",\n//     Accept: \"application/json\",\n//   },\n// });\n\n// // Add CSRF token from cookies (only needed for state-changing requests like POST, PUT, DELETE)\n// api.interceptors.request.use((config) => {\n//   const csrfToken = document.cookie\n//     .split(\"; \")\n//     .find((row) => row.startsWith(\"csrf_token=\"))\n//     ?.split(\"=\")[1];\n\n//   if (csrfToken && [\"post\", \"put\", \"delete\"].includes(config.method)) {\n//     config.headers[\"X-Frappe-CSRF-Token\"] = csrfToken;\n//   }\n\n//   return config;\n// });\n\n// export default api;\n\n// import axios from \"axios\";\n\n// const api = axios.create({\n//   // baseURL: \"http://172.29.82.206:8000\", // ERPNext API base URL\n//   baseURL: 'http://138.199.220.5:8001',\n//   // withCredentials: true, // Required for session cookies\n//   credentials: 'include',\n//   headers: {\n//     \"Content-Type\": \"application/json\",\n//     Accept: \"application/json\",\n//     \"X-Frappe-Site-Name\": \"mynewsite.local\", // Add your site name here\n//   },\n// });\n\n// // Request interceptor for adding CSRF token and handling authentication\n// api.interceptors.request.use(async (config) => {\n//   // Add CSRF token for state-changing requests\n//   if (\n//     [\"post\", \"put\", \"delete\", \"patch\"].includes(config.method?.toLowerCase())\n//   ) {\n//     try {\n//       // Get fresh CSRF token for each request\n//       const csrfResponse = await axios.get(\n//         `${config.baseURL}/api/method/frappe.csrf_token.get_token`,\n//         {\n//           // withCredentials: true,\n//           credentials: 'include'\n//         }\n//       );\n//       config.headers[\"X-Frappe-CSRF-Token\"] = csrfResponse.data.token;\n//     } catch (error) {\n//       console.error(\"Failed to get CSRF token\", error);\n//     }\n//   }\n\n//   return config;\n// });\n\n// // Response interceptor to handle errors globally\n// api.interceptors.response.use(\n//   (response) => response,\n//   async (error) => {\n//     const originalRequest = error.config;\n\n//     // If 401 Unauthorized, try to refresh session\n//     if (error.response?.status === 401 && !originalRequest._retry) {\n//       originalRequest._retry = true;\n\n//       try {\n//         // Attempt to login again\n//         await axios.post(\n//           `${originalRequest.baseURL}/api/method/login`,\n//           {\n//             usr: \"your_admin_email@example.com\",\n//             pwd: \"your_password\",\n//           },\n//           {\n//             // withCredentials: true,\n//             credentials: 'include',\n//             headers: {\n//               \"X-Frappe-Site-Name\": \"mynewsite.local\",\n//             },\n//           }\n//         );\n\n//         // Retry the original request\n//         return api(originalRequest);\n//       } catch (loginError) {\n//         console.error(\"Re-authentication failed\", loginError);\n//         return Promise.reject(loginError);\n//       }\n//     }\n\n//     return Promise.reject(error);\n//   }\n// );\n\n// export default api;\n\nimport axios from \"axios\";\n\n// Helper function to get cookie by name\nconst getCookie = name => {\n  const value = `; ${document.cookie}`;\n  const parts = value.split(`; ${name}=`);\n  if (parts.length === 2) return parts.pop().split(';').shift();\n};\nconst api = axios.create({\n  baseURL: 'http://138.199.220.5:8001',\n  withCredentials: true,\n  // Important for cookie handling\n  headers: {\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\",\n    \"X-Frappe-Site-Name\": \"mynewsite.local\"\n  }\n});\n\n// Request interceptor to handle cookies and CSRF\napi.interceptors.request.use(async config => {\n  // 1. Get and attach sid cookie\n  const sid = getCookie('sid');\n  if (sid) {\n    config.headers.Cookie = `sid=${sid}`;\n  }\n\n  // 2. Add CSRF token for state-changing requests\n  if ([\"post\", \"put\", \"delete\", \"patch\"].includes(config.method?.toLowerCase())) {\n    try {\n      const csrfResponse = await axios.get(`${config.baseURL}/api/method/frappe.csrf_token.get_token`, {\n        withCredentials: true,\n        headers: {\n          'X-Frappe-Site-Name': 'mynewsite.local',\n          ...(sid ? {\n            Cookie: `sid=${sid}`\n          } : {})\n        }\n      });\n      config.headers[\"X-Frappe-CSRF-Token\"] = csrfResponse.data.token;\n    } catch (error) {\n      console.error(\"CSRF token fetch failed\", error);\n    }\n  }\n  return config;\n});\n\n// Response interceptor\napi.interceptors.response.use(response => response, async error => {\n  const originalRequest = error.config;\n\n  // Handle 401 errors\n  if (error.response?.status === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      // Attempt to re-authenticate\n      await axios.post(`${originalRequest.baseURL}/api/method/login`, {\n        usr: \"your_admin_email@example.com\",\n        pwd: \"your_password\"\n      }, {\n        withCredentials: true,\n        headers: {\n          \"X-Frappe-Site-Name\": \"mynewsite.local\"\n        }\n      });\n\n      // Get new sid after re-auth\n      const newSid = getCookie('sid');\n      if (newSid) {\n        originalRequest.headers.Cookie = `sid=${newSid}`;\n      }\n      return api(originalRequest);\n    } catch (loginError) {\n      console.error(\"Re-authentication failed\", loginError);\n      return Promise.reject(loginError);\n    }\n  }\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","getCookie","name","value","document","cookie","parts","split","length","pop","shift","api","create","baseURL","withCredentials","headers","Accept","interceptors","request","use","config","sid","Cookie","includes","method","toLowerCase","csrfResponse","get","data","token","error","console","response","originalRequest","status","_retry","post","usr","pwd","newSid","loginError","Promise","reject"],"sources":["D:/hadeerwork/erpnext-vue-front/src/plugins/axios/axiosBusiness.js"],"sourcesContent":["// import axios from 'axios';\r\n// let locale = localStorage.getItem(\"locale\") || 'en';\r\n// // const userRole = localStorage.getItem('role');\r\n\r\n// // axios.defaults.baseURL = 'http://45.79.209.137'\r\n// // axios.defaults.baseURL = 'http://160.153.175.147'\r\n\r\n// axios.defaults.baseUR ='http://127.0.0.1:8000'\r\n\r\n// const axiosBusiness = axios.create({\r\n//   // baseURL:  \"http://45.79.209.137\",\r\n//   // baseURL:  \"http://160.153.175.147\",\r\n//   baseURL:  \"http://127.0.0.1:8000\",\r\n//   headers: {\r\n//     'Content-Type': 'application/json',\r\n//     'lang': locale,\r\n//     // 'X-User-Role': userRole,\r\n//     // \"userRole\": 'admin'\r\n//   },\r\n//   // body: JSON.stringify({ role: userRole })\r\n\r\n// });\r\n// // Add a request interceptor\r\n// axiosBusiness.interceptors.request.use(\r\n//   async (config) => {\r\n//   // Get the token from the store\r\n//   let accessToken = localStorage.getItem('token')\r\n//   if(accessToken){\r\n//     config.headers[\"Authorization\"] = `Bearer ${accessToken}`;\r\n//   }\r\n//   if (config.method === 'post' || config.method === 'put') {\r\n//     if (config.data instanceof FormData) {\r\n//       // config.data.append('role', userRole);\r\n//     } else {\r\n//       config.data = {\r\n//         ...config.data,\r\n//         // role: userRole\r\n//       };\r\n//     }\r\n//   } else if (config.method === 'get' || config.method === 'delete') {\r\n//     config.params = {\r\n//       ...config.params,\r\n//       // role: userRole\r\n//     };\r\n//   }\r\n//   return config;\r\n// },\r\n// (error) => {\r\n//   return Promise.reject(error);\r\n// }\r\n// );\r\n// // axiosBusiness.defaults.baseURL = 'http://160.153.175.147'\r\n// // Add a response interceptor\r\n// axiosBusiness.interceptors.response.use(\r\n//   (response) => {\r\n\r\n//     return response;\r\n//   },\r\n//   async (error) => {\r\n//     // Throw an error to cancel the request\r\n//     if (error.response && error.response.status === 500) {\r\n//         throw new Error('Internal Server Error');\r\n//     }\r\n//     // Check if the error is due to an expired token\r\n//     if (error.response.status === 401 && error.config && !error.config.__isRetryRequest) {\r\n//       // Set the __isRetryRequest flag to prevent an infinite loop\r\n//       error.config.__isRetryRequest = true;\r\n//       // Refresh the token\r\n//       // await refreshingToken();\r\n//       // Update the Authorization header with the new token\r\n//       let accessToken = localStorage.getItem('token')\r\n//       error.config.headers[\"Authorization\"] = `Bearer ${accessToken}`;\r\n//       // Retry the original request with the new token\r\n//       return axiosBusiness(error.config);\r\n//     }\r\n//     return Promise.reject(error);\r\n//   }\r\n// );\r\n\r\n// export {axiosBusiness};\r\n\r\n// import axios from \"axios\";\r\n\r\n// const api = axios.create({\r\n//   baseURL: \"http://172.29.82.206:8000/api\", // Your ERPNext API base URL\r\n//   withCredentials: true, // Required for session cookies\r\n//   headers: {\r\n//     \"Content-Type\": \"application/json\",\r\n//     Accept: \"application/json\",\r\n//   },\r\n// });\r\n\r\n// // Add CSRF token interceptor\r\n// api.interceptors.request.use((config) => {\r\n//   const csrfToken = document.cookie\r\n//     .split(\"; \")\r\n//     .find((row) => row.startsWith(\"csrf_token=\"))\r\n//     ?.split(\"=\")[1];\r\n\r\n//   if (csrfToken) {\r\n//     config.headers[\"X-Frappe-CSRF-Token\"] = csrfToken;\r\n//   }\r\n//   return config;\r\n// });\r\n\r\n// export default api;\r\n\r\n// import axios from \"axios\";\r\n\r\n// const api = axios.create({\r\n//   baseURL: \"http://172.29.82.206:8000\", // ERPNext API base URL\r\n//   withCredentials: true, // Needed to send cookies\r\n//   headers: {\r\n//     \"Content-Type\": \"application/json\",\r\n//     Accept: \"application/json\",\r\n//   },\r\n// });\r\n\r\n// // Add CSRF token from cookies (only needed for state-changing requests like POST, PUT, DELETE)\r\n// api.interceptors.request.use((config) => {\r\n//   const csrfToken = document.cookie\r\n//     .split(\"; \")\r\n//     .find((row) => row.startsWith(\"csrf_token=\"))\r\n//     ?.split(\"=\")[1];\r\n\r\n//   if (csrfToken && [\"post\", \"put\", \"delete\"].includes(config.method)) {\r\n//     config.headers[\"X-Frappe-CSRF-Token\"] = csrfToken;\r\n//   }\r\n\r\n//   return config;\r\n// });\r\n\r\n// export default api;\r\n\r\n// import axios from \"axios\";\r\n\r\n// const api = axios.create({\r\n//   // baseURL: \"http://172.29.82.206:8000\", // ERPNext API base URL\r\n//   baseURL: 'http://138.199.220.5:8001',\r\n//   // withCredentials: true, // Required for session cookies\r\n//   credentials: 'include',\r\n//   headers: {\r\n//     \"Content-Type\": \"application/json\",\r\n//     Accept: \"application/json\",\r\n//     \"X-Frappe-Site-Name\": \"mynewsite.local\", // Add your site name here\r\n//   },\r\n// });\r\n\r\n// // Request interceptor for adding CSRF token and handling authentication\r\n// api.interceptors.request.use(async (config) => {\r\n//   // Add CSRF token for state-changing requests\r\n//   if (\r\n//     [\"post\", \"put\", \"delete\", \"patch\"].includes(config.method?.toLowerCase())\r\n//   ) {\r\n//     try {\r\n//       // Get fresh CSRF token for each request\r\n//       const csrfResponse = await axios.get(\r\n//         `${config.baseURL}/api/method/frappe.csrf_token.get_token`,\r\n//         {\r\n//           // withCredentials: true,\r\n//           credentials: 'include'\r\n//         }\r\n//       );\r\n//       config.headers[\"X-Frappe-CSRF-Token\"] = csrfResponse.data.token;\r\n//     } catch (error) {\r\n//       console.error(\"Failed to get CSRF token\", error);\r\n//     }\r\n//   }\r\n\r\n//   return config;\r\n// });\r\n\r\n// // Response interceptor to handle errors globally\r\n// api.interceptors.response.use(\r\n//   (response) => response,\r\n//   async (error) => {\r\n//     const originalRequest = error.config;\r\n\r\n//     // If 401 Unauthorized, try to refresh session\r\n//     if (error.response?.status === 401 && !originalRequest._retry) {\r\n//       originalRequest._retry = true;\r\n\r\n//       try {\r\n//         // Attempt to login again\r\n//         await axios.post(\r\n//           `${originalRequest.baseURL}/api/method/login`,\r\n//           {\r\n//             usr: \"your_admin_email@example.com\",\r\n//             pwd: \"your_password\",\r\n//           },\r\n//           {\r\n//             // withCredentials: true,\r\n//             credentials: 'include',\r\n//             headers: {\r\n//               \"X-Frappe-Site-Name\": \"mynewsite.local\",\r\n//             },\r\n//           }\r\n//         );\r\n\r\n//         // Retry the original request\r\n//         return api(originalRequest);\r\n//       } catch (loginError) {\r\n//         console.error(\"Re-authentication failed\", loginError);\r\n//         return Promise.reject(loginError);\r\n//       }\r\n//     }\r\n\r\n//     return Promise.reject(error);\r\n//   }\r\n// );\r\n\r\n// export default api;\r\n\r\n\r\n\r\nimport axios from \"axios\";\r\n\r\n// Helper function to get cookie by name\r\nconst getCookie = (name) => {\r\n  const value = `; ${document.cookie}`;\r\n  const parts = value.split(`; ${name}=`);\r\n  if (parts.length === 2) return parts.pop().split(';').shift();\r\n};\r\n\r\nconst api = axios.create({\r\n  baseURL: 'http://138.199.220.5:8001',\r\n  withCredentials: true, // Important for cookie handling\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n    Accept: \"application/json\",\r\n    \"X-Frappe-Site-Name\": \"mynewsite.local\"\r\n  }\r\n});\r\n\r\n// Request interceptor to handle cookies and CSRF\r\napi.interceptors.request.use(async (config) => {\r\n  // 1. Get and attach sid cookie\r\n  const sid = getCookie('sid');\r\n  if (sid) {\r\n    config.headers.Cookie = `sid=${sid}`;\r\n  }\r\n\r\n  // 2. Add CSRF token for state-changing requests\r\n  if ([\"post\", \"put\", \"delete\", \"patch\"].includes(config.method?.toLowerCase())) {\r\n    try {\r\n      const csrfResponse = await axios.get(\r\n        `${config.baseURL}/api/method/frappe.csrf_token.get_token`,\r\n        {\r\n          withCredentials: true,\r\n          headers: {\r\n            'X-Frappe-Site-Name': 'mynewsite.local',\r\n            ...(sid ? { Cookie: `sid=${sid}` } : {})\r\n          }\r\n        }\r\n      );\r\n      config.headers[\"X-Frappe-CSRF-Token\"] = csrfResponse.data.token;\r\n    } catch (error) {\r\n      console.error(\"CSRF token fetch failed\", error);\r\n    }\r\n  }\r\n\r\n  return config;\r\n});\r\n\r\n// Response interceptor\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  async (error) => {\r\n    const originalRequest = error.config;\r\n\r\n    // Handle 401 errors\r\n    if (error.response?.status === 401 && !originalRequest._retry) {\r\n      originalRequest._retry = true;\r\n      \r\n      try {\r\n        // Attempt to re-authenticate\r\n        await axios.post(\r\n          `${originalRequest.baseURL}/api/method/login`,\r\n          {\r\n            usr: \"your_admin_email@example.com\",\r\n            pwd: \"your_password\"\r\n          },\r\n          {\r\n            withCredentials: true,\r\n            headers: {\r\n              \"X-Frappe-Site-Name\": \"mynewsite.local\"\r\n            }\r\n          }\r\n        );\r\n\r\n        // Get new sid after re-auth\r\n        const newSid = getCookie('sid');\r\n        if (newSid) {\r\n          originalRequest.headers.Cookie = `sid=${newSid}`;\r\n        }\r\n\r\n        return api(originalRequest);\r\n      } catch (loginError) {\r\n        console.error(\"Re-authentication failed\", loginError);\r\n        return Promise.reject(loginError);\r\n      }\r\n    }\r\n\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default api;"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAIA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,SAAS,GAAIC,IAAI,IAAK;EAC1B,MAAMC,KAAK,GAAG,KAAKC,QAAQ,CAACC,MAAM,EAAE;EACpC,MAAMC,KAAK,GAAGH,KAAK,CAACI,KAAK,CAAC,KAAKL,IAAI,GAAG,CAAC;EACvC,IAAII,KAAK,CAACE,MAAM,KAAK,CAAC,EAAE,OAAOF,KAAK,CAACG,GAAG,CAAC,CAAC,CAACF,KAAK,CAAC,GAAG,CAAC,CAACG,KAAK,CAAC,CAAC;AAC/D,CAAC;AAED,MAAMC,GAAG,GAAGX,KAAK,CAACY,MAAM,CAAC;EACvBC,OAAO,EAAE,2BAA2B;EACpCC,eAAe,EAAE,IAAI;EAAE;EACvBC,OAAO,EAAE;IACP,cAAc,EAAE,kBAAkB;IAClCC,MAAM,EAAE,kBAAkB;IAC1B,oBAAoB,EAAE;EACxB;AACF,CAAC,CAAC;;AAEF;AACAL,GAAG,CAACM,YAAY,CAACC,OAAO,CAACC,GAAG,CAAC,MAAOC,MAAM,IAAK;EAC7C;EACA,MAAMC,GAAG,GAAGpB,SAAS,CAAC,KAAK,CAAC;EAC5B,IAAIoB,GAAG,EAAE;IACPD,MAAM,CAACL,OAAO,CAACO,MAAM,GAAG,OAAOD,GAAG,EAAE;EACtC;;EAEA;EACA,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,CAAC,CAACE,QAAQ,CAACH,MAAM,CAACI,MAAM,EAAEC,WAAW,CAAC,CAAC,CAAC,EAAE;IAC7E,IAAI;MACF,MAAMC,YAAY,GAAG,MAAM1B,KAAK,CAAC2B,GAAG,CAClC,GAAGP,MAAM,CAACP,OAAO,yCAAyC,EAC1D;QACEC,eAAe,EAAE,IAAI;QACrBC,OAAO,EAAE;UACP,oBAAoB,EAAE,iBAAiB;UACvC,IAAIM,GAAG,GAAG;YAAEC,MAAM,EAAE,OAAOD,GAAG;UAAG,CAAC,GAAG,CAAC,CAAC;QACzC;MACF,CACF,CAAC;MACDD,MAAM,CAACL,OAAO,CAAC,qBAAqB,CAAC,GAAGW,YAAY,CAACE,IAAI,CAACC,KAAK;IACjE,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACjD;EACF;EAEA,OAAOV,MAAM;AACf,CAAC,CAAC;;AAEF;AACAT,GAAG,CAACM,YAAY,CAACe,QAAQ,CAACb,GAAG,CAC1Ba,QAAQ,IAAKA,QAAQ,EACtB,MAAOF,KAAK,IAAK;EACf,MAAMG,eAAe,GAAGH,KAAK,CAACV,MAAM;;EAEpC;EACA,IAAIU,KAAK,CAACE,QAAQ,EAAEE,MAAM,KAAK,GAAG,IAAI,CAACD,eAAe,CAACE,MAAM,EAAE;IAC7DF,eAAe,CAACE,MAAM,GAAG,IAAI;IAE7B,IAAI;MACF;MACA,MAAMnC,KAAK,CAACoC,IAAI,CACd,GAAGH,eAAe,CAACpB,OAAO,mBAAmB,EAC7C;QACEwB,GAAG,EAAE,8BAA8B;QACnCC,GAAG,EAAE;MACP,CAAC,EACD;QACExB,eAAe,EAAE,IAAI;QACrBC,OAAO,EAAE;UACP,oBAAoB,EAAE;QACxB;MACF,CACF,CAAC;;MAED;MACA,MAAMwB,MAAM,GAAGtC,SAAS,CAAC,KAAK,CAAC;MAC/B,IAAIsC,MAAM,EAAE;QACVN,eAAe,CAAClB,OAAO,CAACO,MAAM,GAAG,OAAOiB,MAAM,EAAE;MAClD;MAEA,OAAO5B,GAAG,CAACsB,eAAe,CAAC;IAC7B,CAAC,CAAC,OAAOO,UAAU,EAAE;MACnBT,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEU,UAAU,CAAC;MACrD,OAAOC,OAAO,CAACC,MAAM,CAACF,UAAU,CAAC;IACnC;EACF;EAEA,OAAOC,OAAO,CAACC,MAAM,CAACZ,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAenB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}