{"ast":null,"code":"// import { axiosAuth } from \"@/plugins/axios/axiosAuth\";\n\n// const state = {\n//   token: localStorage.getItem(\"token\") || null,\n//   user: JSON.parse(localStorage.getItem(\"user\")) || null,\n//   status: \"\", // 'loading', 'success', 'error'\n//   sid: localStorage.getItem(\"sid\") || null,\n//   home_page: localStorage.getItem(\"home_page\") || \"/desk\",\n//   full_name: localStorage.getItem(\"full_name\") || null,\n// };\n\n// const getters = {\n//   isAuthenticated: (state) => !!state.sid,\n//   authStatus: (state) => state.status,\n//   currentUser: (state) => state.user,\n//   homePage: (state) => state.home_page,\n//   fullName: (state) => state.full_name,\n//   hasRole: (state) => (role) =>\n//     state.user && state.user.roles && state.user.roles.includes(role),\n// };\n\n// const mutations = {\n//   AUTH_REQUEST(state) {\n//     state.status = \"loading\";\n//   },\n//   AUTH_SUCCESS(state, { sid, user, home_page, full_name }) {\n//     state.status = \"success\";\n//     state.sid = sid;\n//     state.user = {\n//       email: user,\n//       full_name: full_name,\n//       roles: state.user?.roles || [],\n//     };\n//     state.home_page = home_page;\n//     state.full_name = full_name;\n\n//     // Persist in localStorage\n//     localStorage.setItem(\"sid\", sid);\n//     localStorage.setItem(\"user\", JSON.stringify(state.user));\n//     localStorage.setItem(\"home_page\", home_page);\n//     localStorage.setItem(\"full_name\", full_name);\n//   },\n//   AUTH_ERROR(state) {\n//     state.status = \"error\";\n//     state.sid = null;\n//     state.user = null;\n//     state.full_name = null;\n//     localStorage.removeItem(\"sid\");\n//     localStorage.removeItem(\"user\");\n//     localStorage.removeItem(\"home_page\");\n//     localStorage.removeItem(\"full_name\");\n//   },\n//   LOGOUT(state) {\n//     state.sid = null;\n//     state.user = null;\n//     state.home_page = \"/desk\";\n//     state.full_name = null;\n//     localStorage.removeItem(\"sid\");\n//     localStorage.removeItem(\"user\");\n//     localStorage.removeItem(\"home_page\");\n//     localStorage.removeItem(\"full_name\");\n//   },\n//   SET_USER_ROLES(state, roles) {\n//     if (state.user) {\n//       state.user.roles = roles;\n//       localStorage.setItem(\"user\", JSON.stringify(state.user));\n//     }\n//   },\n// };\n\n// const actions = {\n//   async login({ commit }, credentials) {\n//     commit(\"AUTH_REQUEST\");\n\n//     try {\n//       const response = await axiosAuth.post(\"/api/method/login\", {\n//         usr: credentials.email,\n//         pwd: credentials.password,\n//       });\n\n//       const { message } = response.data;\n//       const { sid, user, full_name, home_page } = message;\n\n//       // Set critical cookies for Frappe desk\n//       document.cookie = `sid=${sid}; path=/; ${\n//         process.env.NODE_ENV === \"production\"\n//           ? \"domain=.yourdomain.com; Secure; SameSite=Lax\"\n//           : \"\"\n//       }`;\n//       document.cookie = `user_id=${user}; path=/; ${\n//         process.env.NODE_ENV === \"production\"\n//           ? \"domain=.yourdomain.com; Secure; SameSite=Lax\"\n//           : \"\"\n//       }`;\n//       document.cookie = `full_name=${encodeURIComponent(full_name)}; path=/; ${\n//         process.env.NODE_ENV === \"production\"\n//           ? \"domain=.yourdomain.com; Secure; SameSite=Lax\"\n//           : \"\"\n//       }`;\n\n//       // Configure axios for future requests\n//       axiosAuth.defaults.headers.common[\"X-Frappe-Sid\"] = sid;\n\n//       commit(\"AUTH_SUCCESS\", { sid, user, home_page, full_name });\n\n//       // Fetch user roles if needed\n//       await this.dispatch(\"fetchUserRoles\");\n\n//       return response.data;\n//     } catch (error) {\n//       commit(\"AUTH_ERROR\");\n//       delete axiosAuth.defaults.headers.common[\"X-Frappe-Sid\"];\n//       throw error;\n//     }\n//   },\n\n//   async fetchUserRoles({ commit }) {\n//     try {\n//       const response = await axiosAuth.get(\n//         \"/api/method/frappe.auth.get_logged_user\"\n//       );\n//       const roles = response.data.message.roles.map((r) => r.role);\n//       commit(\"SET_USER_ROLES\", roles);\n//     } catch (error) {\n//       console.error(\"Failed to fetch user roles:\", error);\n//     }\n//   },\n\n//   async logout({ commit }) {\n//     try {\n//       await axiosAuth.post(\"/api/method/frappe.auth.logout\");\n//     } finally {\n//       commit(\"LOGOUT\");\n//       delete axiosAuth.defaults.headers.common[\"X-Frappe-Sid\"];\n\n//       // Clear Frappe cookies\n//       document.cookie = \"sid=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT\";\n//       document.cookie =\n//         \"user_id=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT\";\n//       document.cookie =\n//         \"full_name=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT\";\n//     }\n//   },\n\n//   checkAuth({ commit }) {\n//     const sid = localStorage.getItem(\"sid\");\n//     if (sid) {\n//       const user = JSON.parse(localStorage.getItem(\"user\"));\n//       const full_name = localStorage.getItem(\"full_name\");\n//       const home_page = localStorage.getItem(\"home_page\") || \"/desk\";\n\n//       axiosAuth.defaults.headers.common[\"X-Frappe-Sid\"] = sid;\n\n//       commit(\"AUTH_SUCCESS\", {\n//         sid,\n//         user: user?.email || \"\",\n//         home_page,\n//         full_name,\n//       });\n\n//       // Verify session is still valid\n//       this.dispatch(\"verifySession\");\n//     }\n//   },\n\n//   async verifySession({ commit, state }) {\n//     if (!state.sid) return;\n\n//     try {\n//       await axiosAuth.get(\"/api/method/frappe.auth.get_logged_user\");\n//     } catch (error) {\n//       commit(\"LOGOUT\");\n//     }\n//   },\n// };\n\n// export default {\n//   namespaced: true,\n//   state,\n//   getters,\n//   mutations,\n//   actions,\n// };\nimport { axiosAuth } from \"@/plugins/axios/axiosAuth\";\nconst state = {\n  user: JSON.parse(localStorage.getItem(\"user\")) || null,\n  status: \"\",\n  // 'loading', 'success', 'error'\n  home_page: \"/app/home\" // Default home page\n};\nconst getters = {\n  isAuthenticated: state => !!state.user,\n  authStatus: state => state.status,\n  currentUser: state => state.user,\n  homePage: state => state.home_page,\n  fullName: state => state.user?.full_name || null\n};\nconst mutations = {\n  AUTH_REQUEST(state) {\n    state.status = \"loading\";\n  },\n  AUTH_SUCCESS(state, {\n    full_name,\n    home_page\n  }) {\n    state.status = \"success\";\n    state.user = {\n      full_name: full_name\n    };\n    state.home_page = home_page || \"/app/home\";\n\n    // Persist in localStorage\n    localStorage.setItem(\"user\", JSON.stringify(state.user));\n    localStorage.setItem(\"home_page\", state.home_page);\n  },\n  AUTH_ERROR(state) {\n    state.status = \"error\";\n    state.user = null;\n    localStorage.removeItem(\"user\");\n    localStorage.removeItem(\"home_page\");\n  },\n  LOGOUT(state) {\n    state.user = null;\n    state.home_page = \"/app/home\";\n    localStorage.removeItem(\"user\");\n    localStorage.removeItem(\"home_page\");\n  }\n};\nconst actions = {\n  async login({\n    commit\n  }, credentials) {\n    commit(\"AUTH_REQUEST\");\n    try {\n      const response = await axiosAuth.post(\"/api/method/login\", {\n        usr: credentials.email,\n        pwd: credentials.password\n      });\n      const {\n        full_name,\n        home_page\n      } = response.data;\n      commit(\"AUTH_SUCCESS\", {\n        full_name,\n        home_page: home_page || \"/app/home\"\n      });\n      return response.data;\n    } catch (error) {\n      commit(\"AUTH_ERROR\");\n      throw error;\n    }\n  },\n  async logout({\n    commit\n  }) {\n    try {\n      await axiosAuth.post(\"/api/method/frappe.auth.logout\");\n    } finally {\n      commit(\"LOGOUT\");\n    }\n  }\n};\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  mutations,\n  actions\n};","map":{"version":3,"names":["axiosAuth","state","user","JSON","parse","localStorage","getItem","status","home_page","getters","isAuthenticated","authStatus","currentUser","homePage","fullName","full_name","mutations","AUTH_REQUEST","AUTH_SUCCESS","setItem","stringify","AUTH_ERROR","removeItem","LOGOUT","actions","login","commit","credentials","response","post","usr","email","pwd","password","data","error","logout","namespaced"],"sources":["D:/hadeerwork/erpnext-vue-front/src/store/modules/auth/auth.js"],"sourcesContent":["\r\n// import { axiosAuth } from \"@/plugins/axios/axiosAuth\";\r\n\r\n// const state = {\r\n//   token: localStorage.getItem(\"token\") || null,\r\n//   user: JSON.parse(localStorage.getItem(\"user\")) || null,\r\n//   status: \"\", // 'loading', 'success', 'error'\r\n//   sid: localStorage.getItem(\"sid\") || null,\r\n//   home_page: localStorage.getItem(\"home_page\") || \"/desk\",\r\n//   full_name: localStorage.getItem(\"full_name\") || null,\r\n// };\r\n\r\n// const getters = {\r\n//   isAuthenticated: (state) => !!state.sid,\r\n//   authStatus: (state) => state.status,\r\n//   currentUser: (state) => state.user,\r\n//   homePage: (state) => state.home_page,\r\n//   fullName: (state) => state.full_name,\r\n//   hasRole: (state) => (role) =>\r\n//     state.user && state.user.roles && state.user.roles.includes(role),\r\n// };\r\n\r\n// const mutations = {\r\n//   AUTH_REQUEST(state) {\r\n//     state.status = \"loading\";\r\n//   },\r\n//   AUTH_SUCCESS(state, { sid, user, home_page, full_name }) {\r\n//     state.status = \"success\";\r\n//     state.sid = sid;\r\n//     state.user = {\r\n//       email: user,\r\n//       full_name: full_name,\r\n//       roles: state.user?.roles || [],\r\n//     };\r\n//     state.home_page = home_page;\r\n//     state.full_name = full_name;\r\n\r\n//     // Persist in localStorage\r\n//     localStorage.setItem(\"sid\", sid);\r\n//     localStorage.setItem(\"user\", JSON.stringify(state.user));\r\n//     localStorage.setItem(\"home_page\", home_page);\r\n//     localStorage.setItem(\"full_name\", full_name);\r\n//   },\r\n//   AUTH_ERROR(state) {\r\n//     state.status = \"error\";\r\n//     state.sid = null;\r\n//     state.user = null;\r\n//     state.full_name = null;\r\n//     localStorage.removeItem(\"sid\");\r\n//     localStorage.removeItem(\"user\");\r\n//     localStorage.removeItem(\"home_page\");\r\n//     localStorage.removeItem(\"full_name\");\r\n//   },\r\n//   LOGOUT(state) {\r\n//     state.sid = null;\r\n//     state.user = null;\r\n//     state.home_page = \"/desk\";\r\n//     state.full_name = null;\r\n//     localStorage.removeItem(\"sid\");\r\n//     localStorage.removeItem(\"user\");\r\n//     localStorage.removeItem(\"home_page\");\r\n//     localStorage.removeItem(\"full_name\");\r\n//   },\r\n//   SET_USER_ROLES(state, roles) {\r\n//     if (state.user) {\r\n//       state.user.roles = roles;\r\n//       localStorage.setItem(\"user\", JSON.stringify(state.user));\r\n//     }\r\n//   },\r\n// };\r\n\r\n// const actions = {\r\n//   async login({ commit }, credentials) {\r\n//     commit(\"AUTH_REQUEST\");\r\n\r\n//     try {\r\n//       const response = await axiosAuth.post(\"/api/method/login\", {\r\n//         usr: credentials.email,\r\n//         pwd: credentials.password,\r\n//       });\r\n\r\n//       const { message } = response.data;\r\n//       const { sid, user, full_name, home_page } = message;\r\n\r\n//       // Set critical cookies for Frappe desk\r\n//       document.cookie = `sid=${sid}; path=/; ${\r\n//         process.env.NODE_ENV === \"production\"\r\n//           ? \"domain=.yourdomain.com; Secure; SameSite=Lax\"\r\n//           : \"\"\r\n//       }`;\r\n//       document.cookie = `user_id=${user}; path=/; ${\r\n//         process.env.NODE_ENV === \"production\"\r\n//           ? \"domain=.yourdomain.com; Secure; SameSite=Lax\"\r\n//           : \"\"\r\n//       }`;\r\n//       document.cookie = `full_name=${encodeURIComponent(full_name)}; path=/; ${\r\n//         process.env.NODE_ENV === \"production\"\r\n//           ? \"domain=.yourdomain.com; Secure; SameSite=Lax\"\r\n//           : \"\"\r\n//       }`;\r\n\r\n//       // Configure axios for future requests\r\n//       axiosAuth.defaults.headers.common[\"X-Frappe-Sid\"] = sid;\r\n\r\n//       commit(\"AUTH_SUCCESS\", { sid, user, home_page, full_name });\r\n\r\n//       // Fetch user roles if needed\r\n//       await this.dispatch(\"fetchUserRoles\");\r\n\r\n//       return response.data;\r\n//     } catch (error) {\r\n//       commit(\"AUTH_ERROR\");\r\n//       delete axiosAuth.defaults.headers.common[\"X-Frappe-Sid\"];\r\n//       throw error;\r\n//     }\r\n//   },\r\n\r\n//   async fetchUserRoles({ commit }) {\r\n//     try {\r\n//       const response = await axiosAuth.get(\r\n//         \"/api/method/frappe.auth.get_logged_user\"\r\n//       );\r\n//       const roles = response.data.message.roles.map((r) => r.role);\r\n//       commit(\"SET_USER_ROLES\", roles);\r\n//     } catch (error) {\r\n//       console.error(\"Failed to fetch user roles:\", error);\r\n//     }\r\n//   },\r\n\r\n//   async logout({ commit }) {\r\n//     try {\r\n//       await axiosAuth.post(\"/api/method/frappe.auth.logout\");\r\n//     } finally {\r\n//       commit(\"LOGOUT\");\r\n//       delete axiosAuth.defaults.headers.common[\"X-Frappe-Sid\"];\r\n\r\n//       // Clear Frappe cookies\r\n//       document.cookie = \"sid=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT\";\r\n//       document.cookie =\r\n//         \"user_id=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT\";\r\n//       document.cookie =\r\n//         \"full_name=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT\";\r\n//     }\r\n//   },\r\n\r\n//   checkAuth({ commit }) {\r\n//     const sid = localStorage.getItem(\"sid\");\r\n//     if (sid) {\r\n//       const user = JSON.parse(localStorage.getItem(\"user\"));\r\n//       const full_name = localStorage.getItem(\"full_name\");\r\n//       const home_page = localStorage.getItem(\"home_page\") || \"/desk\";\r\n\r\n//       axiosAuth.defaults.headers.common[\"X-Frappe-Sid\"] = sid;\r\n\r\n//       commit(\"AUTH_SUCCESS\", {\r\n//         sid,\r\n//         user: user?.email || \"\",\r\n//         home_page,\r\n//         full_name,\r\n//       });\r\n\r\n//       // Verify session is still valid\r\n//       this.dispatch(\"verifySession\");\r\n//     }\r\n//   },\r\n\r\n//   async verifySession({ commit, state }) {\r\n//     if (!state.sid) return;\r\n\r\n//     try {\r\n//       await axiosAuth.get(\"/api/method/frappe.auth.get_logged_user\");\r\n//     } catch (error) {\r\n//       commit(\"LOGOUT\");\r\n//     }\r\n//   },\r\n// };\r\n\r\n// export default {\r\n//   namespaced: true,\r\n//   state,\r\n//   getters,\r\n//   mutations,\r\n//   actions,\r\n// };\r\nimport { axiosAuth } from \"@/plugins/axios/axiosAuth\";\r\n\r\nconst state = {\r\n  user: JSON.parse(localStorage.getItem(\"user\")) || null,\r\n  status: \"\", // 'loading', 'success', 'error'\r\n  home_page: \"/app/home\", // Default home page\r\n};\r\n\r\nconst getters = {\r\n  isAuthenticated: (state) => !!state.user,\r\n  authStatus: (state) => state.status,\r\n  currentUser: (state) => state.user,\r\n  homePage: (state) => state.home_page,\r\n  fullName: (state) => state.user?.full_name || null,\r\n};\r\n\r\nconst mutations = {\r\n  AUTH_REQUEST(state) {\r\n    state.status = \"loading\";\r\n  },\r\n  AUTH_SUCCESS(state, { full_name, home_page }) {\r\n    state.status = \"success\";\r\n    state.user = {\r\n      full_name: full_name,\r\n    };\r\n    state.home_page = home_page || \"/app/home\";\r\n\r\n    // Persist in localStorage\r\n    localStorage.setItem(\"user\", JSON.stringify(state.user));\r\n    localStorage.setItem(\"home_page\", state.home_page);\r\n  },\r\n  AUTH_ERROR(state) {\r\n    state.status = \"error\";\r\n    state.user = null;\r\n    localStorage.removeItem(\"user\");\r\n    localStorage.removeItem(\"home_page\");\r\n  },\r\n  LOGOUT(state) {\r\n    state.user = null;\r\n    state.home_page = \"/app/home\";\r\n    localStorage.removeItem(\"user\");\r\n    localStorage.removeItem(\"home_page\");\r\n  },\r\n};\r\n\r\nconst actions = {\r\n  async login({ commit }, credentials) {\r\n    commit(\"AUTH_REQUEST\");\r\n\r\n    try {\r\n      const response = await axiosAuth.post(\"/api/method/login\", {\r\n        usr: credentials.email,\r\n        pwd: credentials.password,\r\n      });\r\n\r\n      const { full_name, home_page } = response.data;\r\n\r\n      commit(\"AUTH_SUCCESS\", { \r\n        full_name, \r\n        home_page: home_page || \"/app/home\" \r\n      });\r\n\r\n      return response.data;\r\n    } catch (error) {\r\n      commit(\"AUTH_ERROR\");\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async logout({ commit }) {\r\n    try {\r\n      await axiosAuth.post(\"/api/method/frappe.auth.logout\");\r\n    } finally {\r\n      commit(\"LOGOUT\");\r\n    }\r\n  },\r\n};\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state,\r\n  getters,\r\n  mutations,\r\n  actions,\r\n};"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}