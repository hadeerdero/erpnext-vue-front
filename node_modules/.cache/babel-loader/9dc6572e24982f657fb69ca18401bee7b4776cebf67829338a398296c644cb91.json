{"ast":null,"code":"import axios from 'axios';\n// axios.defaults.baseURL = 'http://45.79.209.137'\n// axios.defaults.baseURL = 'http://160.153.175.147'\n// axios.defaults.baseURL = 'http://127.0.0.1:8000'\n\naxios.defaults.baseURL = 'http://138.199.220.5:8001';\nconst axiosAuth = axios.create({\n  // baseURL:  \"http://45.79.209.137\",\n  // baseURL:  \"http://160.153.175.147\",\n  // baseURL:  \"http://127.0.0.1:8000\",\n  baseURL: 'http://138.199.220.5:8001',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\naxiosAuth.interceptors.request.use(async config => {\n  // Get the token from the store\n  let accessToken = localStorage.getItem('token');\n  if (accessToken) {\n    // print success messages in the console with green color using ANSI escape sequences\n    config.headers[\"Authorization\"] = `Bearer ${accessToken}`;\n    // config.headers[\"Authorization\"] = `Bearer ${accessToken}`;\n  }\n  return config;\n}, error => {\n  console.error(error);\n  return Promise.reject(error);\n});\naxiosAuth.interceptors.response.use(response => {\n  return response;\n}, async error => {\n  // Throw an error to cancel the request\n  if (error.response && error.response.status === 500) {\n    throw new Error('Internal Server Error');\n  }\n  // Check if the error is due to an expired token\n  if (error.response.status === 401 && error.config && !error.config.__isRetryRequest) {\n    // Set the __isRetryRequest flag to prevent an infinite loop\n    error.config.__isRetryRequest = true;\n    // Refresh the token\n    // await refreshingToken();\n    // Update the Authorization header with the new token\n    let accessToken = localStorage.getItem('token');\n    error.config.headers[\"Authorization\"] = `Bearer ${accessToken}`;\n    // Retry the original request with the new token\n    return axiosAuth(error.config);\n  }\n  return Promise.reject(error);\n});\nexport { axiosAuth };\n// import axios from 'axios';\n\n// axios.defaults.baseURL = 'http://138.199.220.5:8001';\n\n// const axiosAuth = axios.create({\n//   baseURL: 'http://138.199.220.5:8001',\n//   headers: {\n//     'Content-Type': 'application/json',\n//   },\n// });\n\n// export {axiosAuth};","map":{"version":3,"names":["axios","defaults","baseURL","axiosAuth","create","headers","interceptors","request","use","config","accessToken","localStorage","getItem","error","console","Promise","reject","response","status","Error","__isRetryRequest"],"sources":["C:/Users/CITCPC3/Desktop/hadeer/erpnext-vue-front/src/plugins/axios/axiosAuth.js"],"sourcesContent":["import axios from 'axios';\r\n// axios.defaults.baseURL = 'http://45.79.209.137'\r\n// axios.defaults.baseURL = 'http://160.153.175.147'\r\n// axios.defaults.baseURL = 'http://127.0.0.1:8000'\r\n\r\naxios.defaults.baseURL = 'http://138.199.220.5:8001'\r\n\r\nconst axiosAuth = axios.create({\r\n  // baseURL:  \"http://45.79.209.137\",\r\n  // baseURL:  \"http://160.153.175.147\",\r\n  // baseURL:  \"http://127.0.0.1:8000\",\r\n  baseURL:  'http://138.199.220.5:8001',\r\n  \r\n\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n        \r\n        \r\naxiosAuth.interceptors.request.use(\r\n  async (config) => {\r\n  // Get the token from the store\r\n  let accessToken = localStorage.getItem('token')\r\n  if(accessToken){\r\n    // print success messages in the console with green color using ANSI escape sequences\r\n    config.headers[\"Authorization\"] = `Bearer ${accessToken}`;\r\n    // config.headers[\"Authorization\"] = `Bearer ${accessToken}`;\r\n\r\n  }\r\n  return config;\r\n},\r\n(error) => {\r\n  console.error(error);\r\n  return Promise.reject(error);\r\n}\r\n);\r\n\r\naxiosAuth.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  async (error) => {\r\n    // Throw an error to cancel the request\r\n    if (error.response && error.response.status === 500) {\r\n        throw new Error('Internal Server Error');\r\n    } \r\n    // Check if the error is due to an expired token\r\n    if (error.response.status === 401 && error.config && !error.config.__isRetryRequest) {\r\n      // Set the __isRetryRequest flag to prevent an infinite loop\r\n      error.config.__isRetryRequest = true;\r\n      // Refresh the token\r\n      // await refreshingToken();\r\n      // Update the Authorization header with the new token\r\n      let accessToken = localStorage.getItem('token')\r\n      error.config.headers[\"Authorization\"] = `Bearer ${accessToken}`;\r\n      // Retry the original request with the new token\r\n      return axiosAuth(error.config);\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport {axiosAuth};\r\n// import axios from 'axios';\r\n\r\n// axios.defaults.baseURL = 'http://138.199.220.5:8001';\r\n\r\n// const axiosAuth = axios.create({\r\n//   baseURL: 'http://138.199.220.5:8001',\r\n//   headers: {\r\n//     'Content-Type': 'application/json',\r\n//   },\r\n// });\r\n\r\n\r\n// export {axiosAuth};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB;AACA;AACA;;AAEAA,KAAK,CAACC,QAAQ,CAACC,OAAO,GAAG,2BAA2B;AAEpD,MAAMC,SAAS,GAAGH,KAAK,CAACI,MAAM,CAAC;EAC7B;EACA;EACA;EACAF,OAAO,EAAG,2BAA2B;EAGrCG,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;AAGFF,SAAS,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAChC,MAAOC,MAAM,IAAK;EAClB;EACA,IAAIC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC/C,IAAGF,WAAW,EAAC;IACb;IACAD,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUK,WAAW,EAAE;IACzD;EAEF;EACA,OAAOD,MAAM;AACf,CAAC,EACAI,KAAK,IAAK;EACTC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;EACpB,OAAOE,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;AAC9B,CACA,CAAC;AAEDV,SAAS,CAACG,YAAY,CAACW,QAAQ,CAACT,GAAG,CAChCS,QAAQ,IAAK;EACZ,OAAOA,QAAQ;AACjB,CAAC,EACD,MAAOJ,KAAK,IAAK;EACf;EACA,IAAIA,KAAK,CAACI,QAAQ,IAAIJ,KAAK,CAACI,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;IACjD,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;EAC5C;EACA;EACA,IAAIN,KAAK,CAACI,QAAQ,CAACC,MAAM,KAAK,GAAG,IAAIL,KAAK,CAACJ,MAAM,IAAI,CAACI,KAAK,CAACJ,MAAM,CAACW,gBAAgB,EAAE;IACnF;IACAP,KAAK,CAACJ,MAAM,CAACW,gBAAgB,GAAG,IAAI;IACpC;IACA;IACA;IACA,IAAIV,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC/CC,KAAK,CAACJ,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUK,WAAW,EAAE;IAC/D;IACA,OAAOP,SAAS,CAACU,KAAK,CAACJ,MAAM,CAAC;EAChC;EACA,OAAOM,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,SAAQV,SAAS;AACjB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}