{"ast":null,"code":"import axios from 'axios';\n// axios.defaults.baseURL = 'http://45.79.209.137'\n// axios.defaults.baseURL = 'http://160.153.175.147'\n// axios.defaults.baseURL = 'http://127.0.0.1:8000'\n\naxios.defaults.baseURL = 'http://138.199.220.5:8001';\nconst axiosAuth = axios.create({\n  // baseURL:  \"http://45.79.209.137\",\n  // baseURL:  \"http://160.153.175.147\",\n  // baseURL:  \"http://127.0.0.1:8000\",\n  baseURL: 'http://138.199.220.5:8001',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\naxiosAuth.interceptors.request.use(async config => {\n  // Get the token from the store\n  let accessToken = localStorage.getItem('token');\n  if (accessToken) {\n    // print success messages in the console with green color using ANSI escape sequences\n    config.headers[\"Authorization\"] = `Bearer ${accessToken}`;\n    // config.headers[\"Authorization\"] = `Bearer ${accessToken}`;\n  }\n  return config;\n}, error => {\n  console.error(error);\n  return Promise.reject(error);\n});\naxiosAuth.interceptors.response.use(response => {\n  return response;\n}, async error => {\n  // Throw an error to cancel the request\n  if (error.response && error.response.status === 500) {\n    throw new Error('Internal Server Error');\n  }\n  // Check if the error is due to an expired token\n  if (error.response.status === 401 && error.config && !error.config.__isRetryRequest) {\n    // Set the __isRetryRequest flag to prevent an infinite loop\n    error.config.__isRetryRequest = true;\n    // Refresh the token\n    // await refreshingToken();\n    // Update the Authorization header with the new token\n    let accessToken = localStorage.getItem('token');\n    error.config.headers[\"Authorization\"] = `Bearer ${accessToken}`;\n    // Retry the original request with the new token\n    return axiosAuth(error.config);\n  }\n  return Promise.reject(error);\n});\nexport { axiosAuth };\n// // import axios from 'axios';\n\n// // axios.defaults.baseURL = 'http://138.199.220.5:8001';\n\n// // const axiosAuth = axios.create({\n// //   baseURL: 'http://138.199.220.5:8001',\n// //   headers: {\n// //     'Content-Type': 'application/json',\n// //   },\n// // });\n\n// // export {axiosAuth};\n\n// // src/plugins/axios/axiosAuth.js\n// import axios from 'axios';\n\n// // Base configuration\n// const axiosAuth = axios.create({\n//   baseURL: 'http://138.199.220.5:8001', // Your ERPNext instance\n//     withCredentials: true,\n//   headers: {\n//     'Content-Type': 'application/json',\n//     'Accept': 'application/json'\n//   }\n// });\n\n// // Request interceptor\n// axiosAuth.interceptors.request.use(\n//   (config) => {\n//     const token = localStorage.getItem('token');\n//     if (token) {\n//       // ERPNext uses \"token {token}\" format for authorization\n//       config.headers['Authorization'] = `token ${token}`;\n//     }\n//     return config;\n//   },\n//   (error) => {\n//     return Promise.reject(error);\n//   }\n// );\n\n// // Response interceptor\n// axiosAuth.interceptors.response.use(\n//   (response) => {\n//     // Handle successful responses\n//     return response;\n//   },\n//   (error) => {\n//     // Handle errors\n//     if (error.response) {\n//       switch (error.response.status) {\n//         case 401:\n//           // Clear auth data if unauthorized\n//           localStorage.removeItem('token');\n//           localStorage.removeItem('user');\n//           break;\n//         case 500:\n//           error.message = 'Internal Server Error';\n//           break;\n//       }\n//     }\n//     return Promise.reject(error);\n//   }\n// );\n\n// export { axiosAuth };\n\n// // src/plugins/axios/axiosAuth.js\n// import axios from 'axios';\n\n// const axiosAuth = axios.create({\n//   baseURL: 'http://138.199.220.5:8001',\n//   withCredentials: true, // This is crucial for cookie-based auth\n//   headers: {\n//     'Content-Type': 'application/json',\n//     'Accept': 'application/json'\n//   }\n// });\n\n// // Add CSRF token handling\n// axiosAuth.interceptors.request.use(config => {\n//   const csrfToken = document.cookie\n//     .split('; ')\n//     .find(row => row.startsWith('csrf_token='))\n//     ?.split('=')[1];\n\n//   if (csrfToken) {\n//     config.headers['X-Frappe-CSRF-Token'] = csrfToken;\n//   }\n//   return config;\n// });\n\n// export { axiosAuth };","map":{"version":3,"names":["axios","defaults","baseURL","axiosAuth","create","headers","interceptors","request","use","config","accessToken","localStorage","getItem","error","console","Promise","reject","response","status","Error","__isRetryRequest"],"sources":["D:/hadeerwork/erpnext-vue-front/src/plugins/axios/axiosAuth.js"],"sourcesContent":["import axios from 'axios';\r\n// axios.defaults.baseURL = 'http://45.79.209.137'\r\n// axios.defaults.baseURL = 'http://160.153.175.147'\r\n// axios.defaults.baseURL = 'http://127.0.0.1:8000'\r\n\r\naxios.defaults.baseURL = 'http://138.199.220.5:8001'\r\n\r\nconst axiosAuth = axios.create({\r\n  // baseURL:  \"http://45.79.209.137\",\r\n  // baseURL:  \"http://160.153.175.147\",\r\n  // baseURL:  \"http://127.0.0.1:8000\",\r\n  baseURL:  'http://138.199.220.5:8001',\r\n  \r\n\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n        \r\n        \r\naxiosAuth.interceptors.request.use(\r\n  async (config) => {\r\n  // Get the token from the store\r\n  let accessToken = localStorage.getItem('token')\r\n  if(accessToken){\r\n    // print success messages in the console with green color using ANSI escape sequences\r\n    config.headers[\"Authorization\"] = `Bearer ${accessToken}`;\r\n    // config.headers[\"Authorization\"] = `Bearer ${accessToken}`;\r\n\r\n  }\r\n  return config;\r\n},\r\n(error) => {\r\n  console.error(error);\r\n  return Promise.reject(error);\r\n}\r\n);\r\n\r\naxiosAuth.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  async (error) => {\r\n    // Throw an error to cancel the request\r\n    if (error.response && error.response.status === 500) {\r\n        throw new Error('Internal Server Error');\r\n    } \r\n    // Check if the error is due to an expired token\r\n    if (error.response.status === 401 && error.config && !error.config.__isRetryRequest) {\r\n      // Set the __isRetryRequest flag to prevent an infinite loop\r\n      error.config.__isRetryRequest = true;\r\n      // Refresh the token\r\n      // await refreshingToken();\r\n      // Update the Authorization header with the new token\r\n      let accessToken = localStorage.getItem('token')\r\n      error.config.headers[\"Authorization\"] = `Bearer ${accessToken}`;\r\n      // Retry the original request with the new token\r\n      return axiosAuth(error.config);\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport {axiosAuth};\r\n// // import axios from 'axios';\r\n\r\n// // axios.defaults.baseURL = 'http://138.199.220.5:8001';\r\n\r\n// // const axiosAuth = axios.create({\r\n// //   baseURL: 'http://138.199.220.5:8001',\r\n// //   headers: {\r\n// //     'Content-Type': 'application/json',\r\n// //   },\r\n// // });\r\n\r\n\r\n// // export {axiosAuth};\r\n\r\n// // src/plugins/axios/axiosAuth.js\r\n// import axios from 'axios';\r\n\r\n// // Base configuration\r\n// const axiosAuth = axios.create({\r\n//   baseURL: 'http://138.199.220.5:8001', // Your ERPNext instance\r\n//     withCredentials: true,\r\n//   headers: {\r\n//     'Content-Type': 'application/json',\r\n//     'Accept': 'application/json'\r\n//   }\r\n// });\r\n\r\n// // Request interceptor\r\n// axiosAuth.interceptors.request.use(\r\n//   (config) => {\r\n//     const token = localStorage.getItem('token');\r\n//     if (token) {\r\n//       // ERPNext uses \"token {token}\" format for authorization\r\n//       config.headers['Authorization'] = `token ${token}`;\r\n//     }\r\n//     return config;\r\n//   },\r\n//   (error) => {\r\n//     return Promise.reject(error);\r\n//   }\r\n// );\r\n\r\n// // Response interceptor\r\n// axiosAuth.interceptors.response.use(\r\n//   (response) => {\r\n//     // Handle successful responses\r\n//     return response;\r\n//   },\r\n//   (error) => {\r\n//     // Handle errors\r\n//     if (error.response) {\r\n//       switch (error.response.status) {\r\n//         case 401:\r\n//           // Clear auth data if unauthorized\r\n//           localStorage.removeItem('token');\r\n//           localStorage.removeItem('user');\r\n//           break;\r\n//         case 500:\r\n//           error.message = 'Internal Server Error';\r\n//           break;\r\n//       }\r\n//     }\r\n//     return Promise.reject(error);\r\n//   }\r\n// );\r\n\r\n// export { axiosAuth };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// // src/plugins/axios/axiosAuth.js\r\n// import axios from 'axios';\r\n\r\n// const axiosAuth = axios.create({\r\n//   baseURL: 'http://138.199.220.5:8001',\r\n//   withCredentials: true, // This is crucial for cookie-based auth\r\n//   headers: {\r\n//     'Content-Type': 'application/json',\r\n//     'Accept': 'application/json'\r\n//   }\r\n// });\r\n\r\n// // Add CSRF token handling\r\n// axiosAuth.interceptors.request.use(config => {\r\n//   const csrfToken = document.cookie\r\n//     .split('; ')\r\n//     .find(row => row.startsWith('csrf_token='))\r\n//     ?.split('=')[1];\r\n  \r\n//   if (csrfToken) {\r\n//     config.headers['X-Frappe-CSRF-Token'] = csrfToken;\r\n//   }\r\n//   return config;\r\n// });\r\n\r\n// export { axiosAuth };"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB;AACA;AACA;;AAEAA,KAAK,CAACC,QAAQ,CAACC,OAAO,GAAG,2BAA2B;AAEpD,MAAMC,SAAS,GAAGH,KAAK,CAACI,MAAM,CAAC;EAC7B;EACA;EACA;EACAF,OAAO,EAAG,2BAA2B;EAGrCG,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;AAGFF,SAAS,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAChC,MAAOC,MAAM,IAAK;EAClB;EACA,IAAIC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC/C,IAAGF,WAAW,EAAC;IACb;IACAD,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUK,WAAW,EAAE;IACzD;EAEF;EACA,OAAOD,MAAM;AACf,CAAC,EACAI,KAAK,IAAK;EACTC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;EACpB,OAAOE,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;AAC9B,CACA,CAAC;AAEDV,SAAS,CAACG,YAAY,CAACW,QAAQ,CAACT,GAAG,CAChCS,QAAQ,IAAK;EACZ,OAAOA,QAAQ;AACjB,CAAC,EACD,MAAOJ,KAAK,IAAK;EACf;EACA,IAAIA,KAAK,CAACI,QAAQ,IAAIJ,KAAK,CAACI,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;IACjD,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;EAC5C;EACA;EACA,IAAIN,KAAK,CAACI,QAAQ,CAACC,MAAM,KAAK,GAAG,IAAIL,KAAK,CAACJ,MAAM,IAAI,CAACI,KAAK,CAACJ,MAAM,CAACW,gBAAgB,EAAE;IACnF;IACAP,KAAK,CAACJ,MAAM,CAACW,gBAAgB,GAAG,IAAI;IACpC;IACA;IACA;IACA,IAAIV,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC/CC,KAAK,CAACJ,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUK,WAAW,EAAE;IAC/D;IACA,OAAOP,SAAS,CAACU,KAAK,CAACJ,MAAM,CAAC;EAChC;EACA,OAAOM,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,SAAQV,SAAS;AACjB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AASA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}