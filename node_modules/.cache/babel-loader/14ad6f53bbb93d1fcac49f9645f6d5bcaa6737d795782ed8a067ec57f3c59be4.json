{"ast":null,"code":"// import {axiosAuth} from '@/plugins/axios/axiosAuth';\n\n// const state = {\n//     token: localStorage.getItem('token') || null,\n//     user: JSON.parse(localStorage.getItem('user')) || null,\n//     status: '', // Can be 'loading', 'success', 'error'\n//     role: localStorage.getItem('role') || null  // Add role to state\n// };\n\n// const getters = {\n//     isAuthenticated: state => !!state.token,\n//     authStatus: state => state.status,\n//     currentUser: state => state.user,\n//     userRole: state => state.role,\n//     hasRole: (state) => (role) => state.role === role\n// };\n\n// const mutations = {\n//     AUTH_REQUEST(state) {\n//         state.status = 'loading';\n//     },\n//     AUTH_SUCCESS(state, { token, user }) {\n//         state.status = 'success';\n//         state.token = token;\n//         state.user = user;\n//         state.role = user.role;  // Store role from user object\n//         localStorage.setItem('role', user.role);  // Persist role\n//     },\n//     LOGOUT(state) {\n//         state.token = null;\n//         state.user = null;\n//         state.role = null;\n//         localStorage.removeItem('role');\n//     },\n//     AUTH_ERROR(state) {\n//         state.status = 'error';\n//         state.token = null;\n//         state.user = null;\n//     },\n\n// };\n\n// const actions = {\n//     async login({ commit }, credentials) {\n//         commit('AUTH_REQUEST');\n\n//         try {\n//             // /users/login\n//             const response = await axiosAuth.post('/api/method/my_app.custom_login', {\n//                 usr: credentials.email,\n//                 pwd: credentials.password\n//             });\n//             const token = response.data.user.tokens.access;\n//             const user = response.data.user;\n\n//             // Store token and user in localStorage\n//             localStorage.setItem('token', token);\n//             localStorage.setItem('user', JSON.stringify(user));\n\n//             // Set default authorization header\n//             axiosAuth.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n\n//             commit('AUTH_SUCCESS', { token, user });\n//             return response.data;\n//         } catch (error) {\n//             commit('AUTH_ERROR');\n//             localStorage.removeItem('token');\n//             localStorage.removeItem('user');\n//             delete axiosAuth.defaults.headers.common['Authorization'];\n//             throw error;\n//         }\n//     },\n\n//     register({ commit }, userData) {\n//         return new Promise((resolve, reject) => {\n//             commit('AUTH_REQUEST');\n\n//             axiosAuth.post('users/register', userData)\n//                 .then(response => {\n//                     resolve(response);\n//                 })\n//                 .catch(error => {\n//                     commit('AUTH_ERROR');\n//                     reject(error);\n//                 });\n//         });\n//     },\n\n//     logout({ commit }) {\n//         return new Promise((resolve) => {\n//             commit('LOGOUT');\n//             localStorage.removeItem('token');\n//             localStorage.removeItem('user');\n//             delete axiosAuth.defaults.headers.common['Authorization'];\n//             resolve();\n//         });\n//     },\n\n//     checkAuth({ commit }) {\n//         const token = localStorage.getItem('token');\n//         if (token) {\n//             const user = JSON.parse(localStorage.getItem('user'));\n//             axiosAuth.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n//             commit('AUTH_SUCCESS', { token, user });\n//         }\n//     }\n// };\n\n// export default {\n//     namespaced: true,\n//     state,\n//     getters,\n//     mutations,\n//     actions,\n// };\n\nimport { axiosAuth } from '@/plugins/axios/axiosAuth';\nconst state = {\n  token: localStorage.getItem('token') || null,\n  user: JSON.parse(localStorage.getItem('user')) || null,\n  status: '',\n  // Can be 'loading', 'success', 'error'\n  sid: localStorage.getItem('sid') || null,\n  // Store session ID\n  home_page: localStorage.getItem('home_page') || '/app/home'\n};\nconst getters = {\n  isAuthenticated: state => !!state.sid,\n  // Now checking sid instead of token\n  authStatus: state => state.status,\n  currentUser: state => state.user,\n  homePage: state => state.home_page,\n  hasRole: state => role => state.user && state.user.role === role\n};\nconst mutations = {\n  AUTH_REQUEST(state) {\n    state.status = 'loading';\n  },\n  AUTH_SUCCESS(state, {\n    sid,\n    user,\n    home_page\n  }) {\n    state.status = 'success';\n    state.sid = sid;\n    state.user = {\n      email: user,\n      full_name: state.full_name\n    };\n    state.home_page = home_page;\n\n    // Persist in localStorage\n    localStorage.setItem('sid', sid);\n    localStorage.setItem('user', JSON.stringify(state.user));\n    localStorage.setItem('home_page', home_page);\n  },\n  LOGOUT(state) {\n    state.sid = null;\n    state.user = null;\n    state.home_page = '/app/home';\n    localStorage.removeItem('sid');\n    localStorage.removeItem('user');\n    localStorage.removeItem('home_page');\n  },\n  AUTH_ERROR(state) {\n    state.status = 'error';\n    state.sid = null;\n    state.user = null;\n  },\n  SET_FULL_NAME(state, full_name) {\n    state.full_name = full_name;\n    if (state.user) {\n      state.user.full_name = full_name;\n      localStorage.setItem('user', JSON.stringify(state.user));\n    }\n  }\n};\nconst actions = {\n  async login({\n    commit\n  }, credentials) {\n    commit('AUTH_REQUEST');\n    try {\n      const response = await axiosAuth.post('/api/method/my_app.custom_login', {\n        usr: credentials.email,\n        pwd: credentials.password\n      });\n\n      // Extract data from response\n      const {\n        message\n      } = response.data;\n      const {\n        sid,\n        user,\n        full_name,\n        home_page\n      } = message;\n\n      // Store session data\n      commit('AUTH_SUCCESS', {\n        sid,\n        user,\n        home_page\n      });\n      commit('SET_FULL_NAME', full_name);\n\n      // Set CSRF token for subsequent requests\n      axiosAuth.defaults.headers.common['X-Frappe-Sid'] = sid;\n      return response.data;\n    } catch (error) {\n      commit('AUTH_ERROR');\n      localStorage.removeItem('sid');\n      localStorage.removeItem('user');\n      delete axiosAuth.defaults.headers.common['X-Frappe-Sid'];\n      throw error;\n    }\n  },\n  async logout({\n    commit\n  }) {\n    try {\n      await axiosAuth.post('/api/method/frappe.auth.logout');\n    } finally {\n      commit('LOGOUT');\n      localStorage.removeItem('sid');\n      localStorage.removeItem('user');\n      delete axiosAuth.defaults.headers.common['X-Frappe-Sid'];\n    }\n  },\n  checkAuth({\n    commit\n  }) {\n    const sid = localStorage.getItem('sid');\n    if (sid) {\n      const user = JSON.parse(localStorage.getItem('user'));\n      axiosAuth.defaults.headers.common['X-Frappe-Sid'] = sid;\n      commit('AUTH_SUCCESS', {\n        sid,\n        user: user.email,\n        home_page: localStorage.getItem('home_page')\n      });\n      commit('SET_FULL_NAME', user.full_name);\n    }\n  },\n  // Optional: Refresh session\n  async refreshSession({\n    state,\n    commit\n  }) {\n    if (!state.sid) return;\n    try {\n      const response = await axiosAuth.get('/api/method/frappe.auth.get_logged_user');\n      commit('SET_FULL_NAME', response.data.message.full_name);\n    } catch (error) {\n      commit('LOGOUT');\n    }\n  }\n};\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  mutations,\n  actions\n};","map":{"version":3,"names":["axiosAuth","state","token","localStorage","getItem","user","JSON","parse","status","sid","home_page","getters","isAuthenticated","authStatus","currentUser","homePage","hasRole","role","mutations","AUTH_REQUEST","AUTH_SUCCESS","email","full_name","setItem","stringify","LOGOUT","removeItem","AUTH_ERROR","SET_FULL_NAME","actions","login","commit","credentials","response","post","usr","pwd","password","message","data","defaults","headers","common","error","logout","checkAuth","refreshSession","get","namespaced"],"sources":["C:/Users/ALEX/Desktop/hadeerwork/blood_bank_system/erpnext-vue-front/src/store/modules/auth/auth.js"],"sourcesContent":["\r\n// import {axiosAuth} from '@/plugins/axios/axiosAuth';\r\n\r\n// const state = {\r\n//     token: localStorage.getItem('token') || null,\r\n//     user: JSON.parse(localStorage.getItem('user')) || null,\r\n//     status: '', // Can be 'loading', 'success', 'error'\r\n//     role: localStorage.getItem('role') || null  // Add role to state\r\n// };\r\n\r\n// const getters = {\r\n//     isAuthenticated: state => !!state.token,\r\n//     authStatus: state => state.status,\r\n//     currentUser: state => state.user,\r\n//     userRole: state => state.role,\r\n//     hasRole: (state) => (role) => state.role === role\r\n// };\r\n\r\n// const mutations = {\r\n//     AUTH_REQUEST(state) {\r\n//         state.status = 'loading';\r\n//     },\r\n//     AUTH_SUCCESS(state, { token, user }) {\r\n//         state.status = 'success';\r\n//         state.token = token;\r\n//         state.user = user;\r\n//         state.role = user.role;  // Store role from user object\r\n//         localStorage.setItem('role', user.role);  // Persist role\r\n//     },\r\n//     LOGOUT(state) {\r\n//         state.token = null;\r\n//         state.user = null;\r\n//         state.role = null;\r\n//         localStorage.removeItem('role');\r\n//     },\r\n//     AUTH_ERROR(state) {\r\n//         state.status = 'error';\r\n//         state.token = null;\r\n//         state.user = null;\r\n//     },\r\n   \r\n// };\r\n\r\n// const actions = {\r\n//     async login({ commit }, credentials) {\r\n//         commit('AUTH_REQUEST');\r\n        \r\n//         try {\r\n//             // /users/login\r\n//             const response = await axiosAuth.post('/api/method/my_app.custom_login', {\r\n//                 usr: credentials.email,\r\n//                 pwd: credentials.password\r\n//             });\r\n//             const token = response.data.user.tokens.access;\r\n//             const user = response.data.user;\r\n            \r\n//             // Store token and user in localStorage\r\n//             localStorage.setItem('token', token);\r\n//             localStorage.setItem('user', JSON.stringify(user));\r\n            \r\n//             // Set default authorization header\r\n//             axiosAuth.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n            \r\n//             commit('AUTH_SUCCESS', { token, user });\r\n//             return response.data;\r\n//         } catch (error) {\r\n//             commit('AUTH_ERROR');\r\n//             localStorage.removeItem('token');\r\n//             localStorage.removeItem('user');\r\n//             delete axiosAuth.defaults.headers.common['Authorization'];\r\n//             throw error;\r\n//         }\r\n//     },\r\n    \r\n//     register({ commit }, userData) {\r\n//         return new Promise((resolve, reject) => {\r\n//             commit('AUTH_REQUEST');\r\n            \r\n//             axiosAuth.post('users/register', userData)\r\n//                 .then(response => {\r\n//                     resolve(response);\r\n//                 })\r\n//                 .catch(error => {\r\n//                     commit('AUTH_ERROR');\r\n//                     reject(error);\r\n//                 });\r\n//         });\r\n//     },\r\n    \r\n//     logout({ commit }) {\r\n//         return new Promise((resolve) => {\r\n//             commit('LOGOUT');\r\n//             localStorage.removeItem('token');\r\n//             localStorage.removeItem('user');\r\n//             delete axiosAuth.defaults.headers.common['Authorization'];\r\n//             resolve();\r\n//         });\r\n//     },\r\n    \r\n//     checkAuth({ commit }) {\r\n//         const token = localStorage.getItem('token');\r\n//         if (token) {\r\n//             const user = JSON.parse(localStorage.getItem('user'));\r\n//             axiosAuth.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n//             commit('AUTH_SUCCESS', { token, user });\r\n//         }\r\n//     }\r\n// };\r\n\r\n// export default {\r\n//     namespaced: true,\r\n//     state,\r\n//     getters,\r\n//     mutations,\r\n//     actions,\r\n// };\r\n\r\n\r\nimport { axiosAuth } from '@/plugins/axios/axiosAuth';\r\n\r\nconst state = {\r\n    token: localStorage.getItem('token') || null,\r\n    user: JSON.parse(localStorage.getItem('user')) || null,\r\n    status: '', // Can be 'loading', 'success', 'error'\r\n    sid: localStorage.getItem('sid') || null,  // Store session ID\r\n    home_page: localStorage.getItem('home_page') || '/app/home'\r\n};\r\n\r\nconst getters = {\r\n    isAuthenticated: state => !!state.sid,  // Now checking sid instead of token\r\n    authStatus: state => state.status,\r\n    currentUser: state => state.user,\r\n    homePage: state => state.home_page,\r\n    hasRole: (state) => (role) => state.user && state.user.role === role\r\n};\r\n\r\nconst mutations = {\r\n    AUTH_REQUEST(state) {\r\n        state.status = 'loading';\r\n    },\r\n    AUTH_SUCCESS(state, { sid, user, home_page }) {\r\n        state.status = 'success';\r\n        state.sid = sid;\r\n        state.user = {\r\n            email: user,\r\n            full_name: state.full_name\r\n        };\r\n        state.home_page = home_page;\r\n        \r\n        // Persist in localStorage\r\n        localStorage.setItem('sid', sid);\r\n        localStorage.setItem('user', JSON.stringify(state.user));\r\n        localStorage.setItem('home_page', home_page);\r\n    },\r\n    LOGOUT(state) {\r\n        state.sid = null;\r\n        state.user = null;\r\n        state.home_page = '/app/home';\r\n        localStorage.removeItem('sid');\r\n        localStorage.removeItem('user');\r\n        localStorage.removeItem('home_page');\r\n    },\r\n    AUTH_ERROR(state) {\r\n        state.status = 'error';\r\n        state.sid = null;\r\n        state.user = null;\r\n    },\r\n    SET_FULL_NAME(state, full_name) {\r\n        state.full_name = full_name;\r\n        if (state.user) {\r\n            state.user.full_name = full_name;\r\n            localStorage.setItem('user', JSON.stringify(state.user));\r\n        }\r\n    }\r\n};\r\n\r\nconst actions = {\r\n    async login({ commit }, credentials) {\r\n        commit('AUTH_REQUEST');\r\n        \r\n        try {\r\n            const response = await axiosAuth.post('/api/method/my_app.custom_login', {\r\n                usr: credentials.email,\r\n                pwd: credentials.password\r\n            });\r\n            \r\n            // Extract data from response\r\n            const { message } = response.data;\r\n            const { sid, user, full_name, home_page } = message;\r\n            \r\n            // Store session data\r\n            commit('AUTH_SUCCESS', { sid, user, home_page });\r\n            commit('SET_FULL_NAME', full_name);\r\n            \r\n            // Set CSRF token for subsequent requests\r\n            axiosAuth.defaults.headers.common['X-Frappe-Sid'] = sid;\r\n            \r\n            return response.data;\r\n        } catch (error) {\r\n            commit('AUTH_ERROR');\r\n            localStorage.removeItem('sid');\r\n            localStorage.removeItem('user');\r\n            delete axiosAuth.defaults.headers.common['X-Frappe-Sid'];\r\n            throw error;\r\n        }\r\n    },\r\n    \r\n    async logout({ commit }) {\r\n        try {\r\n            await axiosAuth.post('/api/method/frappe.auth.logout');\r\n        } finally {\r\n            commit('LOGOUT');\r\n            localStorage.removeItem('sid');\r\n            localStorage.removeItem('user');\r\n            delete axiosAuth.defaults.headers.common['X-Frappe-Sid'];\r\n        }\r\n    },\r\n    \r\n    checkAuth({ commit }) {\r\n        const sid = localStorage.getItem('sid');\r\n        if (sid) {\r\n            const user = JSON.parse(localStorage.getItem('user'));\r\n            axiosAuth.defaults.headers.common['X-Frappe-Sid'] = sid;\r\n            commit('AUTH_SUCCESS', { \r\n                sid, \r\n                user: user.email, \r\n                home_page: localStorage.getItem('home_page') \r\n            });\r\n            commit('SET_FULL_NAME', user.full_name);\r\n        }\r\n    },\r\n    \r\n    // Optional: Refresh session\r\n    async refreshSession({ state, commit }) {\r\n        if (!state.sid) return;\r\n        \r\n        try {\r\n            const response = await axiosAuth.get('/api/method/frappe.auth.get_logged_user');\r\n            commit('SET_FULL_NAME', response.data.message.full_name);\r\n        } catch (error) {\r\n            commit('LOGOUT');\r\n        }\r\n    }\r\n};\r\n\r\nexport default {\r\n    namespaced: true,\r\n    state,\r\n    getters,\r\n    mutations,\r\n    actions\r\n};"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}