{"ast":null,"code":"import { mapGetters, mapState } from 'vuex';\nimport DashboardCard from '@/components/dashboard/DashboardCard.vue';\nimport RecentActivity from '@/components/dashboard/RecentActivity.vue';\nexport default {\n  name: 'DashboardView',\n  components: {\n    DashboardCard,\n    RecentActivity\n  },\n  data() {\n    return {\n      salesData: {\n        total: 0,\n        trend: 0,\n        loading: true\n      },\n      customerData: {\n        new: 0,\n        trend: 0,\n        loading: true\n      },\n      orderData: {\n        pending: 0,\n        trend: 0,\n        loading: true\n      },\n      salesChartData: [],\n      customerChartData: [],\n      recentActivities: [],\n      isLoading: true\n    };\n  },\n  computed: {\n    ...mapGetters('auth', ['currentUser', 'fullName']),\n    ...mapState('auth', ['user']),\n    userName() {\n      return this.fullName || this.user?.full_name || 'User';\n    },\n    lastLogin() {\n      // Format last login date from user data or use current time\n      return new Date().toLocaleString();\n    }\n  },\n  async created() {\n    // await this.fetchDashboardData();\n    this.isLoading = false;\n  },\n  methods: {\n    // async fetchDashboardData() {\n    //   try {\n    //     // Fetch all data in parallel\n    //     await Promise.all([\n    //       this.fetchSalesData(),\n    //       this.fetchCustomerData(),\n    //       this.fetchOrderData(),\n    //       this.fetchChartData(),\n    //       this.fetchRecentActivities()\n    //     ]);\n    //   } catch (error) {\n    //     console.error('Error loading dashboard data:', error);\n    //     // Handle error (show notification, etc.)\n    //   }\n    // },\n\n    async fetchSalesData() {\n      // Example API call - replace with your actual endpoint\n      const response = await this.$axios.get('/api/method/get_sales_summary');\n      this.salesData = {\n        total: response.data.total_sales,\n        trend: response.data.trend,\n        loading: false\n      };\n    },\n    async fetchCustomerData() {\n      const response = await this.$axios.get('/api/method/get_customer_summary');\n      this.customerData = {\n        new: response.data.new_customers,\n        trend: response.data.trend,\n        loading: false\n      };\n    },\n    async fetchOrderData() {\n      const response = await this.$axios.get('/api/method/get_order_summary');\n      this.orderData = {\n        pending: response.data.pending_orders,\n        trend: response.data.trend,\n        loading: false\n      };\n    },\n    async fetchChartData() {\n      const responses = await Promise.all([this.$axios.get('/api/method/get_sales_chart_data'), this.$axios.get('/api/method/get_customer_chart_data')]);\n      this.salesChartData = responses[0].data;\n      this.customerChartData = responses[1].data;\n    },\n    async fetchRecentActivities() {\n      const response = await this.$axios.get('/api/method/get_recent_activities');\n      this.recentActivities = response.data.activities;\n    }\n  }\n};","map":{"version":3,"names":["mapGetters","mapState","DashboardCard","RecentActivity","name","components","data","salesData","total","trend","loading","customerData","new","orderData","pending","salesChartData","customerChartData","recentActivities","isLoading","computed","userName","fullName","user","full_name","lastLogin","Date","toLocaleString","created","methods","fetchSalesData","response","$axios","get","total_sales","fetchCustomerData","new_customers","fetchOrderData","pending_orders","fetchChartData","responses","Promise","all","fetchRecentActivities","activities"],"sources":["C:\\Users\\CITCPC3\\Desktop\\hadeer\\erpnext-vue-front\\src\\views\\DashboardView.vue"],"sourcesContent":["<template>\r\n  <div class=\"dashboard\">\r\n    <div class=\"dashboard-header\">\r\n      <h1>Welcome, {{ userName }}!</h1>\r\n      <p>Last login: {{ lastLogin }}</p>\r\n    </div>\r\n\r\n    <div class=\"dashboard-widgets\">\r\n      <!-- Summary Cards -->\r\n      <div class=\"widget-row\">\r\n        <DashboardCard \r\n          title=\"Total Sales\" \r\n          :value=\"salesData.total\" \r\n          icon=\"dollar-sign\"\r\n          :trend=\"salesData.trend\"\r\n        />\r\n        <DashboardCard \r\n          title=\"New Customers\" \r\n          :value=\"customerData.new\" \r\n          icon=\"users\"\r\n          :trend=\"customerData.trend\"\r\n        />\r\n        <DashboardCard \r\n          title=\"Pending Orders\" \r\n          :value=\"orderData.pending\" \r\n          icon=\"shopping-cart\"\r\n          :trend=\"orderData.trend\"\r\n        />\r\n      </div>\r\n\r\n      <!-- Charts Section -->\r\n      <!-- <div class=\"widget-row\">\r\n        <div class=\"chart-container\">\r\n          <LineChart :data=\"salesChartData\" title=\"Sales Trend\" />\r\n        </div>\r\n        <div class=\"chart-container\">\r\n          <BarChart :data=\"customerChartData\" title=\"Customer Growth\" />\r\n        </div>\r\n      </div> -->\r\n\r\n      <!-- Recent Activity -->\r\n      <div class=\"widget-row\">\r\n        <RecentActivity :items=\"recentActivities\" />\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapGetters, mapState } from 'vuex';\r\nimport DashboardCard from '@/components/dashboard/DashboardCard.vue';\r\n\r\nimport RecentActivity from '@/components/dashboard/RecentActivity.vue';\r\n\r\nexport default {\r\n  name: 'DashboardView',\r\n  components: {\r\n    DashboardCard,\r\n   \r\n    RecentActivity\r\n  },\r\n  data() {\r\n    return {\r\n      salesData: {\r\n        total: 0,\r\n        trend: 0,\r\n        loading: true\r\n      },\r\n      customerData: {\r\n        new: 0,\r\n        trend: 0,\r\n        loading: true\r\n      },\r\n      orderData: {\r\n        pending: 0,\r\n        trend: 0,\r\n        loading: true\r\n      },\r\n      salesChartData: [],\r\n      customerChartData: [],\r\n      recentActivities: [],\r\n      isLoading: true\r\n    };\r\n  },\r\n  computed: {\r\n    ...mapGetters('auth', ['currentUser', 'fullName']),\r\n    ...mapState('auth', ['user']),\r\n    \r\n    userName() {\r\n      return this.fullName || this.user?.full_name || 'User';\r\n    },\r\n    lastLogin() {\r\n      // Format last login date from user data or use current time\r\n      return new Date().toLocaleString();\r\n    }\r\n  },\r\n  async created() {\r\n    // await this.fetchDashboardData();\r\n    this.isLoading = false;\r\n  },\r\n  methods: {\r\n    // async fetchDashboardData() {\r\n    //   try {\r\n    //     // Fetch all data in parallel\r\n    //     await Promise.all([\r\n    //       this.fetchSalesData(),\r\n    //       this.fetchCustomerData(),\r\n    //       this.fetchOrderData(),\r\n    //       this.fetchChartData(),\r\n    //       this.fetchRecentActivities()\r\n    //     ]);\r\n    //   } catch (error) {\r\n    //     console.error('Error loading dashboard data:', error);\r\n    //     // Handle error (show notification, etc.)\r\n    //   }\r\n    // },\r\n    \r\n    async fetchSalesData() {\r\n      // Example API call - replace with your actual endpoint\r\n      const response = await this.$axios.get('/api/method/get_sales_summary');\r\n      this.salesData = {\r\n        total: response.data.total_sales,\r\n        trend: response.data.trend,\r\n        loading: false\r\n      };\r\n    },\r\n    \r\n    async fetchCustomerData() {\r\n      const response = await this.$axios.get('/api/method/get_customer_summary');\r\n      this.customerData = {\r\n        new: response.data.new_customers,\r\n        trend: response.data.trend,\r\n        loading: false\r\n      };\r\n    },\r\n    \r\n    async fetchOrderData() {\r\n      const response = await this.$axios.get('/api/method/get_order_summary');\r\n      this.orderData = {\r\n        pending: response.data.pending_orders,\r\n        trend: response.data.trend,\r\n        loading: false\r\n      };\r\n    },\r\n    \r\n    async fetchChartData() {\r\n      const responses = await Promise.all([\r\n        this.$axios.get('/api/method/get_sales_chart_data'),\r\n        this.$axios.get('/api/method/get_customer_chart_data')\r\n      ]);\r\n      \r\n      this.salesChartData = responses[0].data;\r\n      this.customerChartData = responses[1].data;\r\n    },\r\n    \r\n    async fetchRecentActivities() {\r\n      const response = await this.$axios.get('/api/method/get_recent_activities');\r\n      this.recentActivities = response.data.activities;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.dashboard {\r\n  padding: 20px;\r\n  height: 100%;\r\n}\r\n\r\n.dashboard-header {\r\n  margin-bottom: 30px;\r\n}\r\n\r\n.dashboard-header h1 {\r\n  font-size: 24px;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.dashboard-header p {\r\n  color: #666;\r\n  font-size: 14px;\r\n}\r\n\r\n.widget-row {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 20px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.chart-container {\r\n  flex: 1;\r\n  min-width: 300px;\r\n  background: white;\r\n  border-radius: 8px;\r\n  padding: 15px;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .widget-row {\r\n    flex-direction: column;\r\n  }\r\n  \r\n  .chart-container {\r\n    min-width: 100%;\r\n  }\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}