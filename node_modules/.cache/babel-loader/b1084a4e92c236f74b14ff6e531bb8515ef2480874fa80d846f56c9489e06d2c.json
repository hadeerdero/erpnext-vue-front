{"ast":null,"code":"import api from \"@/plugins/axios/axiosBusiness\";\nimport _ from 'lodash';\nexport default {\n  name: 'CustomerManagement',\n  data() {\n    return {\n      newCustomer: {\n        customer_name: '',\n        customer_type: 'Company',\n        customer_group: 'Commercial',\n        territory: 'United States'\n      },\n      customers: [],\n      isLoading: false,\n      isCreating: false,\n      searchQuery: '',\n      currentPage: 1,\n      pageSize: 10,\n      totalCustomers: 0,\n      apiConfig: {\n        baseURL: 'http://your-erpnext-instance.com',\n        // Change this to your ERPNext URL\n        apiKey: 'your-api-key',\n        // Replace with your API key\n        apiSecret: 'your-api-secret' // Replace with your API secret\n      }\n    };\n  },\n  computed: {\n    totalPages() {\n      return Math.ceil(this.totalCustomers / this.pageSize);\n    }\n  },\n  created() {\n    this.fetchCustomers();\n    this.debouncedSearch = _.debounce(this.searchCustomers, 500);\n  },\n  methods: {\n    getAuthHeaders() {\n      return {\n        'Authorization': `token ${this.apiConfig.apiKey}:${this.apiConfig.apiSecret}`,\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      };\n    },\n    async fetchCustomers() {\n      this.isLoading = true;\n      try {\n        const response = await api.get(`/api/resource/Customer`, {\n          params: {\n            fields: JSON.stringify(['customer_name', 'customer_type', 'customer_group', 'territory']),\n            limit_start: (this.currentPage - 1) * this.pageSize,\n            limit_page_length: this.pageSize\n          }\n        });\n        this.customers = response.data.data;\n        this.totalCustomers = response.data.total_count || response.data.data.length;\n      } catch (error) {\n        console.error('Error fetching customers:', error);\n        alert('Failed to fetch customers. Check console for details.');\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    async searchCustomers() {\n      if (!this.searchQuery) {\n        this.fetchCustomers();\n        return;\n      }\n      this.isLoading = true;\n      try {\n        const response = await api.get(`/api/resource/Customer`, {\n          headers: this.getAuthHeaders(),\n          params: {\n            fields: JSON.stringify(['customer_name', 'customer_type', 'customer_group', 'territory']),\n            filters: JSON.stringify([['customer_name', 'like', `%${this.searchQuery}%`]])\n          }\n        });\n        this.customers = response.data.data;\n        this.totalCustomers = response.data.total_count || response.data.data.length;\n        this.currentPage = 1;\n      } catch (error) {\n        console.error('Error searching customers:', error);\n        alert('Failed to search customers. Check console for details.');\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    async createCustomer() {\n      this.isCreating = true;\n      try {\n        await api.post(`/api/resource/Customer`, JSON.stringify(this.newCustomer));\n        alert('Customer created successfully!');\n        this.newCustomer = {\n          customer_name: '',\n          customer_type: 'Company',\n          customer_group: 'Commercial',\n          territory: 'United States'\n        };\n        this.fetchCustomers();\n      } catch (error) {\n        console.error('Error creating customer:', error);\n        alert('Failed to create customer. Check console for details.');\n      } finally {\n        this.isCreating = false;\n      }\n    },\n    editCustomer(customer) {\n      // In a real implementation, you might open a modal or navigate to an edit page\n      this.newCustomer = {\n        customer_name: customer.customer_name,\n        customer_type: customer.customer_type,\n        customer_group: customer.customer_group,\n        territory: customer.territory\n      };\n      window.scrollTo({\n        top: 0,\n        behavior: 'smooth'\n      });\n    },\n    async deleteCustomer(customerName) {\n      if (!confirm('Are you sure you want to delete this customer?')) return;\n      try {\n        await api.delete(`/api/resource/Customer/${customerName}`);\n        alert('Customer deleted successfully!');\n        this.fetchCustomers();\n      } catch (error) {\n        console.error('Error deleting customer:', error);\n        alert('Failed to delete customer. Check console for details.');\n      }\n    },\n    goToPage(page) {\n      this.currentPage = page;\n      this.fetchCustomers();\n    }\n  }\n};","map":{"version":3,"names":["api","_","name","data","newCustomer","customer_name","customer_type","customer_group","territory","customers","isLoading","isCreating","searchQuery","currentPage","pageSize","totalCustomers","apiConfig","baseURL","apiKey","apiSecret","computed","totalPages","Math","ceil","created","fetchCustomers","debouncedSearch","debounce","searchCustomers","methods","getAuthHeaders","response","get","params","fields","JSON","stringify","limit_start","limit_page_length","total_count","length","error","console","alert","headers","filters","createCustomer","post","editCustomer","customer","window","scrollTo","top","behavior","deleteCustomer","customerName","confirm","delete","goToPage","page"],"sources":["D:\\hadeerwork\\erpnext-vue-front\\src\\views\\CustomerManagementView.vue"],"sourcesContent":["<template>\r\n  <div class=\"customer-management\">\r\n    <h2>Customer Management</h2>\r\n    \r\n    <!-- Customer Creation Form -->\r\n    <div class=\"customer-form\">\r\n      <h3>Create New Customer</h3>\r\n      <form @submit.prevent=\"createCustomer\">\r\n        <div class=\"form-group\">\r\n          <label for=\"customerName\">Customer Name*</label>\r\n          <input \r\n            type=\"text\" \r\n            id=\"customerName\" \r\n            v-model=\"newCustomer.customer_name\" \r\n            required\r\n          />\r\n        </div>\r\n        \r\n        <div class=\"form-group\">\r\n          <label for=\"customerType\">Customer Type</label>\r\n          <select id=\"customerType\" v-model=\"newCustomer.customer_type\">\r\n            <option value=\"Company\">Company</option>\r\n            <option value=\"Individual\">Individual</option>\r\n          </select>\r\n        </div>\r\n        \r\n        <div class=\"form-group\">\r\n          <label for=\"customerGroup\">Customer Group*</label>\r\n          <input \r\n            type=\"text\" \r\n            id=\"customerGroup\" \r\n            v-model=\"newCustomer.customer_group\" \r\n            required\r\n          />\r\n        </div>\r\n        \r\n        <div class=\"form-group\">\r\n          <label for=\"territory\">Territory*</label>\r\n          <input \r\n            type=\"text\" \r\n            id=\"territory\" \r\n            v-model=\"newCustomer.territory\" \r\n            required\r\n          />\r\n        </div>\r\n        \r\n        <button type=\"submit\" :disabled=\"isCreating\">\r\n          {{ isCreating ? 'Creating...' : 'Create Customer' }}\r\n        </button>\r\n      </form>\r\n    </div>\r\n    \r\n    <!-- Customer List -->\r\n    <div class=\"customer-list\">\r\n      <h3>Customer List</h3>\r\n      <div class=\"list-controls\">\r\n        <button @click=\"fetchCustomers\" :disabled=\"isLoading\">\r\n          {{ isLoading ? 'Refreshing...' : 'Refresh List' }}\r\n        </button>\r\n        <input \r\n          type=\"text\" \r\n          v-model=\"searchQuery\" \r\n          placeholder=\"Search customers...\" \r\n          @input=\"debouncedSearch\"\r\n        />\r\n      </div>\r\n      \r\n      <div v-if=\"customers.length === 0 && !isLoading\" class=\"empty-state\">\r\n        No customers found\r\n      </div>\r\n      \r\n      <div v-else>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Name</th>\r\n              <th>Type</th>\r\n              <th>Group</th>\r\n              <th>Territory</th>\r\n              <th>Actions</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr v-for=\"customer in customers\" :key=\"customer.name\">\r\n              <td>{{ customer.customer_name }}</td>\r\n              <td>{{ customer.customer_type }}</td>\r\n              <td>{{ customer.customer_group }}</td>\r\n              <td>{{ customer.territory }}</td>\r\n              <td>\r\n                <button @click=\"editCustomer(customer)\">Edit</button>\r\n                <button @click=\"deleteCustomer(customer.name)\">Delete</button>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n        \r\n        <div class=\"pagination\" v-if=\"totalPages > 1\">\r\n          <button \r\n            v-for=\"page in totalPages\" \r\n            :key=\"page\" \r\n            @click=\"goToPage(page)\"\r\n            :class=\"{ active: currentPage === page }\"\r\n          >\r\n            {{ page }}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport api from \"@/plugins/axios/axiosBusiness\";\r\nimport _ from 'lodash';\r\n\r\nexport default {\r\n  name: 'CustomerManagement',\r\n  data() {\r\n    return {\r\n      newCustomer: {\r\n        customer_name: '',\r\n        customer_type: 'Company',\r\n        customer_group: 'Commercial',\r\n        territory: 'United States'\r\n      },\r\n      customers: [],\r\n      isLoading: false,\r\n      isCreating: false,\r\n      searchQuery: '',\r\n      currentPage: 1,\r\n      pageSize: 10,\r\n      totalCustomers: 0,\r\n      apiConfig: {\r\n        baseURL: 'http://your-erpnext-instance.com', // Change this to your ERPNext URL\r\n        apiKey: 'your-api-key', // Replace with your API key\r\n        apiSecret: 'your-api-secret' // Replace with your API secret\r\n      }\r\n    };\r\n  },\r\n  computed: {\r\n    totalPages() {\r\n      return Math.ceil(this.totalCustomers / this.pageSize);\r\n    }\r\n  },\r\n  created() {\r\n    this.fetchCustomers();\r\n    this.debouncedSearch = _.debounce(this.searchCustomers, 500);\r\n  },\r\n  methods: {\r\n    getAuthHeaders() {\r\n      return {\r\n        'Authorization': `token ${this.apiConfig.apiKey}:${this.apiConfig.apiSecret}`,\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json'\r\n      };\r\n    },\r\n    \r\n    async fetchCustomers() {\r\n      this.isLoading = true;\r\n      try {\r\n        const response = await api.get(`/api/resource/Customer`, {\r\n          params: {\r\n            fields: JSON.stringify(['customer_name', 'customer_type', 'customer_group', 'territory']),\r\n            limit_start: (this.currentPage - 1) * this.pageSize,\r\n            limit_page_length: this.pageSize\r\n          }\r\n        });\r\n        \r\n        this.customers = response.data.data;\r\n        this.totalCustomers = response.data.total_count || response.data.data.length;\r\n      } catch (error) {\r\n        console.error('Error fetching customers:', error);\r\n        alert('Failed to fetch customers. Check console for details.');\r\n      } finally {\r\n        this.isLoading = false;\r\n      }\r\n    },\r\n    \r\n    async searchCustomers() {\r\n      if (!this.searchQuery) {\r\n        this.fetchCustomers();\r\n        return;\r\n      }\r\n      \r\n      this.isLoading = true;\r\n      try {\r\n        const response = await api.get(`/api/resource/Customer`, {\r\n          headers: this.getAuthHeaders(),\r\n          params: {\r\n            fields: JSON.stringify(['customer_name', 'customer_type', 'customer_group', 'territory']),\r\n            filters: JSON.stringify([\r\n              ['customer_name', 'like', `%${this.searchQuery}%`]\r\n            ])\r\n          }\r\n        });\r\n        \r\n        this.customers = response.data.data;\r\n        this.totalCustomers = response.data.total_count || response.data.data.length;\r\n        this.currentPage = 1;\r\n      } catch (error) {\r\n        console.error('Error searching customers:', error);\r\n        alert('Failed to search customers. Check console for details.');\r\n      } finally {\r\n        this.isLoading = false;\r\n      }\r\n    },\r\n    \r\n    async createCustomer() {\r\n      this.isCreating = true;\r\n      try {\r\n        await api.post(\r\n          `/api/resource/Customer`,\r\n          JSON.stringify(this.newCustomer)\r\n          \r\n        );\r\n        \r\n        alert('Customer created successfully!');\r\n        this.newCustomer = {\r\n          customer_name: '',\r\n          customer_type: 'Company',\r\n          customer_group: 'Commercial',\r\n          territory: 'United States'\r\n        };\r\n        this.fetchCustomers();\r\n      } catch (error) {\r\n        console.error('Error creating customer:', error);\r\n        alert('Failed to create customer. Check console for details.');\r\n      } finally {\r\n        this.isCreating = false;\r\n      }\r\n    },\r\n    \r\n    editCustomer(customer) {\r\n      // In a real implementation, you might open a modal or navigate to an edit page\r\n      this.newCustomer = {\r\n        customer_name: customer.customer_name,\r\n        customer_type: customer.customer_type,\r\n        customer_group: customer.customer_group,\r\n        territory: customer.territory\r\n      };\r\n      window.scrollTo({ top: 0, behavior: 'smooth' });\r\n    },\r\n    \r\n    async deleteCustomer(customerName) {\r\n      if (!confirm('Are you sure you want to delete this customer?')) return;\r\n      \r\n      try {\r\n        await api.delete(\r\n          `/api/resource/Customer/${customerName}`\r\n        \r\n        );\r\n        \r\n        alert('Customer deleted successfully!');\r\n        this.fetchCustomers();\r\n      } catch (error) {\r\n        console.error('Error deleting customer:', error);\r\n        alert('Failed to delete customer. Check console for details.');\r\n      }\r\n    },\r\n    \r\n    goToPage(page) {\r\n      this.currentPage = page;\r\n      this.fetchCustomers();\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.customer-management {\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n}\r\n\r\n.customer-form, .customer-list {\r\n  background: #f9f9f9;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.form-group {\r\n  margin-bottom: 15px;\r\n}\r\n\r\nlabel {\r\n  display: block;\r\n  margin-bottom: 5px;\r\n  font-weight: bold;\r\n}\r\n\r\ninput, select {\r\n  width: 100%;\r\n  padding: 8px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n}\r\n\r\nbutton {\r\n  padding: 8px 15px;\r\n  background: #4CAF50;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  margin-right: 5px;\r\n}\r\n\r\nbutton:disabled {\r\n  background: #cccccc;\r\n  cursor: not-allowed;\r\n}\r\n\r\nbutton:hover:not(:disabled) {\r\n  background: #45a049;\r\n}\r\n\r\ntable {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n  margin-top: 20px;\r\n}\r\n\r\nth, td {\r\n  border: 1px solid #ddd;\r\n  padding: 8px;\r\n  text-align: left;\r\n}\r\n\r\nth {\r\n  background-color: #f2f2f2;\r\n}\r\n\r\ntr:nth-child(even) {\r\n  background-color: #f9f9f9;\r\n}\r\n\r\n.pagination {\r\n  margin-top: 20px;\r\n}\r\n\r\n.pagination button {\r\n  margin: 0 5px;\r\n}\r\n\r\n.pagination button.active {\r\n  background: #333;\r\n}\r\n\r\n.empty-state {\r\n  text-align: center;\r\n  padding: 20px;\r\n  color: #666;\r\n}\r\n\r\n.list-controls {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.list-controls input {\r\n  width: 300px;\r\n  margin-left: 10px;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}