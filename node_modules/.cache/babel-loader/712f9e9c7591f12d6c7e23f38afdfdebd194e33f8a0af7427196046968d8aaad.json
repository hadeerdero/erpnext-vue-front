{"ast":null,"code":"// import axios from 'axios';\n// // axios.defaults.baseURL = 'http://45.79.209.137'\n// // axios.defaults.baseURL = 'http://160.153.175.147'\n// // axios.defaults.baseURL = 'http://127.0.0.1:8000'\n\n// axios.defaults.baseURL = 'http://138.199.220.5:8001'\n\n// const axiosAuth = axios.create({\n//   // baseURL:  \"http://45.79.209.137\",\n//   // baseURL:  \"http://160.153.175.147\",\n//   // baseURL:  \"http://127.0.0.1:8000\",\n//   baseURL:  'http://138.199.220.5:8001',\n\n//   headers: {\n//     'Content-Type': 'application/json',\n//   },\n// });\n\n// axiosAuth.interceptors.request.use(\n//   async (config) => {\n//   // Get the token from the store\n//   let accessToken = localStorage.getItem('token')\n//   if(accessToken){\n//     // print success messages in the console with green color using ANSI escape sequences\n//     config.headers[\"Authorization\"] = `Bearer ${accessToken}`;\n//     // config.headers[\"Authorization\"] = `Bearer ${accessToken}`;\n\n//   }\n//   return config;\n// },\n// (error) => {\n//   console.error(error);\n//   return Promise.reject(error);\n// }\n// );\n\n// axiosAuth.interceptors.response.use(\n//   (response) => {\n//     return response;\n//   },\n//   async (error) => {\n//     // Throw an error to cancel the request\n//     if (error.response && error.response.status === 500) {\n//         throw new Error('Internal Server Error');\n//     }\n//     // Check if the error is due to an expired token\n//     if (error.response.status === 401 && error.config && !error.config.__isRetryRequest) {\n//       // Set the __isRetryRequest flag to prevent an infinite loop\n//       error.config.__isRetryRequest = true;\n//       // Refresh the token\n//       // await refreshingToken();\n//       // Update the Authorization header with the new token\n//       let accessToken = localStorage.getItem('token')\n//       error.config.headers[\"Authorization\"] = `Bearer ${accessToken}`;\n//       // Retry the original request with the new token\n//       return axiosAuth(error.config);\n//     }\n//     return Promise.reject(error);\n//   }\n// );\n\n// export {axiosAuth};\n// // import axios from 'axios';\n\n// // axios.defaults.baseURL = 'http://138.199.220.5:8001';\n\n// // const axiosAuth = axios.create({\n// //   baseURL: 'http://138.199.220.5:8001',\n// //   headers: {\n// //     'Content-Type': 'application/json',\n// //   },\n// // });\n\n// // export {axiosAuth};\n\n// src/plugins/axios/axiosAuth.js\n// import axios from \"axios\";\n\n// // Base configuration\n// const axiosAuth = axios.create({\n//   // baseURL: \"http://172.29.82.206:8000\", // Your ERPNext instance\n//   baseURL: 'http://138.199.220.5:8001',\n//   withCredentials: true,\n//   headers: {\n//     \"Content-Type\": \"application/json\",\n//     Accept: \"application/json\",\n//   },\n// });\n\n// // Request interceptor\n// axiosAuth.interceptors.request.use(\n//   (config) => {\n//     const token = localStorage.getItem(\"token\");\n//     if (token) {\n//       // ERPNext uses \"token {token}\" format for authorization\n//       config.headers[\"Authorization\"] = `token ${token}`;\n//     }\n//     return config;\n//   },\n//   (error) => {\n//     return Promise.reject(error);\n//   }\n// );\n\n// // Response interceptor\n// axiosAuth.interceptors.response.use(\n//   (response) => {\n//     // Handle successful responses\n//     return response;\n//   },\n//   (error) => {\n//     // Handle errors\n//     if (error.response) {\n//       switch (error.response.status) {\n//         case 401:\n//           // Clear auth data if unauthorized\n//           localStorage.removeItem(\"token\");\n//           localStorage.removeItem(\"user\");\n//           break;\n//         case 500:\n//           error.message = \"Internal Server Error\";\n//           break;\n//       }\n//     }\n//     return Promise.reject(error);\n//   }\n// );\n\n// export { axiosAuth };\n\nimport axios from \"axios\";\n\n// Base configuration\nconst axiosAuth = axios.create({\n  baseURL: 'http://138.199.220.5:8001',\n  withCredentials: true,\n  // Keep this for CSRF token cookies\n  headers: {\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n  }\n});\n\n// Request interceptor\naxiosAuth.interceptors.request.use(config => {\n  // Add token authentication\n  const apiToken = localStorage.getItem(\"api_token\");\n  const apiSecret = localStorage.getItem(\"api_secret\");\n  if (apiToken && apiSecret) {\n    // ERPNext token authentication format\n    config.headers[\"Authorization\"] = `token ${apiToken}:${apiSecret}`;\n  }\n\n  // Add CSRF token if available\n  const csrfToken = getCsrfToken();\n  if (csrfToken) {\n    config.headers[\"X-Frappe-CSRF-Token\"] = csrfToken;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor\naxiosAuth.interceptors.response.use(response => {\n  // Extract and store CSRF token if present in response\n  const csrfToken = response.headers[\"x-frappe-csrf-token\"];\n  if (csrfToken) {\n    localStorage.setItem(\"csrf_token\", csrfToken);\n  }\n  return response;\n}, error => {\n  // Handle errors\n  if (error.response) {\n    switch (error.response.status) {\n      case 401:\n        // Clear auth data if unauthorized\n        localStorage.removeItem(\"api_token\");\n        localStorage.removeItem(\"api_secret\");\n        localStorage.removeItem(\"user\");\n        localStorage.removeItem(\"home_page\");\n        localStorage.removeItem(\"csrf_token\");\n\n        // Optional: Redirect to login page\n        // window.location.href = '/login';\n        break;\n      case 403:\n        console.error(\"Permission denied:\", error.response.data);\n        break;\n      case 500:\n        console.error(\"Server error:\", error.response.data);\n        break;\n    }\n  }\n  return Promise.reject(error);\n});\n\n// Helper function to get CSRF token\nfunction getCsrfToken() {\n  // First try localStorage\n  const storedToken = localStorage.getItem(\"csrf_token\");\n  if (storedToken) return storedToken;\n\n  // Then try to get from cookies\n  const match = document.cookie.match('(^|;)\\\\s*frappe-csrf-token\\\\s*=\\\\s*([^;]+)');\n  return match ? match.pop() : '';\n}\nexport { axiosAuth };","map":{"version":3,"names":["axios","axiosAuth","create","baseURL","withCredentials","headers","interceptors","request","use","config","apiToken","localStorage","getItem","apiSecret","csrfToken","getCsrfToken","error","Promise","reject","response","setItem","status","removeItem","console","data","storedToken","match","document","cookie","pop"],"sources":["D:/hadeerwork/erpnext-vue-front/src/plugins/axios/axiosAuth.js"],"sourcesContent":["// import axios from 'axios';\r\n// // axios.defaults.baseURL = 'http://45.79.209.137'\r\n// // axios.defaults.baseURL = 'http://160.153.175.147'\r\n// // axios.defaults.baseURL = 'http://127.0.0.1:8000'\r\n\r\n// axios.defaults.baseURL = 'http://138.199.220.5:8001'\r\n\r\n// const axiosAuth = axios.create({\r\n//   // baseURL:  \"http://45.79.209.137\",\r\n//   // baseURL:  \"http://160.153.175.147\",\r\n//   // baseURL:  \"http://127.0.0.1:8000\",\r\n//   baseURL:  'http://138.199.220.5:8001',\r\n\r\n//   headers: {\r\n//     'Content-Type': 'application/json',\r\n//   },\r\n// });\r\n\r\n// axiosAuth.interceptors.request.use(\r\n//   async (config) => {\r\n//   // Get the token from the store\r\n//   let accessToken = localStorage.getItem('token')\r\n//   if(accessToken){\r\n//     // print success messages in the console with green color using ANSI escape sequences\r\n//     config.headers[\"Authorization\"] = `Bearer ${accessToken}`;\r\n//     // config.headers[\"Authorization\"] = `Bearer ${accessToken}`;\r\n\r\n//   }\r\n//   return config;\r\n// },\r\n// (error) => {\r\n//   console.error(error);\r\n//   return Promise.reject(error);\r\n// }\r\n// );\r\n\r\n// axiosAuth.interceptors.response.use(\r\n//   (response) => {\r\n//     return response;\r\n//   },\r\n//   async (error) => {\r\n//     // Throw an error to cancel the request\r\n//     if (error.response && error.response.status === 500) {\r\n//         throw new Error('Internal Server Error');\r\n//     }\r\n//     // Check if the error is due to an expired token\r\n//     if (error.response.status === 401 && error.config && !error.config.__isRetryRequest) {\r\n//       // Set the __isRetryRequest flag to prevent an infinite loop\r\n//       error.config.__isRetryRequest = true;\r\n//       // Refresh the token\r\n//       // await refreshingToken();\r\n//       // Update the Authorization header with the new token\r\n//       let accessToken = localStorage.getItem('token')\r\n//       error.config.headers[\"Authorization\"] = `Bearer ${accessToken}`;\r\n//       // Retry the original request with the new token\r\n//       return axiosAuth(error.config);\r\n//     }\r\n//     return Promise.reject(error);\r\n//   }\r\n// );\r\n\r\n// export {axiosAuth};\r\n// // import axios from 'axios';\r\n\r\n// // axios.defaults.baseURL = 'http://138.199.220.5:8001';\r\n\r\n// // const axiosAuth = axios.create({\r\n// //   baseURL: 'http://138.199.220.5:8001',\r\n// //   headers: {\r\n// //     'Content-Type': 'application/json',\r\n// //   },\r\n// // });\r\n\r\n// // export {axiosAuth};\r\n\r\n// src/plugins/axios/axiosAuth.js\r\n// import axios from \"axios\";\r\n\r\n// // Base configuration\r\n// const axiosAuth = axios.create({\r\n//   // baseURL: \"http://172.29.82.206:8000\", // Your ERPNext instance\r\n//   baseURL: 'http://138.199.220.5:8001',\r\n//   withCredentials: true,\r\n//   headers: {\r\n//     \"Content-Type\": \"application/json\",\r\n//     Accept: \"application/json\",\r\n//   },\r\n// });\r\n\r\n// // Request interceptor\r\n// axiosAuth.interceptors.request.use(\r\n//   (config) => {\r\n//     const token = localStorage.getItem(\"token\");\r\n//     if (token) {\r\n//       // ERPNext uses \"token {token}\" format for authorization\r\n//       config.headers[\"Authorization\"] = `token ${token}`;\r\n//     }\r\n//     return config;\r\n//   },\r\n//   (error) => {\r\n//     return Promise.reject(error);\r\n//   }\r\n// );\r\n\r\n// // Response interceptor\r\n// axiosAuth.interceptors.response.use(\r\n//   (response) => {\r\n//     // Handle successful responses\r\n//     return response;\r\n//   },\r\n//   (error) => {\r\n//     // Handle errors\r\n//     if (error.response) {\r\n//       switch (error.response.status) {\r\n//         case 401:\r\n//           // Clear auth data if unauthorized\r\n//           localStorage.removeItem(\"token\");\r\n//           localStorage.removeItem(\"user\");\r\n//           break;\r\n//         case 500:\r\n//           error.message = \"Internal Server Error\";\r\n//           break;\r\n//       }\r\n//     }\r\n//     return Promise.reject(error);\r\n//   }\r\n// );\r\n\r\n// export { axiosAuth };\r\n\r\n\r\nimport axios from \"axios\";\r\n\r\n// Base configuration\r\nconst axiosAuth = axios.create({\r\n  baseURL: 'http://138.199.220.5:8001',\r\n  withCredentials: true, // Keep this for CSRF token cookies\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n    \"Accept\": \"application/json\"\r\n  },\r\n});\r\n\r\n// Request interceptor\r\naxiosAuth.interceptors.request.use(\r\n  (config) => {\r\n    // Add token authentication\r\n    const apiToken = localStorage.getItem(\"api_token\");\r\n    const apiSecret = localStorage.getItem(\"api_secret\");\r\n    \r\n    if (apiToken && apiSecret) {\r\n      // ERPNext token authentication format\r\n      config.headers[\"Authorization\"] = `token ${apiToken}:${apiSecret}`;\r\n    }\r\n    \r\n    // Add CSRF token if available\r\n    const csrfToken = getCsrfToken();\r\n    if (csrfToken) {\r\n      config.headers[\"X-Frappe-CSRF-Token\"] = csrfToken;\r\n    }\r\n    \r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor\r\naxiosAuth.interceptors.response.use(\r\n  (response) => {\r\n    // Extract and store CSRF token if present in response\r\n    const csrfToken = response.headers[\"x-frappe-csrf-token\"];\r\n    if (csrfToken) {\r\n      localStorage.setItem(\"csrf_token\", csrfToken);\r\n    }\r\n    \r\n    return response;\r\n  },\r\n  (error) => {\r\n    // Handle errors\r\n    if (error.response) {\r\n      switch (error.response.status) {\r\n        case 401:\r\n          // Clear auth data if unauthorized\r\n          localStorage.removeItem(\"api_token\");\r\n          localStorage.removeItem(\"api_secret\");\r\n          localStorage.removeItem(\"user\");\r\n          localStorage.removeItem(\"home_page\");\r\n          localStorage.removeItem(\"csrf_token\");\r\n          \r\n          // Optional: Redirect to login page\r\n          // window.location.href = '/login';\r\n          break;\r\n          \r\n        case 403:\r\n          console.error(\"Permission denied:\", error.response.data);\r\n          break;\r\n          \r\n        case 500:\r\n          console.error(\"Server error:\", error.response.data);\r\n          break;\r\n      }\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Helper function to get CSRF token\r\nfunction getCsrfToken() {\r\n  // First try localStorage\r\n  const storedToken = localStorage.getItem(\"csrf_token\");\r\n  if (storedToken) return storedToken;\r\n  \r\n  // Then try to get from cookies\r\n  const match = document.cookie.match('(^|;)\\\\s*frappe-csrf-token\\\\s*=\\\\s*([^;]+)');\r\n  return match ? match.pop() : '';\r\n}\r\n\r\nexport { axiosAuth };\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,SAAS,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC7BC,OAAO,EAAE,2BAA2B;EACpCC,eAAe,EAAE,IAAI;EAAE;EACvBC,OAAO,EAAE;IACP,cAAc,EAAE,kBAAkB;IAClC,QAAQ,EAAE;EACZ;AACF,CAAC,CAAC;;AAEF;AACAJ,SAAS,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAC/BC,MAAM,IAAK;EACV;EACA,MAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EAClD,MAAMC,SAAS,GAAGF,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;EAEpD,IAAIF,QAAQ,IAAIG,SAAS,EAAE;IACzB;IACAJ,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,GAAG,SAASK,QAAQ,IAAIG,SAAS,EAAE;EACpE;;EAEA;EACA,MAAMC,SAAS,GAAGC,YAAY,CAAC,CAAC;EAChC,IAAID,SAAS,EAAE;IACbL,MAAM,CAACJ,OAAO,CAAC,qBAAqB,CAAC,GAAGS,SAAS;EACnD;EAEA,OAAOL,MAAM;AACf,CAAC,EACAO,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAf,SAAS,CAACK,YAAY,CAACa,QAAQ,CAACX,GAAG,CAChCW,QAAQ,IAAK;EACZ;EACA,MAAML,SAAS,GAAGK,QAAQ,CAACd,OAAO,CAAC,qBAAqB,CAAC;EACzD,IAAIS,SAAS,EAAE;IACbH,YAAY,CAACS,OAAO,CAAC,YAAY,EAAEN,SAAS,CAAC;EAC/C;EAEA,OAAOK,QAAQ;AACjB,CAAC,EACAH,KAAK,IAAK;EACT;EACA,IAAIA,KAAK,CAACG,QAAQ,EAAE;IAClB,QAAQH,KAAK,CAACG,QAAQ,CAACE,MAAM;MAC3B,KAAK,GAAG;QACN;QACAV,YAAY,CAACW,UAAU,CAAC,WAAW,CAAC;QACpCX,YAAY,CAACW,UAAU,CAAC,YAAY,CAAC;QACrCX,YAAY,CAACW,UAAU,CAAC,MAAM,CAAC;QAC/BX,YAAY,CAACW,UAAU,CAAC,WAAW,CAAC;QACpCX,YAAY,CAACW,UAAU,CAAC,YAAY,CAAC;;QAErC;QACA;QACA;MAEF,KAAK,GAAG;QACNC,OAAO,CAACP,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAACG,QAAQ,CAACK,IAAI,CAAC;QACxD;MAEF,KAAK,GAAG;QACND,OAAO,CAACP,KAAK,CAAC,eAAe,EAAEA,KAAK,CAACG,QAAQ,CAACK,IAAI,CAAC;QACnD;IACJ;EACF;EACA,OAAOP,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,SAASD,YAAYA,CAAA,EAAG;EACtB;EACA,MAAMU,WAAW,GAAGd,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;EACtD,IAAIa,WAAW,EAAE,OAAOA,WAAW;;EAEnC;EACA,MAAMC,KAAK,GAAGC,QAAQ,CAACC,MAAM,CAACF,KAAK,CAAC,4CAA4C,CAAC;EACjF,OAAOA,KAAK,GAAGA,KAAK,CAACG,GAAG,CAAC,CAAC,GAAG,EAAE;AACjC;AAEA,SAAS5B,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}